cmake_minimum_required(VERSION 2.8.11)

# Use MACOSX_RPATH by default on OS X. This was added in CMake 2.8.12 and
# became default in CMake 3.0. Explicitly setting this policy is necessary to
# suppress a warning in CMake 3.0 and above.
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

project(aikido)

list(INSERT CMAKE_MODULE_PATH 0 "${PROJECT_SOURCE_DIR}/cmake") 
list(APPEND CMAKE_CXX_FLAGS "-std=c++11")

set(INCLUDE_INSTALL_DIR include)
set(LIBRARY_INSTALL_DIR lib)
set(CONFIG_INSTALL_DIR "${LIBRARY_INSTALL_DIR}/${PROJECT_NAME}/cmake")

find_package(Boost REQUIRED COMPONENTS filesystem)
find_package(DART REQUIRED COMPONENTS core)
find_package(TinyXML2 REQUIRED)

# Compilation setup
include_directories(
  include
  src
)
include_directories(SYSTEM
  ${Boost_INCLUDE_DIRS}
  ${DART_INCLUDE_DIRS}
  ${TinyXML2_INCLUDE_DIRS}
)

# Build
add_library(${PROJECT_NAME} SHARED
  #src/path/HauserSmoother.cpp
  src/path/BlendTrajectory.cpp
  src/path/ShiftTrajectory.cpp
  src/path/CartesianTwistTrajectory.cpp
  src/statespace/RealVectorStateSpace.cpp
  src/statespace/RealVectorJointStateSpace.cpp
  src/statespace/RealVectorStateSpaceSampleableConstraint.cpp
  src/statespace/SO2StateSpace.cpp
  src/statespace/SO2StateSpace.cpp
  src/statespace/SO2JointStateSpace.cpp
  src/statespace/SO2StateSpaceSampleableConstraint.cpp
  src/statespace/SO3StateSpace.cpp
  src/statespace/SE2StateSpace.cpp
  src/statespace/SE3StateSpace.cpp
  src/statespace/SE3JointStateSpace.cpp
  src/statespace/JointStateSpace.cpp
  src/statespace/CompoundStateSpace.cpp
  src/statespace/CompoundStateSpaceSampleableConstraint.cpp
  src/statespace/MetaSkeletonStateSpace.cpp
  src/constraint/TSR.cpp
  src/constraint/TSRSampleGenerator.cpp
  src/constraint/FrameConstraintAdaptor.cpp
  src/constraint/FramePairConstraintAdaptor.cpp
  # src/constraint/IkSampleableConstraint.cpp
  # src/constraint/IkSampleGenerator.cpp
  src/constraint/PolynomialConstraint.cpp
  src/constraint/DifferentiableProjector.cpp
  #src/constraint/IkSampleGenerator.cpp
  src/util/CatkinResourceRetriever.cpp
  src/util/PseudoInverse.cpp
  src/external/hauser_parabolic_smoother/DynamicPath.cpp
  src/external/hauser_parabolic_smoother/Timer.cpp
  src/external/hauser_parabolic_smoother/ParabolicRamp.cpp
  # src/ompl/DARTGeometricStateSpace.cpp
  # src/ompl/DARTStateSampler.cpp
)
target_link_libraries(${PROJECT_NAME}
  ${DART_LIBRARIES}
  ${Boost_LIBRARIES}
  ${TinyXML2_LIBRARIES}
)


# Install targets, headers, and a package.xml file (to satisfy REP-136).
install(FILES package.xml
  DESTINATION "share/${PROJECT_NAME}"
)
install(DIRECTORY include/
  DESTINATION "${INCLUDE_INSTALL_DIR}"
)
install(TARGETS ${PROJECT_NAME}
  EXPORT "${PROJECT_NAME}Targets"
  LIBRARY DESTINATION "${LIBRARY_INSTALL_DIR}"
)

# Generate and install a Targets.cmake file that contains EXPORTED targets, to
# be included() in the Config.cmake file. The target set "r3Targets" is
# generated by the install(TARGETS) directive above.
install(EXPORT "${PROJECT_NAME}Targets"
  FILE "${PROJECT_NAME}Targets.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

# Generate and install a Config.cmake file.
# TODO: We should also generate a _VERSION file.
include(CMakePackageConfigHelpers)
configure_package_config_file("cmake/${PROJECT_NAME}Config.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
  PATH_VARS INCLUDE_INSTALL_DIR
)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

# Add unit tests using GTest.
enable_testing()
add_subdirectory(tests)
