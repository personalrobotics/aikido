<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>common.hpp</name>
    <path>/include/aikido/</path>
    <filename>dd/d3a/common_8hpp.html</filename>
    <includes id="d2/d1a/ExecutorMultiplexer_8hpp" name="ExecutorMultiplexer.hpp" local="yes" imported="no">aikido/common/ExecutorMultiplexer.hpp</includes>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <includes id="d1/da2/PseudoInverse_8hpp" name="PseudoInverse.hpp" local="yes" imported="no">aikido/common/PseudoInverse.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d8/d2a/common_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/common/Spline.hpp</includes>
    <includes id="d2/db8/StepSequence_8hpp" name="StepSequence.hpp" local="yes" imported="no">aikido/common/StepSequence.hpp</includes>
    <includes id="dc/d7a/VanDerCorput_8hpp" name="VanDerCorput.hpp" local="yes" imported="no">aikido/common/VanDerCorput.hpp</includes>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">aikido/common/metaprogramming.hpp</includes>
    <includes id="d9/d0f/stream_8hpp" name="stream.hpp" local="yes" imported="no">aikido/common/stream.hpp</includes>
    <includes id="d4/da0/string_8hpp" name="string.hpp" local="yes" imported="no">aikido/common/string.hpp</includes>
  </compound>
  <compound kind="file">
    <name>algorithm.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>de/d55/algorithm_8hpp.html</filename>
    <includes id="d7/de8/algorithm-impl_8hpp" name="algorithm-impl.hpp" local="yes" imported="no">aikido/common/detail/algorithm-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2f785e13331ed3caff844bf698624116</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2a65ebfdf34681623893b6d60c462756</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSpline.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d4/df3/common_2BSpline_8hpp.html</filename>
    <includes id="dd/d54/SplineFwd_8hpp" name="SplineFwd.hpp" local="yes" imported="no">aikido/common/SplineFwd.hpp</includes>
    <class kind="class">aikido::common::BSpline</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>void</type>
      <name>derivativesImpl</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a9e921b453d1f5e09b54201d5453e43a7</anchor>
      <arglist>(const SplineType &amp;spline, typename SplineType::Scalar u, Eigen::DenseIndex order, DerivativeType &amp;der)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSpline.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>d0/d4b/trajectory_2BSpline_8hpp.html</filename>
    <includes id="d4/df3/common_2BSpline_8hpp" name="BSpline.hpp" local="yes" imported="no">aikido/common/BSpline.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::trajectory::BSpline</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BSpline &gt;</type>
      <name>BSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ac89b04f346f87ecaf46e70ac24beff11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BSpline &gt;</type>
      <name>ConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a22d453735779a8169267516856ddb3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BSpline &gt;</type>
      <name>WeakBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a343d8e3d48df006922ca6d5800108c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BSpline &gt;</type>
      <name>WeakConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>abc082c3a700523a67f8919262c212212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BSpline &gt;</type>
      <name>UniqueBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afa10b662c09d5ac4c8776451d9db236f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BSpline &gt;</type>
      <name>UniqueConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8eeaf2a312ce9917381b8ce9acaf5b31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deprecated.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d0b/deprecated_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>AIKIDO_DEPRECATED</name>
      <anchorfile>d2/d0b/deprecated_8hpp.html</anchorfile>
      <anchor>aa26337ca89d96e6ca205b8e31bddbfa5</anchor>
      <arglist>(version)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AIKIDO_SUPPRESS_DEPRECATED_BEGIN</name>
      <anchorfile>d2/d0b/deprecated_8hpp.html</anchorfile>
      <anchor>a708854b0e20ccf6c382bd3957e8fb5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AIKIDO_SUPPRESS_DEPRECATED_END</name>
      <anchorfile>d2/d0b/deprecated_8hpp.html</anchorfile>
      <anchor>a6a8887e39779e7198d910641229d40f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algorithm-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d7/de8/algorithm-impl_8hpp.html</filename>
    <includes id="de/d55/algorithm_8hpp" name="algorithm.hpp" local="yes" imported="no">aikido/common/algorithm.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2f785e13331ed3caff844bf698624116</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2a65ebfdf34681623893b6d60c462756</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExecutorThread-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>da/d57/ExecutorThread-impl_8hpp.html</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>memory-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>da/d1f/memory-impl_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>::std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>affe0ffc9b5731d398c1ebc962ce714b9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metaprogramming-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d6/d39/metaprogramming-impl_8hpp.html</filename>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args... &gt; &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pair-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d4/d71/pair-impl_8hpp.html</filename>
    <includes id="d3/d9f/pair_8hpp" name="pair.hpp" local="yes" imported="no">aikido/common/pair.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>RNG-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>dc/d15/RNG-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>Quaternion</type>
      <name>sampleQuaternion</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7d110a30773e873691fa252da91ca085</anchor>
      <arglist>(Engine &amp;_engine, std::uniform_real_distribution&lt; Scalar &gt; &amp;_distribution)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d0/dcd/Spline-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorMultiplexer.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d1a/ExecutorMultiplexer_8hpp.html</filename>
    <class kind="class">aikido::common::ExecutorMultiplexer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorThread.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d0a/ExecutorThread_8hpp.html</filename>
    <includes id="da/d57/ExecutorThread-impl_8hpp" name="ExecutorThread-impl.hpp" local="yes" imported="no">aikido/common/detail/ExecutorThread-impl.hpp</includes>
    <class kind="class">aikido::common::ExecutorThread</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>memory.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>da/d3e/memory_8hpp.html</filename>
    <includes id="da/d1f/memory-impl_8hpp" name="memory-impl.hpp" local="yes" imported="no">aikido/common/detail/memory-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>::std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>affe0ffc9b5731d398c1ebc962ce714b9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metaprogramming.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d1/d66/metaprogramming_8hpp.html</filename>
    <includes id="d6/d39/metaprogramming-impl_8hpp" name="metaprogramming-impl.hpp" local="yes" imported="no">detail/metaprogramming-impl.hpp</includes>
    <class kind="class">aikido::common::type_list</class>
    <class kind="struct">aikido::common::DynamicCastFactory</class>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pair.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d3/d9f/pair_8hpp.html</filename>
    <includes id="d4/d71/pair-impl_8hpp" name="pair-impl.hpp" local="yes" imported="no">aikido/common/detail/pair-impl.hpp</includes>
    <class kind="struct">aikido::common::PairHash</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pointers.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d5/d1d/common_2pointers_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>AIKIDO_DECLARE_POINTERS</name>
      <anchorfile>d5/d1d/common_2pointers_8hpp.html</anchorfile>
      <anchor>a1f88d36d3e6b150e590dd0438cfeeb98</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointers.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/dba/rviz_2pointers_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SkeletonMarker &gt;</type>
      <name>SkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a34c18ceffcdaf5069bd9e4dd1fff6138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const SkeletonMarker &gt;</type>
      <name>ConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac0608bfce88f8d98aae072fc3417f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; SkeletonMarker &gt;</type>
      <name>WeakSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a93b63da472cb064ee34784703eb54b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const SkeletonMarker &gt;</type>
      <name>WeakConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeb4d34775b5b1b118169e8a592c9e3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SkeletonMarker &gt;</type>
      <name>UniqueSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a86f3d2693acc64aec0cccb4333cdb04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const SkeletonMarker &gt;</type>
      <name>UniqueConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a75aa225502b51f99e37c3a477e1f1f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryMarker &gt;</type>
      <name>TrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7af26876878ce12697125131d1c5506c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>ConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a185736f10f213b7055511921a016e6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryMarker &gt;</type>
      <name>WeakTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afb1c1eb2215ba1fa4d9bf1d9b25c0c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>WeakConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1273cc977c76332e21b2fc10b95b920c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryMarker &gt;</type>
      <name>UniqueTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a97920acb9abdf2a704fbc054834d2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>UniqueConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a894bb565b23b21b3add62f6b97f62cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSRMarker &gt;</type>
      <name>TSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a590951cdd9bce6890edd775ed8ef2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSRMarker &gt;</type>
      <name>ConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aef0d1b452a6ba7e6dfe95fbe552105d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSRMarker &gt;</type>
      <name>WeakTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab40eb785f9450167704216f3ab15cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSRMarker &gt;</type>
      <name>WeakConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae1925d8939631694db9a676f236d1d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSRMarker &gt;</type>
      <name>UniqueTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeba7efd72953d7cb0e919d0e4b3b889c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSRMarker &gt;</type>
      <name>UniqueConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aba793434f7d1a453e19df5f2c139a6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PseudoInverse.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d1/da2/PseudoInverse_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>pseudoinverse</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a0c897267b60a196a6d0b465d3b7050c0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, double eps=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RNG.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d16/RNG_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="dc/d15/RNG-impl_8hpp" name="RNG-impl.hpp" local="yes" imported="no">detail/RNG-impl.hpp</includes>
    <class kind="class">aikido::common::RNG</class>
    <class kind="class">aikido::common::RNGWrapper</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RNG &gt;</type>
      <name>RNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a6e93f385ba51ae65b1358caec7123594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RNG &gt;</type>
      <name>ConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5ab830b62be72e5609b3cebb4adf1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; RNG &gt;</type>
      <name>WeakRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a08c378abf527cfdd2dfc4b7562221f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const RNG &gt;</type>
      <name>WeakConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a065e5aa82c6a074d83ba022eef076e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>UniqueRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2e5beefd493aaebdee692c2e3e4be73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const RNG &gt;</type>
      <name>UniqueConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ae49864e7eb880866ebf17e8470eceac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>sampleQuaternion</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7d110a30773e873691fa252da91ca085</anchor>
      <arglist>(Engine &amp;_engine, std::uniform_real_distribution&lt; Scalar &gt; &amp;_distribution)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGsFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a4b27abd3edae153eb67309e0657f5f8e</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numOutputs, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ac57de355b263a15212902e5ba3ac6967</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>NUM_DEFAULT_SEEDS</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5e75364963030abfe764984f5dcf35e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d8/d2a/common_2Spline_8hpp.html</filename>
    <includes id="d0/dcd/Spline-impl_8hpp" name="Spline-impl.hpp" local="yes" imported="no">detail/Spline-impl.hpp</includes>
    <class kind="class">aikido::common::SplineND</class>
    <class kind="class">aikido::common::SplineProblem</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>Spline.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>df/db2/trajectory_2Spline_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::trajectory::Spline</class>
    <class kind="struct">aikido::trajectory::Spline::PolynomialSegment</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Spline &gt;</type>
      <name>SplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af715b917d92eede8c24a30790d273e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Spline &gt;</type>
      <name>ConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa8b189d07ea49d83c818baee644ebb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Spline &gt;</type>
      <name>WeakSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a896ee681516fff77ef6c14e209b5f00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Spline &gt;</type>
      <name>WeakConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afd2d0c8515b91196680d24f8b8cef069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Spline &gt;</type>
      <name>UniqueSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a20652ba77dffc09d6854f0a67236fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Spline &gt;</type>
      <name>UniqueConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae070eefd5debfb165f8dd0399516271c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SplineFwd.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>dd/d54/SplineFwd_8hpp.html</filename>
    <class kind="class">aikido::common::BSpline</class>
    <class kind="struct">aikido::common::SplineTraits</class>
    <class kind="struct">aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, Eigen::Dynamic &gt;</class>
    <class kind="struct">aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="typedef">
      <type>BSpline&lt; float, 2 &gt;</type>
      <name>BSpline2f</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a42724cb39ca8dff82160d8fda1bc910a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; float, 3 &gt;</type>
      <name>BSpline3f</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2850bee596241f2b94994c8de1504e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; double, 2 &gt;</type>
      <name>BSpline2d</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>aa8d3e60b25914a089728a7015e22da6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; double, 3 &gt;</type>
      <name>BSpline3d</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7b00a7133e2133128a2d6585cc2878e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepSequence.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/db8/StepSequence_8hpp.html</filename>
    <class kind="class">aikido::common::StepSequence</class>
    <class kind="class">aikido::common::StepSequence::const_iterator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>stream.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d9/d0f/stream_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <namespace>aikido::common::operators</namespace>
    <member kind="function">
      <type>void</type>
      <name>printCollisionObject</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a39252825f40e93cfec2ecc20abf7e31a</anchor>
      <arglist>(const dart::collision::CollisionObject &amp;collisionObject, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionResult</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a54d084e926f9f585cdb549e5774a873b</anchor>
      <arglist>(const dart::collision::CollisionResult &amp;collisionResult, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>a3593747aa33d43a9de2aa3cb986a66de</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionObject &amp;collisionObject)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>af3eeed202bd70764941ea4e67087b827</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionResult &amp;collisionResult)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d4/da0/string_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a101ad378b3da9a07f7149aed91ed25df</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;delimiters=&quot; \t&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanDerCorput.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>dc/d7a/VanDerCorput_8hpp.html</filename>
    <class kind="class">aikido::common::VanDerCorput</class>
    <class kind="class">aikido::common::VanDerCorput::const_iterator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>constraint.hpp</name>
    <path>/include/aikido/</path>
    <filename>d4/de1/constraint_8hpp.html</filename>
    <includes id="de/d7e/CartesianProductProjectable_8hpp" name="CartesianProductProjectable.hpp" local="yes" imported="no">aikido/constraint/CartesianProductProjectable.hpp</includes>
    <includes id="df/da0/CartesianProductSampleable_8hpp" name="CartesianProductSampleable.hpp" local="yes" imported="no">aikido/constraint/CartesianProductSampleable.hpp</includes>
    <includes id="df/d22/CartesianProductTestable_8hpp" name="CartesianProductTestable.hpp" local="yes" imported="no">aikido/constraint/CartesianProductTestable.hpp</includes>
    <includes id="da/d85/CyclicSampleable_8hpp" name="CyclicSampleable.hpp" local="yes" imported="no">aikido/constraint/CyclicSampleable.hpp</includes>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d6/d0c/DifferentiableIntersection_8hpp" name="DifferentiableIntersection.hpp" local="yes" imported="no">aikido/constraint/DifferentiableIntersection.hpp</includes>
    <includes id="d3/d00/DifferentiableSubspace_8hpp" name="DifferentiableSubspace.hpp" local="yes" imported="no">aikido/constraint/DifferentiableSubspace.hpp</includes>
    <includes id="d7/d0d/FiniteSampleable_8hpp" name="FiniteSampleable.hpp" local="yes" imported="no">aikido/constraint/FiniteSampleable.hpp</includes>
    <includes id="dd/d34/NewtonsMethodProjectable_8hpp" name="NewtonsMethodProjectable.hpp" local="yes" imported="no">aikido/constraint/NewtonsMethodProjectable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="da/d89/RejectionSampleable_8hpp" name="RejectionSampleable.hpp" local="yes" imported="no">aikido/constraint/RejectionSampleable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d3/d13/Satisfied_8hpp" name="Satisfied.hpp" local="yes" imported="no">aikido/constraint/Satisfied.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="de/da1/TestableIntersection_8hpp" name="TestableIntersection.hpp" local="yes" imported="no">aikido/constraint/TestableIntersection.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="d9/d1f/FrameDifferentiable_8hpp" name="FrameDifferentiable.hpp" local="yes" imported="no">aikido/constraint/dart/FrameDifferentiable.hpp</includes>
    <includes id="d0/d7c/FramePairDifferentiable_8hpp" name="FramePairDifferentiable.hpp" local="yes" imported="no">aikido/constraint/dart/FramePairDifferentiable.hpp</includes>
    <includes id="d3/df5/FrameTestable_8hpp" name="FrameTestable.hpp" local="yes" imported="no">aikido/constraint/dart/FrameTestable.hpp</includes>
    <includes id="d7/d9f/InverseKinematicsSampleable_8hpp" name="InverseKinematicsSampleable.hpp" local="yes" imported="no">aikido/constraint/dart/InverseKinematicsSampleable.hpp</includes>
    <includes id="d0/d33/constraint_2dart_2JointStateSpaceHelpers_8hpp" name="JointStateSpaceHelpers.hpp" local="yes" imported="no">aikido/constraint/dart/JointStateSpaceHelpers.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/RnBoxConstraint.hpp</includes>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/RnConstantSampler.hpp</includes>
    <includes id="d5/d89/SE2BoxConstraint_8hpp" name="SE2BoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/SE2BoxConstraint.hpp</includes>
    <includes id="df/d19/SO2UniformSampler_8hpp" name="SO2UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO2UniformSampler.hpp</includes>
    <includes id="dc/d57/SO3UniformSampler_8hpp" name="SO3UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO3UniformSampler.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductProjectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>de/d7e/CartesianProductProjectable_8hpp.html</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductProjectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>df/da0/CartesianProductSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductTestable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>df/d22/CartesianProductTestable_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductTestable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CyclicSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>da/d85/CyclicSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::CyclicSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionFree.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>de/d1d/CollisionFree_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d3c/CollisionFreeOutcome_8hpp" name="CollisionFreeOutcome.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFreeOutcome.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::CollisionFree</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFree &gt;</type>
      <name>CollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a4a19e2641a038515c281e075cb7d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CollisionFree &gt;</type>
      <name>ConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6f6e3cef5b4b245866ccd85db59179da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CollisionFree &gt;</type>
      <name>WeakCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0e0786bb7f6099b23f164626e01c1ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CollisionFree &gt;</type>
      <name>WeakConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a408c0f83e36fb6bb1d0d29dfecb4e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CollisionFree &gt;</type>
      <name>UniqueCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af9ba2c24e4883b5b93daaebfeeca1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CollisionFree &gt;</type>
      <name>UniqueConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af496650ab9bcf9528aa1049002e97c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionFreeOutcome.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d2/d3c/CollisionFreeOutcome_8hpp.html</filename>
    <includes id="d2/d1a/TestableOutcome_8hpp" name="TestableOutcome.hpp" local="yes" imported="no">aikido/constraint/TestableOutcome.hpp</includes>
    <class kind="class">aikido::constraint::dart::CollisionFreeOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers-impl.hpp</name>
    <path>/include/aikido/constraint/dart/detail/</path>
    <filename>d3/d47/constraint_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">aikido/common/metaprogramming.hpp</includes>
    <includes id="d3/d13/Satisfied_8hpp" name="Satisfied.hpp" local="yes" imported="no">aikido/constraint/Satisfied.hpp</includes>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/RnBoxConstraint.hpp</includes>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/RnConstantSampler.hpp</includes>
    <includes id="d5/d89/SE2BoxConstraint_8hpp" name="SE2BoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/SE2BoxConstraint.hpp</includes>
    <includes id="df/d19/SO2UniformSampler_8hpp" name="SO2UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO2UniformSampler.hpp</includes>
    <includes id="dc/d57/SO3UniformSampler_8hpp" name="SO3UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO3UniformSampler.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">aikido/statespace/dart/WeldJoint.hpp</includes>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <namespace>aikido::constraint::dart::detail</namespace>
    <member kind="typedef">
      <type>common::type_list&lt; const statespace::dart::R0Joint, const statespace::dart::R1Joint, const statespace::dart::R2Joint, const statespace::dart::R3Joint, const statespace::dart::R6Joint, const statespace::dart::SO2Joint, const statespace::dart::SO3Joint, const statespace::dart::SE2Joint, const statespace::dart::SE3Joint, const statespace::dart::WeldJoint &gt;</type>
      <name>JointStateSpaceTypeList</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a931597869e1142de8ce00b35caa5ca65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a6ad3c71edc735f9474e001fa02bb6953</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::RJoint&lt; N &gt;&gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>ae2668b7f8683f2191d437c747b9c2c32</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::SE2Joint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a61564c2adaa376f9de5aa40e6fc54f2d</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::WeldJoint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a98c5eb0198b89b9b80b5b6dd78c326ef</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ab31473e6fa2721102710788489cdc1fa</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a687b2d8e1fda1edac25215480b3a480a</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae92c5efe49c3a447e9dc6e8f3d9408b8</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d1/d95/statespace_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">aikido/common/metaprogramming.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">aikido/statespace/dart/WeldJoint.hpp</includes>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <namespace>aikido::statespace::dart::detail</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>Ptr</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ac5edd7cd9796d7a92e83134427897b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const ::dart::dynamics::BallJoint, const ::dart::dynamics::FreeJoint, const ::dart::dynamics::PlanarJoint, const ::dart::dynamics::PrismaticJoint, const ::dart::dynamics::RevoluteJoint, const ::dart::dynamics::TranslationalJoint, const ::dart::dynamics::WeldJoint &gt;</type>
      <name>ConstSupportedJoints</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ad0c36e19319b3799e605a8e187f2667f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpaceFor</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a3ef022436d4a8a4063c0661ec7605791</anchor>
      <arglist>(JointType *joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameDifferentiable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d9/d1f/FrameDifferentiable_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FrameDifferentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>FramePairDifferentiable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d0/d7c/FramePairDifferentiable_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FramePairDifferentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>FrameTestable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d3/df5/FrameTestable_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FrameTestable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsSampleable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d7/d9f/InverseKinematicsSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::InverseKinematicsSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d0/d33/constraint_2dart_2JointStateSpaceHelpers_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d3/d47/constraint_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp" name="JointStateSpaceHelpers-impl.hpp" local="yes" imported="no">detail/JointStateSpaceHelpers-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a98c5eb0198b89b9b80b5b6dd78c326ef</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a80d7da2dddecc8492014f86fe1fa3e59</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa2ec12dbefa689f2c43f41d50c7fa9e8</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ab31473e6fa2721102710788489cdc1fa</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aed23c46a69162a077d958a3f6d6279b7</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a1c29601dd5c748cedc1db10b86b4576c</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a687b2d8e1fda1edac25215480b3a480a</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>afa7b816855ab9c4426fe6a5327471329</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac58c90a2b3602c7a23b23b23239ac5b9</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae92c5efe49c3a447e9dc6e8f3d9408b8</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa61f54d709e7c0b7645a12179baf41f1</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a9d931e73e4a8c5cf627baf5d31b9a8bd</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d4/dc6/statespace_2dart_2JointStateSpaceHelpers_8hpp.html</filename>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d1/d95/statespace_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp" name="JointStateSpaceHelpers-impl.hpp" local="yes" imported="no">detail/JointStateSpaceHelpers-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpaceFor</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a3ef022436d4a8a4063c0661ec7605791</anchor>
      <arglist>(JointType *joint)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpace</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae89411503a43fe87a58f17a8b2780c24</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TSR.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>de/dfd/TSR_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <class kind="class">aikido::constraint::dart::TSR</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSR &gt;</type>
      <name>TSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa572847b6da671443d87e7624e6c95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSR &gt;</type>
      <name>ConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a923f80cf671fae0a3ba38755b83c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSR &gt;</type>
      <name>WeakTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a050763c953a69a2884a949ab97b1e1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSR &gt;</type>
      <name>WeakConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>abfc263235c9d09e77b0f08c90ca2d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSR &gt;</type>
      <name>UniqueTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae45921614745a52165c7c75f93cb705d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSR &gt;</type>
      <name>UniqueConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac29b63999d2f200ab823e07e9cb9c18c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DefaultTestableOutcome.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d1/d53/DefaultTestableOutcome_8hpp.html</filename>
    <includes id="d2/d1a/TestableOutcome_8hpp" name="TestableOutcome.hpp" local="yes" imported="no">aikido/constraint/TestableOutcome.hpp</includes>
    <class kind="class">aikido::constraint::DefaultTestableOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TestableOutcome-impl.hpp</name>
    <path>/include/aikido/constraint/detail/</path>
    <filename>d9/d4b/TestableOutcome-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="function">
      <type>Child *</type>
      <name>dynamic_cast_or_throw</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae4d6b7656f37d1bbb9bd5db8feaa5ad0</anchor>
      <arglist>(TestableOutcome *outcome)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Differentiable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d4/d6a/Differentiable_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Differentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Differentiable &gt;</type>
      <name>DifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1a12f838d0919548ebb34e4b5036cf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Differentiable &gt;</type>
      <name>ConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a42f96ef94d5b9500f69c87d923b0258c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Differentiable &gt;</type>
      <name>WeakDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a0f4439c33f232df8556f26b72692bc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Differentiable &gt;</type>
      <name>WeakConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab26ff2bfec99c0dc173bec479e0699b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>UniqueDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa7410953d2dbe0fa789c5a7b7a6be59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Differentiable &gt;</type>
      <name>UniqueConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab075f8029c906ba6d002d919da337bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintType</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a764bf6aa719f3f394e4ba1289489de4c</anchor>
      <arglist></arglist>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca2334c5c5672d3d347e758454046d7333">INEQUALITY</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>DifferentiableIntersection.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d6/d0c/DifferentiableIntersection_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::DifferentiableIntersection</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>DifferentiableSubspace.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d3/d00/DifferentiableSubspace_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::constraint::DifferentiableSubspace</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>FiniteSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d7/d0d/FiniteSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::FiniteSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>NewtonsMethodProjectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>dd/d34/NewtonsMethodProjectable_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <class kind="class">aikido::constraint::NewtonsMethodProjectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Projectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d4/d3d/Projectable_8hpp.html</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Projectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Projectable &gt;</type>
      <name>ProjectablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8b943907af16556b4a26c81e83560643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RejectionSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>da/d89/RejectionSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::RejectionSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Sampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d6/dcb/Sampleable_8hpp.html</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Sampleable</class>
    <class kind="class">aikido::constraint::SampleGenerator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Sampleable &gt;</type>
      <name>SampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>addcc44c3249e65b8d273f6a31e30c03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Sampleable &gt;</type>
      <name>ConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa1a59ca1b0d116d55490b4cfa5a80d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Sampleable &gt;</type>
      <name>WeakSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>abbdb6fc190a3ca31069d8d78f2555c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Sampleable &gt;</type>
      <name>WeakConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2aa43a5bd3d81d2771ce3aa1c0d3941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>UniqueSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a04d5d0cfc146c14b41c969d6db1e518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Sampleable &gt;</type>
      <name>UniqueConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae89393311886605be570538a90074ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Satisfied.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d3/d13/Satisfied_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <class kind="class">aikido::constraint::Satisfied</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>SequentialSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d4/d40/SequentialSampleable_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::SequentialSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Testable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d7/def/Testable_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d1/d53/DefaultTestableOutcome_8hpp" name="DefaultTestableOutcome.hpp" local="yes" imported="no">aikido/constraint/DefaultTestableOutcome.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Testable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Testable &gt;</type>
      <name>TestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa749fba91b58949a6c3bd41ae7f39cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Testable &gt;</type>
      <name>ConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2b1b74add33a65ce5994d0f07bdc86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Testable &gt;</type>
      <name>WeakTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a59afe2e627052475fe68a714f5541eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Testable &gt;</type>
      <name>WeakConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1994872c8daeefab2f7b256ed5c644c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>UniqueTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab117e9a807013f31028c0e13dd039e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Testable &gt;</type>
      <name>UniqueConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>af533d04a7259ede666cdbc7e3373eb90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableIntersection.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>de/da1/TestableIntersection_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <class kind="class">aikido::constraint::TestableIntersection</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestableIntersection &gt;</type>
      <name>TestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a353151b01c822c0f2751eb3e9e0f7cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TestableIntersection &gt;</type>
      <name>ConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a561ce16cd5dade636b256b32c09efb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TestableIntersection &gt;</type>
      <name>WeakTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8daee5f02e7e9bdbc24644699fbadd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TestableIntersection &gt;</type>
      <name>WeakConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ac0890d7d5647ec9499b1d5d432c0e5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TestableIntersection &gt;</type>
      <name>UniqueTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8a6d705f2a1bb6568bb8fe00bb1f0c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TestableIntersection &gt;</type>
      <name>UniqueConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a7a2cc6be5dda0fd4d4a8ecc4b0f3a04f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableOutcome.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d2/d1a/TestableOutcome_8hpp.html</filename>
    <includes id="d9/d4b/TestableOutcome-impl_8hpp" name="TestableOutcome-impl.hpp" local="yes" imported="no">detail/TestableOutcome-impl.hpp</includes>
    <class kind="class">aikido::constraint::TestableOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="function">
      <type>Child *</type>
      <name>dynamic_cast_or_throw</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae4d6b7656f37d1bbb9bd5db8feaa5ad0</anchor>
      <arglist>(TestableOutcome *outcome)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnBoxConstraint-impl.hpp</name>
    <path>/include/aikido/constraint/uniform/detail/</path>
    <filename>d6/df2/RnBoxConstraint-impl_8hpp.html</filename>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/RnBoxConstraint.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RnBoxConstraintSampleGenerator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>RnConstantSampler-impl.hpp</name>
    <path>/include/aikido/constraint/uniform/detail/</path>
    <filename>d7/d5a/RnConstantSampler-impl_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/RnConstantSampler.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>d7/d5a/RnConstantSampler-impl_8hpp.html</anchorfile>
      <anchor>a9e1ab0f20b52c709175d0fb07e25aaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mValue</name>
      <anchorfile>d7/d5a/RnConstantSampler-impl_8hpp.html</anchorfile>
      <anchor>a78ffe1b85a5dd2d0b7fba847c28b54ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnBoxConstraint.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d2/dae/RnBoxConstraint_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d6/df2/RnBoxConstraint-impl_8hpp" name="RnBoxConstraint-impl.hpp" local="yes" imported="no">aikido/constraint/uniform/detail/RnBoxConstraint-impl.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RBoxConstraint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 0 &gt;</type>
      <name>R0BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a74032c1d1178f4ea82048f8fd836ea4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 1 &gt;</type>
      <name>R1BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>aadfe7b44198259068917c68b5f6fea75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 2 &gt;</type>
      <name>R2BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afcaa3818f8d20494fcf01831387ef3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 3 &gt;</type>
      <name>R3BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a51c8f4d5b54f9e62c27392f7257d9163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 6 &gt;</type>
      <name>R6BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a78a0dfe4176e2c9ac1ecf20d14cec6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; Eigen::Dynamic &gt;</type>
      <name>RnBoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a612fb574a8d316320865a9f0cde66a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnConstantSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d3/d06/RnConstantSampler_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d7/d5a/RnConstantSampler-impl_8hpp" name="RnConstantSampler-impl.hpp" local="yes" imported="no">aikido/constraint/uniform/detail/RnConstantSampler-impl.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RConstantSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="typedef">
      <type>RConstantSampler&lt; 0 &gt;</type>
      <name>R0ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a7d4666e1982865003824e4f0913f3438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 1 &gt;</type>
      <name>R1ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a6466649294e62304a68331de6b162029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 2 &gt;</type>
      <name>R2ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>ae82ef22f973a9f69c34d3175d4688058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 3 &gt;</type>
      <name>R3ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a30a8a6c822c0a4cdf194f5a36260dd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 6 &gt;</type>
      <name>R6ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a1a99697ca5449aa670f31b1395ee7905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; Eigen::Dynamic &gt;</type>
      <name>RnConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afe45e1c61b9184dd8e55bb8244f85c25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2BoxConstraint.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d5/d89/SE2BoxConstraint_8hpp.html</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SE2BoxConstraint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>SO2UniformSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>df/d19/SO2UniformSampler_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SO2UniformSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>SO3UniformSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>dc/d57/SO3UniformSampler_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SO3UniformSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>control.hpp</name>
    <path>/include/aikido/</path>
    <filename>dc/dfd/control_8hpp.html</filename>
    <includes id="d3/d02/InstantaneousTrajectoryExecutor_8hpp" name="InstantaneousTrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/InstantaneousTrajectoryExecutor.hpp</includes>
    <includes id="db/d19/KinematicSimulationTrajectoryExecutor_8hpp" name="KinematicSimulationTrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/KinematicSimulationTrajectoryExecutor.hpp</includes>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <includes id="d7/d37/QueuedTrajectoryExecutor_8hpp" name="QueuedTrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/QueuedTrajectoryExecutor.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="de/def/TrajectoryResult_8hpp" name="TrajectoryResult.hpp" local="yes" imported="no">aikido/control/TrajectoryResult.hpp</includes>
    <includes id="d3/ddf/TrajectoryRunningException_8hpp" name="TrajectoryRunningException.hpp" local="yes" imported="no">aikido/control/TrajectoryRunningException.hpp</includes>
    <includes id="df/d54/Conversions_8hpp" name="Conversions.hpp" local="yes" imported="no">aikido/control/ros/Conversions.hpp</includes>
    <includes id="d3/d43/RosJointStateClient_8hpp" name="RosJointStateClient.hpp" local="yes" imported="no">aikido/control/ros/RosJointStateClient.hpp</includes>
    <includes id="da/daa/RosPositionCommandExecutor_8hpp" name="RosPositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/ros/RosPositionCommandExecutor.hpp</includes>
    <includes id="df/da4/RosTrajectoryExecutionException_8hpp" name="RosTrajectoryExecutionException.hpp" local="yes" imported="no">aikido/control/ros/RosTrajectoryExecutionException.hpp</includes>
    <includes id="d0/df8/RosTrajectoryExecutor_8hpp" name="RosTrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/ros/RosTrajectoryExecutor.hpp</includes>
    <includes id="d8/ddd/control_2ros_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/control/ros/util.hpp</includes>
  </compound>
  <compound kind="file">
    <name>InstantaneousTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d3/d02/InstantaneousTrajectoryExecutor_8hpp.html</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::InstantaneousTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicSimulationTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>db/d19/KinematicSimulationTrajectoryExecutor_8hpp.html</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::KinematicSimulationTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>PositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d8/dd0/PositionCommandExecutor_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::control::PositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>PositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a88d847e44672c3db371d8507f6a69599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>ConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8fcca9aa9bb24048a3a95cecc821afc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>WeakPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6555b6acf0a36aa8fdda6d7fb9c81af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>WeakConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a67a1c05b63331eb86ec434e27fb66c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>UniquePositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a526e3e5f3195b3c6372506a22c6b4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>UniqueConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a107dce219a6fb867cc66636fa85ba248</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QueuedTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d7/d37/QueuedTrajectoryExecutor_8hpp.html</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <class kind="class">aikido::control::QueuedTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>Conversions.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>df/d54/Conversions_8hpp.html</filename>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a9c51274415d446d79fa29f9c2586a808</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a582c2ddfe540b4fafe70fe4567f3b51e</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory, const Eigen::VectorXd &amp;startPositions)</arglist>
    </member>
    <member kind="function">
      <type>trajectory_msgs::JointTrajectory</type>
      <name>toRosJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>ad92d30c0e867da8db19d63269858a70d</anchor>
      <arglist>(const aikido::trajectory::ConstTrajectoryPtr &amp;trajectory, double timestep)</arglist>
    </member>
    <member kind="function">
      <type>sensor_msgs::JointState</type>
      <name>positionsToJointState</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>adafd2730688b1c49c8f2adc9ddd0b098</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions, const std::vector&lt; std::string &gt; &amp;jointNames)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util-impl.hpp</name>
    <path>/include/aikido/control/ros/detail/</path>
    <filename>dc/d76/util-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
    <member kind="function">
      <type>bool</type>
      <name>waitForActionServer</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>aebda2bf259c10aec7822e78f77760e5d</anchor>
      <arglist>(actionlib::ActionClient&lt; ActionSpec &gt; &amp;actionClient, ::ros::CallbackQueue &amp;callbackQueue, TimeoutDuration timeoutDuration, PeriodDuration periodDuration)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RosJointStateClient.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d3/d43/RosJointStateClient_8hpp.html</filename>
    <class kind="class">aikido::control::ros::RosJointStateClient</class>
    <class kind="struct">aikido::control::ros::RosJointStateClient::JointStateRecord</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosPositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>da/daa/RosPositionCommandExecutor_8hpp.html</filename>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <class kind="class">aikido::control::ros::RosPositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosTrajectoryExecutionException.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>df/da4/RosTrajectoryExecutionException_8hpp.html</filename>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutionException</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d0/df8/RosTrajectoryExecutor_8hpp.html</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d8/ddd/control_2ros_2util_8hpp.html</filename>
    <includes id="dc/d76/util-impl_8hpp" name="util-impl.hpp" local="yes" imported="no">detail/util-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
    <member kind="function">
      <type>bool</type>
      <name>waitForActionServer</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>aebda2bf259c10aec7822e78f77760e5d</anchor>
      <arglist>(actionlib::ActionClient&lt; ActionSpec &gt; &amp;actionClient, ::ros::CallbackQueue &amp;callbackQueue, TimeoutDuration timeoutDuration, PeriodDuration periodDuration)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d9/d7d/io_2util_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>loadSkeletonFromURDF</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>ab618ef0fa435ec15374a8999c8f6dd15</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;retriever, const dart::common::Uri &amp;uri, const Eigen::Isometry3d &amp;transform=Eigen::Isometry3d::Identity())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>de/d89/planner_2dart_2util_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
    <namespace>aikido::planner::dart::util</namespace>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getEndEffectorDirection</name>
      <anchorfile>de/d41/namespaceaikido_1_1planner_1_1dart_1_1util.html</anchorfile>
      <anchor>a90bed6b7e3daec63f21d6e2f99d85072</anchor>
      <arglist>(const ::dart::dynamics::ConstBodyNodePtr &amp;body)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d4/dad/robot_2util_8hpp.html</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="de/d08/ConfigurationRanker_8hpp" name="ConfigurationRanker.hpp" local="yes" imported="no">aikido/distance/ConfigurationRanker.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="struct">aikido::robot::util::VectorFieldPlannerParameters</class>
    <class kind="struct">aikido::robot::util::CRRTPlannerParameters</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <namespace>aikido::robot::util</namespace>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a8095a82f4daaaeaf97863445d6ea099c</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const statespace::StateSpace::State *goalState, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ae880ed4503f2d0b16e5326fa0f016b04</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; statespace::StateSpace::State * &gt; &amp;goalStates, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToTSR</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a2d55fc94b44f771817bbd2b521b6871f</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;tsr, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit, std::size_t maxNumTrials, const distance::ConstConfigurationRankerPtr &amp;ranker=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a7748aabfa71d6f1ec11da53acb5bfde2</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;goalTsr, const constraint::dart::TSRPtr &amp;constraintTsr, const constraint::TestablePtr &amp;collisionTestable, double timelimit, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a58ca33cdc0383f6062887d79d796c267</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const Eigen::Vector3d &amp;direction, const constraint::TestablePtr &amp;collisionTestable, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const VectorFieldPlannerParameters &amp;vfParameters=VectorFieldPlannerParameters(), const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToEndEffectorOffsetByCRRT</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a78b24f5bd36e678d1c22942dae4b9cc7</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::TestablePtr &amp;collisionTestable, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>parseYAMLToNamedConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aa2e3f025f76403db20b6c29b3078340e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGoalAndConstraintTSRForEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a1e095c9730f6bda4109732401ce57674</anchor>
      <arglist>(const dart::dynamics::BodyNodePtr &amp;bodyNode, const Eigen::Vector3d &amp;direction, double distance, const constraint::dart::TSRPtr &amp;goal, const constraint::dart::TSRPtr &amp;constraint, double positionTolerance=1e-3, double angularTolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getLookAtIsometry</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aaa61f9f714f3bc0ad001568ca7e41f9e</anchor>
      <arglist>(const Eigen::Vector3d &amp;positionFrom, const Eigen::Vector3d &amp;positionTo)</arglist>
    </member>
    <member kind="function">
      <type>const dart::dynamics::BodyNode *</type>
      <name>getBodyNodeOrThrow</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a6cbde6bb054438f0501e4cf9c3e167d6</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;skeleton, const std::string &amp;bodyNodeName)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getBodyNodeOrThrow</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a4417ad7b9f044c1cd61c4e5fb7eaa40e</anchor>
      <arglist>(dart::dynamics::MetaSkeleton &amp;skeleton, const std::string &amp;bodyNodeName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>dc/d65/trajectory_2util_8hpp.html</filename>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="function">
      <type>UniqueSplinePtr</type>
      <name>convertToSpline</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af299005792c264b9ff35b1cd8bf0539d</anchor>
      <arglist>(const Interpolated &amp;inputTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>UniqueInterpolatedPtr</type>
      <name>concatenate</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a21b989a57c98b2dfb3caabf0b101fc1d</anchor>
      <arglist>(const Interpolated &amp;traj1, const Interpolated &amp;traj2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findTimeOfClosestStateOnTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a9086267fe55b7de8ffd1241d37e543b7</anchor>
      <arglist>(const Trajectory &amp;traj, const statespace::StateSpace::State *referenceState, double &amp;distance, double timeStep=0.01)</arglist>
    </member>
    <member kind="function">
      <type>UniqueSplinePtr</type>
      <name>createPartialTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afc674b3f17ecb06db7877b740414c822</anchor>
      <arglist>(const Spline &amp;traj, double partialStartTime)</arglist>
    </member>
    <member kind="function">
      <type>UniqueInterpolatedPtr</type>
      <name>toR1JointTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa7257e76b31a126a7436f1c9ba84cd62</anchor>
      <arglist>(const Interpolated &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d6/d6e/TrajectoryExecutor_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::TrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>TrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6cd6ce65058e69bbb77911fdbb13bca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>ConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a60109b41f290e36c59d8d609bb384ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>WeakTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af37f4572e010e770b185b52b2bdbbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>WeakConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aff1a075c0818cd34033494dd05c08583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>UniqueTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8982dfe576a145810192301598dc9319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>UniqueConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af44c2673d069625938196c5d1efdb2f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryResult.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>de/def/TrajectoryResult_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::control::TrajectoryResult</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryResult &gt;</type>
      <name>TrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1908080933ac626b49500769167b431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryResult &gt;</type>
      <name>ConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ad76541d345e94209212a677ae58e73aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryResult &gt;</type>
      <name>WeakTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9910229097d6c47680558ac665ac778a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryResult &gt;</type>
      <name>WeakConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8a7c3f720d4bd9fe680338bff028f967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryResult &gt;</type>
      <name>UniqueTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a54b618752dd91f3077a442e6b3aa897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryResult &gt;</type>
      <name>UniqueConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1eecbc5b44e957430f5bfb212c723618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryRunningException.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d3/ddf/TrajectoryRunningException_8hpp.html</filename>
    <class kind="class">aikido::control::TrajectoryRunningException</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>distance.hpp</name>
    <path>/include/aikido/</path>
    <filename>d0/d30/distance_8hpp.html</filename>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">aikido/distance/CartesianProductWeighted.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="yes" imported="no">aikido/distance/RnEuclidean.hpp</includes>
    <includes id="df/da8/distance_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/distance/SE2.hpp</includes>
    <includes id="d0/df7/SE2Weighted_8hpp" name="SE2Weighted.hpp" local="yes" imported="no">aikido/distance/SE2Weighted.hpp</includes>
    <includes id="df/d04/SO2Angular_8hpp" name="SO2Angular.hpp" local="yes" imported="no">aikido/distance/SO2Angular.hpp</includes>
    <includes id="d8/dfb/SO3Angular_8hpp" name="SO3Angular.hpp" local="yes" imported="no">aikido/distance/SO3Angular.hpp</includes>
    <includes id="df/dd3/Weighted_8hpp" name="Weighted.hpp" local="yes" imported="no">aikido/distance/Weighted.hpp</includes>
    <includes id="d4/d2d/defaults_8hpp" name="defaults.hpp" local="yes" imported="no">aikido/distance/defaults.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CartesianProductWeighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>de/d4f/CartesianProductWeighted_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::distance::CartesianProductWeighted</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationRanker.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>de/d08/ConfigurationRanker_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d4/d2d/defaults_8hpp" name="defaults.hpp" local="yes" imported="no">aikido/distance/defaults.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::distance::ConfigurationRanker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConfigurationRanker &gt;</type>
      <name>ConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6b4d9fe42b1d80fd6300d1e2283e93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>ConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a460dd86eb288fa3c521b1cf8d6f3ecb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConfigurationRanker &gt;</type>
      <name>WeakConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a202b3473e1312d455044f54ada758e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>WeakConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ac21943fef915c71408f3685906de7539</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConfigurationRanker &gt;</type>
      <name>UniqueConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a021a9f39f24d870ace8bff23b2619058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>UniqueConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ac5ead46347264caa8596fc0e72e52c67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaults.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d4/d2d/defaults_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="de/d6e/defaults-impl_8hpp" name="defaults-impl.hpp" local="yes" imported="no">detail/defaults-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetricFor</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae3bec5c04d96f08fd3f054d861d55a58</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _sspace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetric</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a17c4e8e403190b7bdc484c6976ac6094</anchor>
      <arglist>(statespace::ConstStateSpacePtr _sspace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaults-impl.hpp</name>
    <path>/include/aikido/distance/detail/</path>
    <filename>de/d6e/defaults-impl_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">aikido/common/metaprogramming.hpp</includes>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">aikido/distance/CartesianProductWeighted.hpp</includes>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="yes" imported="no">aikido/distance/RnEuclidean.hpp</includes>
    <includes id="d0/df7/SE2Weighted_8hpp" name="SE2Weighted.hpp" local="yes" imported="no">aikido/distance/SE2Weighted.hpp</includes>
    <includes id="df/d04/SO2Angular_8hpp" name="SO2Angular.hpp" local="yes" imported="no">aikido/distance/SO2Angular.hpp</includes>
    <includes id="d8/dfb/SO3Angular_8hpp" name="SO3Angular.hpp" local="yes" imported="no">aikido/distance/SO3Angular.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R0 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R1 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R6 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::CartesianProduct &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SE2 &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <namespace>aikido::distance::detail</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>Ptr</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a3b8952d56389bb3863b188867e162583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const statespace::CartesianProduct, const statespace::R0, const statespace::R1, const statespace::R2, const statespace::R3, const statespace::R6, const statespace::SO2, const statespace::SO3, const statespace::SE2 &gt;</type>
      <name>SupportedStateSpaces</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a8d570846dd4a1285e3203e87feb58308</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetricFor</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae3bec5c04d96f08fd3f054d861d55a58</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnEuclidean-impl.hpp</name>
    <path>/include/aikido/distance/detail/</path>
    <filename>dd/d46/RnEuclidean-impl_8hpp.html</filename>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="yes" imported="no">aikido/distance/RnEuclidean.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceMetric.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>dc/d81/DistanceMetric_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::distance::DistanceMetric</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DistanceMetric &gt;</type>
      <name>DistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aaf63ec63b18e6e5e472c50bfd9531c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const DistanceMetric &gt;</type>
      <name>ConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a641469ad5d19138970617763e196c3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; DistanceMetric &gt;</type>
      <name>WeakDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a68af1916eae84a82cf5222dc04c3b46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const DistanceMetric &gt;</type>
      <name>WeakConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a2cee8bcb64505e74a51cbe850bd81336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>UniqueDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad45bd005a5a117fc225afc0ae480450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const DistanceMetric &gt;</type>
      <name>UniqueConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a7a03ac8528cfc5c774c6ccb1b28eb6ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointAvoidanceConfigurationRanker.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d5/d37/JointAvoidanceConfigurationRanker_8hpp.html</filename>
    <includes id="de/d08/ConfigurationRanker_8hpp" name="ConfigurationRanker.hpp" local="yes" imported="no">aikido/distance/ConfigurationRanker.hpp</includes>
    <class kind="class">aikido::distance::JointAvoidanceConfigurationRanker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>NominalConfigurationRanker.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>da/d4a/NominalConfigurationRanker_8hpp.html</filename>
    <includes id="de/d08/ConfigurationRanker_8hpp" name="ConfigurationRanker.hpp" local="yes" imported="no">aikido/distance/ConfigurationRanker.hpp</includes>
    <class kind="class">aikido::distance::NominalConfigurationRanker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>NominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aa049bb73c9ab0a26e1248629c2cfda6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>ConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>abc080b658dd2d91a824ec6e9c7f56394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>WeakNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ab01eec371fb42a99c088e81c0a88bb60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>WeakConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aae2da694edbef7c3085487e839724a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>UniqueNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a07420b42f7ad84921aae576626edf166</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>UniqueConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aa8f1d2b278a6d1437b52c937b6967f1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnEuclidean.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/ddc/RnEuclidean_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="dd/d46/RnEuclidean-impl_8hpp" name="RnEuclidean-impl.hpp" local="yes" imported="no">aikido/distance/detail/RnEuclidean-impl.hpp</includes>
    <class kind="class">aikido::distance::REuclidean</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>REuclidean&lt; 0 &gt;</type>
      <name>R0Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a50543f9d5f6a65d32a0b9d493a460acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 1 &gt;</type>
      <name>R1Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a667d3fadad12dfacbee30d36a3a88721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 2 &gt;</type>
      <name>R2Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6903891de6aaaac9b338421b21589f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 3 &gt;</type>
      <name>R3Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a0854bb5f71af46c24b5e5e7301cfc359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 6 &gt;</type>
      <name>R6Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae57f5e9a8e4a7abc73ca19821a51c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; Eigen::Dynamic &gt;</type>
      <name>RnEuclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a1fdca133d62fc1fd8e40918a96c52162</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/da8/distance_2SE2_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <class kind="class">aikido::distance::SE2</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SE2.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d4/d96/statespace_2SE2_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="dd/da5/SE2-impl_8hpp" name="SE2-impl.hpp" local="yes" imported="no">detail/SE2-impl.hpp</includes>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <class kind="class">aikido::statespace::SE2</class>
    <class kind="class">aikido::statespace::SE2::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE2Weighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d0/df7/SE2Weighted_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <class kind="class">aikido::distance::SE2Weighted</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SO2Angular.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/d04/SO2Angular_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <class kind="class">aikido::distance::SO2Angular</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SO3Angular.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d8/dfb/SO3Angular_8hpp.html</filename>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <class kind="class">aikido::distance::SO3Angular</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>Weighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/dd3/Weighted_8hpp.html</filename>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">aikido/distance/CartesianProductWeighted.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>CartesianProductWeighted</type>
      <name>Weighted</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a4fda8871126805b629f5427794860cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io.hpp</name>
    <path>/include/aikido/</path>
    <filename>d2/dc6/io_8hpp.html</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="yes" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d6/d70/KinBodyParser_8hpp" name="KinBodyParser.hpp" local="yes" imported="no">aikido/io/KinBodyParser.hpp</includes>
    <includes id="db/df6/io_2trajectory_8hpp" name="trajectory.hpp" local="yes" imported="no">aikido/io/trajectory.hpp</includes>
    <includes id="d9/d7d/io_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/io/util.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CatkinResourceRetriever.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d8/d57/CatkinResourceRetriever_8hpp.html</filename>
    <class kind="class">aikido::io::CatkinResourceRetriever</class>
    <class kind="struct">aikido::io::CatkinResourceRetriever::Workspace</class>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
  </compound>
  <compound kind="file">
    <name>yaml_extension.hpp</name>
    <path>/include/aikido/io/detail/</path>
    <filename>d6/d38/yaml__extension_8hpp.html</filename>
    <includes id="da/d3e/memory_8hpp" name="memory.hpp" local="yes" imported="no">aikido/common/memory.hpp</includes>
    <class kind="struct">aikido::io::detail::encode_impl</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <namespace>aikido::io::detail</namespace>
    <namespace>YAML</namespace>
    <member kind="function">
      <type>YAML::Mark</type>
      <name>getMark</name>
      <anchorfile>da/d43/namespaceaikido_1_1io_1_1detail.html</anchorfile>
      <anchor>a01bc4ac464aec57ed9b598c6befcabae</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KinBodyParser.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d6/d70/KinBodyParser_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbodyString</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a0ab91fa623ddbba8b9bb4a2150380395</anchor>
      <arglist>(const std::string &amp;kinBodyString, const dart::common::Uri &amp;baseUri=&quot;&quot;, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbody</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a9c32779712b779d369942ebdee37cfc6</anchor>
      <arglist>(const dart::common::Uri &amp;kinBodyUri, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>db/df6/io_2trajectory_8hpp.html</filename>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>void</type>
      <name>saveTrajectory</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a2a1cd91050198df8268f238163a6b3c1</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;trajectory, const std::string &amp;savePath)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueSplinePtr</type>
      <name>loadSplineTrajectory</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a2aa1e0788db609a2e35b26fa98cc6da1</anchor>
      <arglist>(const std::string &amp;trajPath, const aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;metaSkeletonStateSpace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory.hpp</name>
    <path>/include/aikido/</path>
    <filename>d5/d07/trajectory_8hpp.html</filename>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
  </compound>
  <compound kind="file">
    <name>yaml.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d5/d95/yaml_8hpp.html</filename>
    <includes id="d6/d38/yaml__extension_8hpp" name="yaml_extension.hpp" local="yes" imported="no">aikido/io/detail/yaml_extension.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>YAML::Node</type>
      <name>loadYAML</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a4da7c052f494bd2dfe1f903d87ca3ce5</anchor>
      <arglist>(const dart::common::Uri &amp;yamlUri, const dart::common::ResourceRetrieverPtr &amp;retriever)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>perception.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/dd9/perception_8hpp.html</filename>
    <includes id="de/d84/AssetDatabase_8hpp" name="AssetDatabase.hpp" local="yes" imported="no">aikido/perception/AssetDatabase.hpp</includes>
    <includes id="da/d6f/DetectedObject_8hpp" name="DetectedObject.hpp" local="yes" imported="no">aikido/perception/DetectedObject.hpp</includes>
    <includes id="de/da8/PerceptionModule_8hpp" name="PerceptionModule.hpp" local="yes" imported="no">aikido/perception/PerceptionModule.hpp</includes>
    <includes id="d7/d69/PoseEstimatorModule_8hpp" name="PoseEstimatorModule.hpp" local="yes" imported="no">aikido/perception/PoseEstimatorModule.hpp</includes>
    <includes id="dc/d5c/VoxelGridModule_8hpp" name="VoxelGridModule.hpp" local="yes" imported="no">aikido/perception/VoxelGridModule.hpp</includes>
    <includes id="d7/d84/perception_2shape__conversions_8hpp" name="shape_conversions.hpp" local="yes" imported="no">aikido/perception/shape_conversions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AssetDatabase.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>de/d84/AssetDatabase_8hpp.html</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="yes" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <class kind="class">aikido::perception::AssetDatabase</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>DetectedObject-impl.hpp</name>
    <path>/include/aikido/perception/detail/</path>
    <filename>dc/d36/DetectedObject-impl_8hpp.html</filename>
    <includes id="da/d6f/DetectedObject_8hpp" name="DetectedObject.hpp" local="yes" imported="no">aikido/perception/DetectedObject.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>DetectedObject.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>da/d6f/DetectedObject_8hpp.html</filename>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="dc/d36/DetectedObject-impl_8hpp" name="DetectedObject-impl.hpp" local="yes" imported="no">aikido/perception/detail/DetectedObject-impl.hpp</includes>
    <class kind="class">aikido::perception::DetectedObject</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>PerceptionModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>de/da8/PerceptionModule_8hpp.html</filename>
    <includes id="da/d6f/DetectedObject_8hpp" name="DetectedObject.hpp" local="yes" imported="no">aikido/perception/DetectedObject.hpp</includes>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">aikido/planner/World.hpp</includes>
    <class kind="class">aikido::perception::PerceptionModule</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>PoseEstimatorModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d7/d69/PoseEstimatorModule_8hpp.html</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="yes" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="de/d84/AssetDatabase_8hpp" name="AssetDatabase.hpp" local="yes" imported="no">aikido/perception/AssetDatabase.hpp</includes>
    <includes id="da/d6f/DetectedObject_8hpp" name="DetectedObject.hpp" local="yes" imported="no">aikido/perception/DetectedObject.hpp</includes>
    <includes id="de/da8/PerceptionModule_8hpp" name="PerceptionModule.hpp" local="yes" imported="no">aikido/perception/PerceptionModule.hpp</includes>
    <class kind="class">aikido::perception::PoseEstimatorModule</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>shape_conversions.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d7/d84/perception_2shape__conversions_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertROSPoseToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>a4abba5aae2ec071b71cec21a43f34a52</anchor>
      <arglist>(const geometry_msgs::Pose &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertStampedTransformToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ace20fe20942bdbce03c984efd7a49001</anchor>
      <arglist>(const tf::StampedTransform &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shape_conversions.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/db0/rviz_2shape__conversions_8hpp.html</filename>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">aikido/rviz/ResourceServer.hpp</includes>
    <namespace>dart</namespace>
    <namespace>dart::dynamics</namespace>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>convertEigenToROSPoint</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a68d60ee0ed5b2ff23a267682703a22bf</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>convertEigenToROSVector3</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a8a0437e24546ebf8dce5a6fb7ff5551a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>convertEigenToROSQuaternion</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a804574a4b82443989184e879d563d48c</anchor>
      <arglist>(const Eigen::Quaterniond &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>convertEigenToROSPose</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afa63ee8d6fb65d4fea1c4f667e8de533</anchor>
      <arglist>(const Eigen::Isometry3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std_msgs::ColorRGBA</type>
      <name>convertEigenToROSColorRGBA</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6108bf053834b682698956b03d98943b</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>convertROSColorRGBAToEigen</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a974f133392c086992f9cc90bde90d273</anchor>
      <arglist>(const std_msgs::ColorRGBA &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertAssimpMeshToROSTriangleList</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>acaca6e3485a0418b4a18001c5197ae30</anchor>
      <arglist>(const aiMesh &amp;mesh, std::vector&lt; geometry_msgs::Point &gt; *triangle_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3d9fc2131aba5a272fd7846802906695</anchor>
      <arglist>(const dart::dynamics::Shape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3270c5fb93d7d80d2ac4d67e010f1baa</anchor>
      <arglist>(const dart::dynamics::BoxShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a84ab12d490fdb1bd1780569f71ac6eb9</anchor>
      <arglist>(const dart::dynamics::CylinderShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae2f3076e02e73fc14fa795f072c79da1</anchor>
      <arglist>(const dart::dynamics::EllipsoidShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a03f4480210c9fad6a22086df6f0fe8ba</anchor>
      <arglist>(const dart::dynamics::LineSegmentShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aad67b7fedb6ac6987931138c0457e7b1</anchor>
      <arglist>(const dart::dynamics::MeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a9678121bbcd9c4211ac3bd3717479cce</anchor>
      <arglist>(const dart::dynamics::PlaneShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager, double width=100.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1b99f62c6870b0b7a2f3f70bc133c18f</anchor>
      <arglist>(const dart::dynamics::SoftMeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VoxelGridModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>dc/d5c/VoxelGridModule_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>planner.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/d1f/planner_8hpp.html</filename>
    <includes id="d4/da7/PlanningResult_8hpp" name="PlanningResult.hpp" local="yes" imported="no">aikido/planner/PlanningResult.hpp</includes>
    <includes id="df/d36/SnapPlanner_8hpp" name="SnapPlanner.hpp" local="yes" imported="no">aikido/planner/SnapPlanner.hpp</includes>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">aikido/planner/World.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d0/d94/CRRT_8hpp" name="CRRT.hpp" local="yes" imported="no">aikido/planner/ompl/CRRT.hpp</includes>
    <includes id="d6/db7/CRRTConnect_8hpp" name="CRRTConnect.hpp" local="yes" imported="no">aikido/planner/ompl/CRRTConnect.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">aikido/planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="dd/d13/GoalRegion_8hpp" name="GoalRegion.hpp" local="yes" imported="no">aikido/planner/ompl/GoalRegion.hpp</includes>
    <includes id="dc/da4/MotionValidator_8hpp" name="MotionValidator.hpp" local="yes" imported="no">aikido/planner/ompl/MotionValidator.hpp</includes>
    <includes id="dc/d8d/ompl_2Planner_8hpp" name="Planner.hpp" local="yes" imported="no">aikido/planner/ompl/Planner.hpp</includes>
    <includes id="d5/d58/StateSampler_8hpp" name="StateSampler.hpp" local="yes" imported="no">aikido/planner/ompl/StateSampler.hpp</includes>
    <includes id="d2/d67/StateValidityChecker_8hpp" name="StateValidityChecker.hpp" local="yes" imported="no">aikido/planner/ompl/StateValidityChecker.hpp</includes>
    <includes id="db/d58/dart_8hpp" name="dart.hpp" local="yes" imported="no">aikido/planner/ompl/dart.hpp</includes>
    <includes id="db/d4c/ParabolicSmoother_8hpp" name="ParabolicSmoother.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicSmoother.hpp</includes>
    <includes id="df/dce/ParabolicTimer_8hpp" name="ParabolicTimer.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicTimer.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CompositePlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d2/d39/CompositePlanner_8hpp.html</filename>
    <includes id="d4/d09/Planner_8hpp" name="Planner.hpp" local="yes" imported="no">aikido/planner/Planner.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::CompositePlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CompositePlanner &gt;</type>
      <name>CompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa5dfa4a276b9aaafbe9aeb39721f4e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CompositePlanner &gt;</type>
      <name>ConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a6f17b38ece03b32ce99b2df2f66e0bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CompositePlanner &gt;</type>
      <name>WeakCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aaae785f364559223c82fc0db988f4902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CompositePlanner &gt;</type>
      <name>WeakConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa7de44c064b7a690827242b350904094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CompositePlanner &gt;</type>
      <name>UniqueCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0b49672ca785330d1f38e363b433eaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CompositePlanner &gt;</type>
      <name>UniqueConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>af271b892dbc9c27f7e30691e9ed9d5e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfiguration.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d3/da0/ConfigurationToConfiguration_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <class kind="class">aikido::planner::ConfigurationToConfiguration</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfiguration.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>db/d9e/dart_2ConfigurationToConfiguration_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfigurationPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>de/de3/ConfigurationToConfigurationPlanner_8hpp.html</filename>
    <includes id="d3/da0/ConfigurationToConfiguration_8hpp" name="ConfigurationToConfiguration.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfiguration.hpp</includes>
    <includes id="df/d3e/SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/SingleProblemPlanner.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::ConfigurationToConfigurationPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfigurationPlanner.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>de/d27/dart_2ConfigurationToConfigurationPlanner_8hpp.html</filename>
    <includes id="db/d9e/dart_2ConfigurationToConfiguration_8hpp" name="ConfigurationToConfiguration.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToConfiguration.hpp</includes>
    <includes id="d3/da1/dart_2SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/dart/SingleProblemPlanner.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToConfigurationPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfigurations.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d5/d41/ConfigurationToConfigurations_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">aikido/statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::ConfigurationToConfigurations</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfiguration_to_ConfigurationToConfiguration.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d7/d7f/ConfigurationToConfiguration__to__ConfigurationToConfiguration_8hpp.html</filename>
    <includes id="de/de3/ConfigurationToConfigurationPlanner_8hpp" name="ConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfigurationPlanner.hpp</includes>
    <includes id="de/d27/dart_2ConfigurationToConfigurationPlanner_8hpp" name="ConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToConfigurationPlanner.hpp</includes>
    <includes id="d7/d49/PlannerAdapter_8hpp" name="PlannerAdapter.hpp" local="yes" imported="no">aikido/planner/dart/PlannerAdapter.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToConfiguration</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToConfiguration_to_ConfigurationToTSR.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d8/da6/ConfigurationToConfiguration__to__ConfigurationToTSR_8hpp.html</filename>
    <includes id="de/de3/ConfigurationToConfigurationPlanner_8hpp" name="ConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfigurationPlanner.hpp</includes>
    <includes id="da/da7/ConfigurationToTSRPlanner_8hpp" name="ConfigurationToTSRPlanner.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToTSRPlanner.hpp</includes>
    <includes id="d7/d49/PlannerAdapter_8hpp" name="PlannerAdapter.hpp" local="yes" imported="no">aikido/planner/dart/PlannerAdapter.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToTSR</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToEndEffectorOffset.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d1/db4/ConfigurationToEndEffectorOffset_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorOffset</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToEndEffectorOffsetPlanner.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>dd/d17/ConfigurationToEndEffectorOffsetPlanner_8hpp.html</filename>
    <includes id="d1/db4/ConfigurationToEndEffectorOffset_8hpp" name="ConfigurationToEndEffectorOffset.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToEndEffectorOffset.hpp</includes>
    <includes id="d3/da1/dart_2SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/dart/SingleProblemPlanner.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorOffsetPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToEndEffectorPose.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d0/d75/ConfigurationToEndEffectorPose_8hpp.html</filename>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorPose</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToTSR.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d4/d5c/ConfigurationToTSR_8hpp.html</filename>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToTSR</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>ConfigurationToTSRPlanner.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>da/da7/ConfigurationToTSRPlanner_8hpp.html</filename>
    <includes id="de/d08/ConfigurationRanker_8hpp" name="ConfigurationRanker.hpp" local="yes" imported="no">aikido/distance/ConfigurationRanker.hpp</includes>
    <includes id="d4/d5c/ConfigurationToTSR_8hpp" name="ConfigurationToTSR.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToTSR.hpp</includes>
    <includes id="d3/da1/dart_2SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/dart/SingleProblemPlanner.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::dart::ConfigurationToTSRPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>PlannerAdapter-impl.hpp</name>
    <path>/include/aikido/planner/dart/detail/</path>
    <filename>db/d70/PlannerAdapter-impl_8hpp.html</filename>
    <includes id="d7/d49/PlannerAdapter_8hpp" name="PlannerAdapter.hpp" local="yes" imported="no">aikido/planner/dart/PlannerAdapter.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SingleProblemPlanner-impl.hpp</name>
    <path>/include/aikido/planner/dart/detail/</path>
    <filename>da/dca/dart_2detail_2SingleProblemPlanner-impl_8hpp.html</filename>
    <includes id="d3/da1/dart_2SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/dart/SingleProblemPlanner.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SingleProblemPlanner-impl.hpp</name>
    <path>/include/aikido/planner/detail/</path>
    <filename>d4/dcb/detail_2SingleProblemPlanner-impl_8hpp.html</filename>
    <includes id="df/d3e/SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/SingleProblemPlanner.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>PlannerAdapter.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d7/d49/PlannerAdapter_8hpp.html</filename>
    <includes id="db/d70/PlannerAdapter-impl_8hpp" name="PlannerAdapter-impl.hpp" local="yes" imported="no">aikido/planner/dart/detail/PlannerAdapter-impl.hpp</includes>
    <class kind="class">aikido::planner::dart::PlannerAdapter</class>
    <class kind="class">aikido::planner::dart::PlannerAdapter&lt; DelegatePlanner, TargetPlanner, typename std::enable_if&lt; std::is_base_of&lt; dart::SingleProblemPlanner&lt; DelegatePlanner, typename DelegatePlanner::SolvableProblem &gt;, DelegatePlanner &gt;::value &gt;::type &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SingleProblemPlanner.hpp</name>
    <path>/include/aikido/planner/dart/</path>
    <filename>d3/da1/dart_2SingleProblemPlanner_8hpp.html</filename>
    <includes id="df/d3e/SingleProblemPlanner_8hpp" name="SingleProblemPlanner.hpp" local="yes" imported="no">aikido/planner/SingleProblemPlanner.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="da/dca/dart_2detail_2SingleProblemPlanner-impl_8hpp" name="SingleProblemPlanner-impl.hpp" local="yes" imported="no">aikido/planner/dart/detail/SingleProblemPlanner-impl.hpp</includes>
    <class kind="class">aikido::planner::dart::SingleProblemPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SingleProblemPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>df/d3e/SingleProblemPlanner_8hpp.html</filename>
    <includes id="d4/d09/Planner_8hpp" name="Planner.hpp" local="yes" imported="no">aikido/planner/Planner.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <includes id="d4/dcb/detail_2SingleProblemPlanner-impl_8hpp" name="SingleProblemPlanner-impl.hpp" local="yes" imported="no">aikido/planner/detail/SingleProblemPlanner-impl.hpp</includes>
    <class kind="class">aikido::planner::SingleProblemPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>FirstSupportedMetaPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>dc/dfc/FirstSupportedMetaPlanner_8hpp.html</filename>
    <includes id="d2/d39/CompositePlanner_8hpp" name="CompositePlanner.hpp" local="yes" imported="no">aikido/planner/CompositePlanner.hpp</includes>
    <class kind="class">aikido::planner::FirstSupportedMetaPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>KunzRetimer.hpp</name>
    <path>/include/aikido/planner/kunzretimer/</path>
    <filename>df/d2c/KunzRetimer_8hpp.html</filename>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::kunzretimer::KunzRetimer</class>
    <class kind="struct">aikido::planner::kunzretimer::KunzRetimer::Params</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::kunzretimer</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeKunzTiming</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>a4c0a05e5c2909148f46d421d2f47275b</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;inputTrajectory, const Eigen::VectorXd &amp;maxVelocity, const Eigen::VectorXd &amp;maxAcceleration, double maxDeviation=DEFAULT_MAX_DEVIATION, double timeStep=DEFAULT_TIME_STEP)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_MAX_DEVIATION</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>a514a7e398002dd25941fd5c0d4508d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIME_STEP</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>adf0c805bb85e74ab24ef3b63159790ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BackwardCompatibility.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>de/dfe/BackwardCompatibility_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_VERSION_AT_LEAST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a29039a7d42abd5dc9a014c0f0a684b25</anchor>
      <arglist>(x, y, z)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_MAJOR_MINOR_VERSION_AT_LEAST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>ad9e8b3d74f759cb019869e1f3ae4b520</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_VERSION_AT_MOST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a325842ad0a190f28d81d271d661a36b9</anchor>
      <arglist>(x, y, z)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_MAJOR_MINOR_VERSION_AT_MOST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a2a569c0dd79584ece4fceb64273f27d3</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_PLACEHOLDER</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>ac8ec5d09c6e358623783fb7eda0d1816</anchor>
      <arglist>(ph)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>ompl_shared_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a80d7422befdffd8a46238dbe81effa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; T &gt;</type>
      <name>ompl_weak_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ace5edcfd0ba1691a4c0eb33bef99c512</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_make_shared</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a0a076c582462e05aae0327b487f5e39f</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_dynamic_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a9f9741a3ded8d2b646a5fb855f4aa67e</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_static_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a26c7df73b3c990fad15d1083af920609</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ompl_bind</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af26a27be12628c979ad7066a7c0e3f0a</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(boost::bind(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CRRT.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d0/d94/CRRT_8hpp.html</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d3/d8c/CRRT-impl_8hpp" name="CRRT-impl.hpp" local="yes" imported="no">detail/CRRT-impl.hpp</includes>
    <class kind="class">aikido::planner::ompl::CRRT</class>
    <class kind="class">aikido::planner::ompl::CRRT::Motion</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>CRRTConnect.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d6/db7/CRRTConnect_8hpp.html</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d0/d94/CRRT_8hpp" name="CRRT.hpp" local="yes" imported="no">aikido/planner/ompl/CRRT.hpp</includes>
    <includes id="d4/d23/CRRTConnect-impl_8hpp" name="CRRTConnect-impl.hpp" local="yes" imported="no">detail/CRRTConnect-impl.hpp</includes>
    <class kind="class">aikido::planner::ompl::CRRTConnect</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>dart.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>db/d58/dart_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>createSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ad7b398d71985813c60cc5744fde1fe54</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _stateSpace, constraint::TestablePtr _validityConstraint, double _maxDistanceBtwValidityChecks, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CRRT-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>d3/d8c/CRRT-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>CRRTConnect-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>d4/d23/CRRTConnect-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>OMPLConfigurationToConfigurationPlanner-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>d5/d81/OMPLConfigurationToConfigurationPlanner-impl_8hpp.html</filename>
    <includes id="de/da1/TestableIntersection_8hpp" name="TestableIntersection.hpp" local="yes" imported="no">aikido/constraint/TestableIntersection.hpp</includes>
    <includes id="d9/d1f/FrameDifferentiable_8hpp" name="FrameDifferentiable.hpp" local="yes" imported="no">aikido/constraint/dart/FrameDifferentiable.hpp</includes>
    <includes id="d3/df5/FrameTestable_8hpp" name="FrameTestable.hpp" local="yes" imported="no">aikido/constraint/dart/FrameTestable.hpp</includes>
    <includes id="d0/d33/constraint_2dart_2JointStateSpaceHelpers_8hpp" name="JointStateSpaceHelpers.hpp" local="yes" imported="no">aikido/constraint/dart/JointStateSpaceHelpers.hpp</includes>
    <includes id="d4/d2d/defaults_8hpp" name="defaults.hpp" local="yes" imported="no">aikido/distance/defaults.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">aikido/planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="dc/da4/MotionValidator_8hpp" name="MotionValidator.hpp" local="yes" imported="no">aikido/planner/ompl/MotionValidator.hpp</includes>
    <includes id="de/d4e/OMPLConfigurationToConfigurationPlanner_8hpp" name="OMPLConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/ompl/OMPLConfigurationToConfigurationPlanner.hpp</includes>
    <includes id="dc/d8d/ompl_2Planner_8hpp" name="Planner.hpp" local="yes" imported="no">aikido/planner/ompl/Planner.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">aikido/statespace/GeodesicInterpolator.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>Planner-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>dc/df4/Planner-impl_8hpp.html</filename>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">aikido/planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="dd/d13/GoalRegion_8hpp" name="GoalRegion.hpp" local="yes" imported="no">aikido/planner/ompl/GoalRegion.hpp</includes>
    <includes id="d2/d67/StateValidityChecker_8hpp" name="StateValidityChecker.hpp" local="yes" imported="no">aikido/planner/ompl/StateValidityChecker.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ac5db2c5a3731979213822f15a61b327b</anchor>
      <arglist>(const statespace::StateSpace::State *_start, const statespace::StateSpace::State *_goal, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a73212fbafd31af1b0a9f1b9abb7c4b56</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeometricStateSpace.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dc/db1/GeometricStateSpace_8hpp.html</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">aikido/statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace</class>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace::StateType</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GeometricStateSpace &gt;</type>
      <name>GeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acd9aadee862348e8ebf557ef099b1082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>ConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a381d6b417e3b485ca76ad56ef336c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; GeometricStateSpace &gt;</type>
      <name>WeakGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae7dc686694607cc236a76df966d0ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>WeakConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a68d84a38da90cd4ff11a8b52bedd589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GeometricStateSpace &gt;</type>
      <name>UniqueGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a6ba25ac2323cbee6c6b00cda950721de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>UniqueConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba907832f0c1a8192ca7d32192e0ffa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>EQUALITY_EPSILON</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a202c6dab902b5ffd042c953463b27b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GoalRegion.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dd/d13/GoalRegion_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <class kind="class">aikido::planner::ompl::GoalRegion</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>MotionValidator.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dc/da4/MotionValidator_8hpp.html</filename>
    <class kind="class">aikido::planner::ompl::MotionValidator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>OMPLConfigurationToConfigurationPlanner.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>de/d4e/OMPLConfigurationToConfigurationPlanner_8hpp.html</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="d3/da0/ConfigurationToConfiguration_8hpp" name="ConfigurationToConfiguration.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfiguration.hpp</includes>
    <includes id="de/de3/ConfigurationToConfigurationPlanner_8hpp" name="ConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfigurationPlanner.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">aikido/planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d5/d81/OMPLConfigurationToConfigurationPlanner-impl_8hpp" name="OMPLConfigurationToConfigurationPlanner-impl.hpp" local="yes" imported="no">aikido/planner/ompl/detail/OMPLConfigurationToConfigurationPlanner-impl.hpp</includes>
    <class kind="class">aikido::planner::ompl::OMPLConfigurationToConfigurationPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>Planner.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dc/d8d/ompl_2Planner_8hpp.html</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">aikido/distance/DistanceMetric.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">aikido/planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">aikido/statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="dc/df4/Planner-impl_8hpp" name="Planner-impl.hpp" local="yes" imported="no">detail/Planner-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ac5db2c5a3731979213822f15a61b327b</anchor>
      <arglist>(const statespace::StateSpace::State *_start, const statespace::StateSpace::State *_goal, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a73212fbafd31af1b0a9f1b9abb7c4b56</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRT</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a04bb5924e357de4e603db6093c8c7a56</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRTConnect</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af76d0db9b551da145818c7ed1dc5e7d1</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize, double _minTreeConnectionDistance)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>getSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ab5eab46b1a95d54729d4a9135ed2aeab</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt;::ompl::base::GoalRegion &gt;</type>
      <name>getGoalRegion</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae450c07e0526ea3ae5dc17d877187adc</anchor>
      <arglist>(::ompl::base::SpaceInformationPtr _si, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a8b1f90e9cec2b9427f30cd0f274a537a</anchor>
      <arglist>(const ::ompl::base::PlannerPtr &amp;_planner, const ::ompl::base::ProblemDefinitionPtr &amp;_pdef, statespace::ConstStateSpacePtr _sspace, statespace::InterpolatorPtr _interpolator, double _maxPlanTime)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; trajectory::Interpolated &gt;, bool &gt;</type>
      <name>simplifyOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a60acd428122fb8cc67a569b41e2c49eb</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks, double _timeout, std::size_t _maxEmptySteps, trajectory::InterpolatedPtr _originalTraj)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::geometric::PathGeometric</type>
      <name>toOMPLTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ac525b88975159ff056399f2de81e9d3a</anchor>
      <arglist>(const trajectory::InterpolatedPtr &amp;_interpolatedTraj, ::ompl::base::SpaceInformationPtr _si)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Interpolated &gt;</type>
      <name>toInterpolatedTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a5e574bca79caca6fcfee48b968fe1477</anchor>
      <arglist>(const ::ompl::geometric::PathGeometric &amp;_path, statespace::InterpolatorPtr _interpolator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Planner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d4/d09/Planner_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/da6/Problem_8hpp" name="Problem.hpp" local="yes" imported="no">aikido/planner/Problem.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::Planner</class>
    <class kind="class">aikido::planner::Planner::Result</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Planner &gt;</type>
      <name>PlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aaf497ea5831e5940d4801a2f4df0a25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Planner &gt;</type>
      <name>ConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a44f6e3b07f4f3851e3d163a2badabd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Planner &gt;</type>
      <name>WeakPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>ac65d7ac9a658ca7b4da3840b531998dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Planner &gt;</type>
      <name>WeakConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a80374bf5a2679657442ceb0b48f67bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Planner &gt;</type>
      <name>UniquePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a605b115a53cfafcce6e1a6dc50a9b2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Planner &gt;</type>
      <name>UniqueConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a42d7751bec51aedc199898715a64512e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateSampler.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d5/d58/StateSampler_8hpp.html</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <class kind="class">aikido::planner::ompl::StateSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>StateValidityChecker.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d2/d67/StateValidityChecker_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::ompl::StateValidityChecker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>ParabolicSmoother.hpp</name>
    <path>/include/aikido/planner/parabolic/</path>
    <filename>db/d4c/ParabolicSmoother_8hpp.html</filename>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::parabolic::ParabolicSmoother</class>
    <class kind="struct">aikido::planner::parabolic::ParabolicSmoother::Params</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcut</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a921998140b44ae76ed402d577cfced3c</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMIT, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a49dbe6e5f9ae926ed0e9f6a878f93037</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcutAndBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>ad73096e4a64b502f6a32b1c34703ed38</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMIT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIMELIMIT</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a025c35dc00ca36a7ec286379e42bb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_BLEND_RADIUS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a5a6c51f8f280cc25caa4af68209d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>DEFAULT_BLEND_ITERATIONS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a91556625d7b966f32ebe6e9a513dd1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_CHECK_RESOLUTION</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a1846c0848aa85c637f2430cae9839d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TOLERANCE</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>acdc54d491b1fa68fb9f596449d7997af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParabolicTimer.hpp</name>
    <path>/include/aikido/planner/parabolic/</path>
    <filename>df/dce/ParabolicTimer_8hpp.html</filename>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::parabolic::ParabolicTimer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abc87fc6c95d7d6a65c35a187af4971bd</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a71d41926976e9bc3b95199e7077ab345</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlanningResult.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d4/da7/PlanningResult_8hpp.html</filename>
    <class kind="class">aikido::planner::PlanningResult</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>Problem.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d8/da6/Problem_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::Problem</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>RankedMetaPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d4/de3/RankedMetaPlanner_8hpp.html</filename>
    <includes id="d2/d39/CompositePlanner_8hpp" name="CompositePlanner.hpp" local="yes" imported="no">aikido/planner/CompositePlanner.hpp</includes>
    <class kind="class">aikido::planner::RankedMetaPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>SequenceMetaPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d6/d7d/SequenceMetaPlanner_8hpp.html</filename>
    <includes id="d2/d39/CompositePlanner_8hpp" name="CompositePlanner.hpp" local="yes" imported="no">aikido/planner/CompositePlanner.hpp</includes>
    <class kind="class">aikido::planner::SequenceMetaPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>SnapConfigurationToConfigurationPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>df/d8b/SnapConfigurationToConfigurationPlanner_8hpp.html</filename>
    <includes id="d3/da0/ConfigurationToConfiguration_8hpp" name="ConfigurationToConfiguration.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfiguration.hpp</includes>
    <includes id="de/de3/ConfigurationToConfigurationPlanner_8hpp" name="ConfigurationToConfigurationPlanner.hpp" local="yes" imported="no">aikido/planner/ConfigurationToConfigurationPlanner.hpp</includes>
    <class kind="class">aikido::planner::SnapConfigurationToConfigurationPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>SnapPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>df/d36/SnapPlanner_8hpp.html</filename>
    <includes id="d2/d0b/deprecated_8hpp" name="deprecated.hpp" local="yes" imported="no">aikido/common/deprecated.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/da7/PlanningResult_8hpp" name="PlanningResult.hpp" local="yes" imported="no">aikido/planner/PlanningResult.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">aikido/statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planSnap</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a16a8ae2f9bee860b7905912d480421a8</anchor>
      <arglist>(const statespace::ConstStateSpacePtr &amp;stateSpace, const statespace::StateSpace::State *startState, const statespace::StateSpace::State *goalState, const std::shared_ptr&lt; statespace::Interpolator &gt; &amp;interpolator, const std::shared_ptr&lt; constraint::Testable &gt; &amp;constraint, planner::PlanningResult &amp;planningResult)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryPostProcessor.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>de/db5/TrajectoryPostProcessor_8hpp.html</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::TrajectoryPostProcessor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>BodyNodePoseVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d0/d13/BodyNodePoseVectorField_8hpp.html</filename>
    <includes id="dc/dc6/VectorField_8hpp" name="VectorField.hpp" local="yes" imported="no">aikido/planner/vectorfield/VectorField.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::BodyNodePoseVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>BodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a47ef9cf807108a60a46703a964ee7f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>ConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aa8fc53075a519c4368d7f6b42593768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>WeakBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aeca425dda1cee907f7134df654097c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>WeakConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a6c63b8b5fc083805cd8a2fc21ad0b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>UniqueBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a1c5fe0dafc119636c4ee7e91364922f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>UniqueConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a097ddd184607ff861057aaa5a3ade77c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MoveEndEffectorOffsetVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d0/dbb/MoveEndEffectorOffsetVectorField_8hpp.html</filename>
    <includes id="d0/d13/BodyNodePoseVectorField_8hpp" name="BodyNodePoseVectorField.hpp" local="yes" imported="no">aikido/planner/vectorfield/BodyNodePoseVectorField.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
  </compound>
  <compound kind="file">
    <name>MoveEndEffectorPoseVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d6/d5e/MoveEndEffectorPoseVectorField_8hpp.html</filename>
    <includes id="d0/d13/BodyNodePoseVectorField_8hpp" name="BodyNodePoseVectorField.hpp" local="yes" imported="no">aikido/planner/vectorfield/BodyNodePoseVectorField.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
  </compound>
  <compound kind="file">
    <name>VectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>dc/dc6/VectorField_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="da/dd8/VectorFieldPlannerStatus_8hpp" name="VectorFieldPlannerStatus.hpp" local="yes" imported="no">aikido/planner/vectorfield/VectorFieldPlannerStatus.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::VectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VectorField &gt;</type>
      <name>VectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a87ab043e8d644d8704b9e09d05a36510</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldConfigurationToEndEffectorOffsetPlanner.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d1/d84/VectorFieldConfigurationToEndEffectorOffsetPlanner_8hpp.html</filename>
    <includes id="d1/db4/ConfigurationToEndEffectorOffset_8hpp" name="ConfigurationToEndEffectorOffset.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToEndEffectorOffset.hpp</includes>
    <includes id="dd/d17/ConfigurationToEndEffectorOffsetPlanner_8hpp" name="ConfigurationToEndEffectorOffsetPlanner.hpp" local="yes" imported="no">aikido/planner/dart/ConfigurationToEndEffectorOffsetPlanner.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::VectorFieldConfigurationToEndEffectorOffsetPlanner</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
  </compound>
  <compound kind="file">
    <name>VectorFieldPlanner.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>da/de4/VectorFieldPlanner_8hpp.html</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/d09/Planner_8hpp" name="Planner.hpp" local="yes" imported="no">aikido/planner/Planner.hpp</includes>
    <includes id="dc/dc6/VectorField_8hpp" name="VectorField.hpp" local="yes" imported="no">aikido/planner/vectorfield/VectorField.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>followVectorField</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a648da5feadc03477556d27f51c6781d9</anchor>
      <arglist>(const aikido::planner::vectorfield::VectorField &amp;vectorField, const aikido::statespace::StateSpace::State &amp;startState, const aikido::constraint::Testable &amp;constraint, std::chrono::duration&lt; double &gt; timelimit, double initialStepSize, double checkConstraintResolution, planner::Planner::Result *result)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a592ecc85152a5faf4348dd485bf8036d</anchor>
      <arglist>(const aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;stateSpace, const statespace::dart::MetaSkeletonStateSpace::State &amp;startState, ::dart::dynamics::MetaSkeletonPtr metaskeleton, const ::dart::dynamics::ConstBodyNodePtr &amp;bn, const aikido::constraint::ConstTestablePtr &amp;constraint, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::Planner::Result *result=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>planToEndEffectorPose</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a97249161448ce59414ae0ad15f9685ad</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, ::dart::dynamics::MetaSkeletonPtr metaskeleton, const ::dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double conversionRatioInGeodesicDistance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::Planner::Result *result=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldPlannerStatus.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>da/dd8/VectorFieldPlannerStatus_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="enumeration">
      <type></type>
      <name>VectorFieldPlannerStatus</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a653bc87652ff77db6a831fa43cd74431</anchor>
      <arglist></arglist>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a1b52d4a7cbbcb87a81515c443453a2d5">TERMINATE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a92d766ccba721ca972a5627082925242">CACHE_AND_CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431adfffe9658cd2a5ecefa682370bf06d5a">CACHE_AND_TERMINATE</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldUtil.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>dc/dfc/VectorFieldUtil_8hpp.html</filename>
    <includes id="d8/d2a/common_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/common/Spline.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="function">
      <type>bool</type>
      <name>computeJointVelocityFromTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a8837645e1c3bf017d9b521a47fdb100a</anchor>
      <arglist>(Eigen::VectorXd &amp;jointVelocity, const Eigen::Vector6d &amp;desiredTwist, const ::dart::dynamics::MetaSkeletonPtr metaSkeleton, const ::dart::dynamics::ConstBodyNodePtr bodyNode, double jointLimitPadding, const Eigen::VectorXd &amp;jointVelocityLowerLimits, const Eigen::VectorXd &amp;jointVelocityUpperLimits, bool enforceJointVelocityLimits, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>computeGeodesicTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>afa027fae31a834222c2f4ab8824f6496</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>computeGeodesicError</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a564b72a8e78e5397bdad153c74622135</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeGeodesicDistance</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>ac413955aa734563de5b5cadc0255f15c</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans, double r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d0/dbb/World_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::planner::World</class>
    <class kind="struct">aikido::planner::World::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; World &gt;</type>
      <name>WorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa129f13cd8608a9a2c32ff3ed004b401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const World &gt;</type>
      <name>ConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>abab1048a8c2b02894784e4eed7440424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; World &gt;</type>
      <name>WeakWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0a80182a9415c37ff6606a8477818905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const World &gt;</type>
      <name>WeakConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a9025cfb1edb43461abf19a24783f5409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>UniqueWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>afbe4cc668596b5b0b035e59c716e8235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const World &gt;</type>
      <name>UniqueConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a06e4494bb40a6e49514302f48bbe4831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldStateSaver.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>dd/de1/WorldStateSaver_8hpp.html</filename>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">aikido/planner/World.hpp</includes>
    <class kind="class">aikido::planner::WorldStateSaver</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>robot.hpp</name>
    <path>/include/aikido/</path>
    <filename>d2/de0/robot_8hpp.html</filename>
    <includes id="d9/dbc/ConcreteManipulator_8hpp" name="ConcreteManipulator.hpp" local="yes" imported="no">aikido/robot/ConcreteManipulator.hpp</includes>
    <includes id="de/df1/ConcreteRobot_8hpp" name="ConcreteRobot.hpp" local="yes" imported="no">aikido/robot/ConcreteRobot.hpp</includes>
    <includes id="d0/da8/GrabMetadata_8hpp" name="GrabMetadata.hpp" local="yes" imported="no">aikido/robot/GrabMetadata.hpp</includes>
    <includes id="dc/d31/Hand_8hpp" name="Hand.hpp" local="yes" imported="no">aikido/robot/Hand.hpp</includes>
    <includes id="d2/d1d/Manipulator_8hpp" name="Manipulator.hpp" local="yes" imported="no">aikido/robot/Manipulator.hpp</includes>
    <includes id="d7/da6/Robot_8hpp" name="Robot.hpp" local="yes" imported="no">aikido/robot/Robot.hpp</includes>
    <includes id="d4/dad/robot_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/robot/util.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ConcreteManipulator.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d9/dbc/ConcreteManipulator_8hpp.html</filename>
    <includes id="dc/d31/Hand_8hpp" name="Hand.hpp" local="yes" imported="no">aikido/robot/Hand.hpp</includes>
    <includes id="d2/d1d/Manipulator_8hpp" name="Manipulator.hpp" local="yes" imported="no">aikido/robot/Manipulator.hpp</includes>
    <includes id="d4/dad/robot_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/robot/util.hpp</includes>
    <class kind="class">aikido::robot::ConcreteManipulator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteManipulator &gt;</type>
      <name>ConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a05b729cc4715c216c1d9089ba8738b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>ConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a901c435e1bc7867c4eeddd279f0e0639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteManipulator &gt;</type>
      <name>WeakConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a425bd1c98bd075d772913803c5324eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>WeakConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a4154eef0b01c18fc28875c9de826ed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteManipulator &gt;</type>
      <name>UniqueConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>aaacd06a986c474997b1ea9497839320c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>UniqueConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ab5c7b679f8fac1221a204bf6ce6c183d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcreteRobot.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>de/df1/ConcreteRobot_8hpp.html</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="de/d08/ConfigurationRanker_8hpp" name="ConfigurationRanker.hpp" local="yes" imported="no">aikido/distance/ConfigurationRanker.hpp</includes>
    <includes id="db/d4c/ParabolicSmoother_8hpp" name="ParabolicSmoother.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicSmoother.hpp</includes>
    <includes id="df/dce/ParabolicTimer_8hpp" name="ParabolicTimer.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicTimer.hpp</includes>
    <includes id="d7/da6/Robot_8hpp" name="Robot.hpp" local="yes" imported="no">aikido/robot/Robot.hpp</includes>
    <includes id="d4/dad/robot_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/robot/util.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <includes id="d3/d95/ConcreteRobot-impl_8hpp" name="ConcreteRobot-impl.hpp" local="yes" imported="no">detail/ConcreteRobot-impl.hpp</includes>
    <class kind="class">aikido::robot::ConcreteRobot</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteRobot &gt;</type>
      <name>ConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae3903bb64eec9aa908c4ba18624d8250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteRobot &gt;</type>
      <name>ConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>abbec688092f448056645d86297351cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteRobot &gt;</type>
      <name>WeakConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac4e28850035f3715892b83a67a01a4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteRobot &gt;</type>
      <name>WeakConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae65c3e8836869540252e90d89e101b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteRobot &gt;</type>
      <name>UniqueConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bdcca7f55d97b8aa8f2aab8d1db253c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteRobot &gt;</type>
      <name>UniqueConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a24366d9001c9726d6921355743c200e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcreteRobot-impl.hpp</name>
    <path>/include/aikido/robot/detail/</path>
    <filename>d3/d95/ConcreteRobot-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
  </compound>
  <compound kind="file">
    <name>GrabMetadata.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d0/da8/GrabMetadata_8hpp.html</filename>
    <class kind="struct">aikido::robot::GrabMetadata</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
  </compound>
  <compound kind="file">
    <name>Hand.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>dc/d31/Hand_8hpp.html</filename>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d0/da8/GrabMetadata_8hpp" name="GrabMetadata.hpp" local="yes" imported="no">aikido/robot/GrabMetadata.hpp</includes>
    <class kind="class">aikido::robot::Hand</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Hand &gt;</type>
      <name>HandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad61197ab272f863ecd14d59437cadd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Hand &gt;</type>
      <name>ConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae56be858d4d3e5a4a19b8158edef0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Hand &gt;</type>
      <name>WeakHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bbaf97c024ea686f6cc846f8162bf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Hand &gt;</type>
      <name>WeakConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a41faab9c161dc405ca69bf442d4bd7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Hand &gt;</type>
      <name>UniqueHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6647bdbf5aedb76a1617077b98eae2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Hand &gt;</type>
      <name>UniqueConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a48d7d89f8adfd0a44dfa8f5dc161e6ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manipulator.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d2/d1d/Manipulator_8hpp.html</filename>
    <includes id="dc/d31/Hand_8hpp" name="Hand.hpp" local="yes" imported="no">aikido/robot/Hand.hpp</includes>
    <includes id="d7/da6/Robot_8hpp" name="Robot.hpp" local="yes" imported="no">aikido/robot/Robot.hpp</includes>
    <class kind="class">aikido::robot::Manipulator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Manipulator &gt;</type>
      <name>ManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae9ff74efcf27c603b2a47bd2d48a081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Manipulator &gt;</type>
      <name>ConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a9c1f16e4f7af8f1ea85771041f7e24d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Manipulator &gt;</type>
      <name>WeakManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7244e08967f44ee9c7ad4d701b2cc72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Manipulator &gt;</type>
      <name>WeakConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a92c30cea0694f5da5a06c2227e25e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Manipulator &gt;</type>
      <name>UniqueManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7d581dde2230eb9c6dad42ff3cf26234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Manipulator &gt;</type>
      <name>UniqueConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a3b2f2cb16e67a92865da5011cdadb87e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robot.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d7/da6/Robot_8hpp.html</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::robot::Robot</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad935170cf3805e00e82c5661d840464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a5b34bc49be50b8fb406e8ac7ef3d5804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Robot &gt;</type>
      <name>WeakRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae7ea0c2414452c6e44e04727ff411aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Robot &gt;</type>
      <name>WeakConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a08a329dcb035c215cb55814024d81767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>UniqueRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac36de5e6cc70a361a59dd0892f629c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Robot &gt;</type>
      <name>UniqueConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a35cdb287258f9253e92ff8b9da6baccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rviz.hpp</name>
    <path>/include/aikido/</path>
    <filename>db/d99/rviz_8hpp.html</filename>
    <includes id="d4/dfa/BodyNodeMarker_8hpp" name="BodyNodeMarker.hpp" local="yes" imported="no">aikido/rviz/BodyNodeMarker.hpp</includes>
    <includes id="d0/d8f/FrameMarker_8hpp" name="FrameMarker.hpp" local="yes" imported="no">aikido/rviz/FrameMarker.hpp</includes>
    <includes id="d1/dc3/InteractiveMarkerViewer_8hpp" name="InteractiveMarkerViewer.hpp" local="yes" imported="no">aikido/rviz/InteractiveMarkerViewer.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">aikido/rviz/ResourceServer.hpp</includes>
    <includes id="da/d5b/ShapeFrameMarker_8hpp" name="ShapeFrameMarker.hpp" local="yes" imported="no">aikido/rviz/ShapeFrameMarker.hpp</includes>
    <includes id="d6/d26/SkeletonMarker_8hpp" name="SkeletonMarker.hpp" local="yes" imported="no">aikido/rviz/SkeletonMarker.hpp</includes>
    <includes id="d6/d3e/TSRMarker_8hpp" name="TSRMarker.hpp" local="yes" imported="no">aikido/rviz/TSRMarker.hpp</includes>
    <includes id="d6/dba/rviz_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/rviz/pointers.hpp</includes>
    <includes id="d6/db0/rviz_2shape__conversions_8hpp" name="shape_conversions.hpp" local="yes" imported="no">aikido/rviz/shape_conversions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BodyNodeMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d4/dfa/BodyNodeMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">aikido/rviz/ResourceServer.hpp</includes>
    <includes id="da/d5b/ShapeFrameMarker_8hpp" name="ShapeFrameMarker.hpp" local="yes" imported="no">aikido/rviz/ShapeFrameMarker.hpp</includes>
    <class kind="class">aikido::rviz::BodyNodeMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodeMarker &gt;</type>
      <name>BodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2caae3ca963e1d82a48e384680eeb9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>ConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6f3390775e93a2d0e218b13487d11b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodeMarker &gt;</type>
      <name>WeakBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a80c346eb0668f6ec82bd9094bb766eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>WeakConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a186798f195df3096da5979a48b57194d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodeMarker &gt;</type>
      <name>UniqueBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac9e830eb01365f1f7dc33e5aa197ffd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>UniqueConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a01cf381a90c2eb030b3fe2a84e9fc95f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d0/d8f/FrameMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::rviz::FrameMarker</class>
    <namespace>dart</namespace>
    <namespace>dart::dynamics</namespace>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameMarker &gt;</type>
      <name>FrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a71c26a83d75818ef01efaac71eeed5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const FrameMarker &gt;</type>
      <name>ConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a259b8e0e923cdd675d4f2795babe5b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; FrameMarker &gt;</type>
      <name>WeakFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a35bccf6e1f37a585ea67274e890ac8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const FrameMarker &gt;</type>
      <name>WeakConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2b8c9dfa9a51530e18a5fd13d99b7095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; FrameMarker &gt;</type>
      <name>UniqueFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a4b2f19a3a62965fc12fc8ff2cfc675fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const FrameMarker &gt;</type>
      <name>UniqueConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a100ccced3dd6c20edf64533b566eb400</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InteractiveMarkerViewer.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d1/dc3/InteractiveMarkerViewer_8hpp.html</filename>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">aikido/planner/World.hpp</includes>
    <includes id="d6/d3e/TSRMarker_8hpp" name="TSRMarker.hpp" local="yes" imported="no">aikido/rviz/TSRMarker.hpp</includes>
    <includes id="d6/dba/rviz_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/rviz/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::rviz::InteractiveMarkerViewer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>InteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aac91d4365e1ab047ad7d8db7676a4bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>ConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a289c308fceb16012c144f43b6c3d5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>WeakInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7f68b334063581103501e894ce311569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>WeakConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a28a06069c73873da3736f6d9a64213e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>UniqueInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac28e45377726d43cb1f266a1b94ff2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>UniqueConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac2e3bdd3914efe42b60aa34fe3b6ddaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResourceServer.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d8/df9/ResourceServer_8hpp.html</filename>
    <class kind="struct">aikido::rviz::BinaryResource</class>
    <class kind="struct">aikido::rviz::TextureResource</class>
    <class kind="struct">aikido::rviz::MeshResource</class>
    <class kind="struct">aikido::rviz::ResourceRequest</class>
    <class kind="class">aikido::rviz::ResourceServer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextureResource &gt;</type>
      <name>TextureResourcePtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0844c3a1c44227f91e00540aeec98e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeFrameMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>da/d5b/ShapeFrameMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">aikido/rviz/ResourceServer.hpp</includes>
    <class kind="class">aikido::rviz::ShapeFrameMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>ShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aae58ff66e95bc1d2dcb81cface7f44fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>ConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab349244402ace54b805b3d025f9e07ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>WeakShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2bbf49828f7d08d2fe9544e93b3fc180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>WeakConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a687a16a76c2b7713e94f0d71f7c9ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>UniqueShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1a6038295bfe54351ac5d172d9d89b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>UniqueConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afdda6d93e2b5a744245d74ebbd8892a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SkeletonMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/d26/SkeletonMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d4/dfa/BodyNodeMarker_8hpp" name="BodyNodeMarker.hpp" local="yes" imported="no">aikido/rviz/BodyNodeMarker.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">aikido/rviz/ResourceServer.hpp</includes>
    <class kind="class">aikido::rviz::SkeletonMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>TrajectoryMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d2/d02/TrajectoryMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::rviz::TrajectoryMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>TSRMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/d3e/TSRMarker_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::rviz::TSRMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>statespace.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/dac/statespace_8hpp.html</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">aikido/statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">aikido/statespace/Interpolator.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d7/da6/StateHandle_8hpp" name="StateHandle.hpp" local="yes" imported="no">aikido/statespace/StateHandle.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d4/dc6/statespace_2dart_2JointStateSpaceHelpers_8hpp" name="JointStateSpaceHelpers.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpaceHelpers.hpp</includes>
    <includes id="d4/d49/MetaSkeletonStateSaver_8hpp" name="MetaSkeletonStateSaver.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSaver.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">aikido/statespace/dart/WeldJoint.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CartesianProduct.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d6/dec/CartesianProduct_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d7/d20/CartesianProduct-impl_8hpp" name="CartesianProduct-impl.hpp" local="yes" imported="no">detail/CartesianProduct-impl.hpp</includes>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <class kind="class">aikido::statespace::CartesianProduct</class>
    <class kind="class">aikido::statespace::CartesianProduct::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CartesianProduct &gt;</type>
      <name>CartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c137e8a750ce450cf339fc28c80c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CartesianProduct &gt;</type>
      <name>ConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a72ba92e8230cda73d6e1cf84d93c2767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CartesianProduct &gt;</type>
      <name>WeakCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ac6393e65e1a7ba399ebc383985c4e9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CartesianProduct &gt;</type>
      <name>WeakConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acbad8f5bf6605df27a9b226e2d248dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CartesianProduct &gt;</type>
      <name>UniqueCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a044da3c79383b2077b5d8d0251fae058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CartesianProduct &gt;</type>
      <name>UniqueConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a3bbdcd688832d252df499751f5423ef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSpace-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d6/dc8/MetaSkeletonStateSpace-impl_8hpp.html</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>RnJoint-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d6/ddb/RnJoint-impl_8hpp.html</filename>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>RnJointTraits.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>dd/d6f/RnJointTraits_8hpp.html</filename>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <namespace>aikido::statespace::dart::detail</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpace.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d2/dc2/JointStateSpace_8hpp.html</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::JointStateSpace</class>
    <class kind="class">aikido::statespace::dart::JointStateSpace::Properties</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSaver.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d4/d49/MetaSkeletonStateSaver_8hpp.html</filename>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSaver</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSpace.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d5/df3/MetaSkeletonStateSpace_8hpp.html</filename>
    <includes id="d3/d9f/pair_8hpp" name="pair.hpp" local="yes" imported="no">aikido/common/pair.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d6/dc8/MetaSkeletonStateSpace-impl_8hpp" name="MetaSkeletonStateSpace-impl.hpp" local="yes" imported="no">detail/MetaSkeletonStateSpace-impl.hpp</includes>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace::Properties</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>MetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8ed2b6f9ff6bc957ee5f55343ea579b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>ConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8d493e13286a781f5983bda8232b14d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>WeakMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a518c11ce2a31145e7eda1fe386b62d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>WeakConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a29e67649edf945287f33e51334c33a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>UniqueMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a0a7a00afa4a30bac93eadb58fc74d5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>UniqueConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a640cd5d21ceb88b577d0cb6bf21e0dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnJoint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>da/d3e/RnJoint_8hpp.html</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="dd/d6f/RnJointTraits_8hpp" name="RnJointTraits.hpp" local="yes" imported="no">aikido/statespace/dart/detail/RnJointTraits.hpp</includes>
    <includes id="d6/ddb/RnJoint-impl_8hpp" name="RnJoint-impl.hpp" local="yes" imported="no">aikido/statespace/dart/detail/RnJoint-impl.hpp</includes>
    <class kind="class">aikido::statespace::dart::RJoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="typedef">
      <type>RJoint&lt; 0 &gt;</type>
      <name>R0Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae72e38e578b41763d97f47d32bd1c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 1 &gt;</type>
      <name>R1Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>abaa5729da665c95333267de6bf10fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 2 &gt;</type>
      <name>R2Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ad1287648351a3a6f0cad1598d93c033c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 3 &gt;</type>
      <name>R3Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>adfaec81dec6569c2dea0cb06cc45794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 6 &gt;</type>
      <name>R6Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a840584b947a4d859602ef3498e72adfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d3/d2e/SE2Joint_8hpp.html</filename>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SE2Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SE3Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>df/d83/SE3Joint_8hpp.html</filename>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SE3Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SO2Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d6/d05/SO2Joint_8hpp.html</filename>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SO2Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SO3Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d6/d26/SO3Joint_8hpp.html</filename>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SO3Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJoint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>dc/de8/WeldJoint_8hpp.html</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::WeldJoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProduct-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d7/d20/CartesianProduct-impl_8hpp.html</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>Rn-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d8/df3/Rn-impl_8hpp.html</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>ScopedState-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>de/d57/ScopedState-impl_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE2-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>dd/da5/SE2-impl_8hpp.html</filename>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE3-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>dd/d08/SE3-impl_8hpp.html</filename>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO2-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d7/d6a/SO2-impl_8hpp.html</filename>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO3-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d3/ded/SO3-impl_8hpp.html</filename>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateHandle-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d6/dbc/StateHandle-impl_8hpp.html</filename>
    <includes id="d7/da6/StateHandle_8hpp" name="StateHandle.hpp" local="yes" imported="no">aikido/statespace/StateHandle.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>GeodesicInterpolator.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d3/db8/GeodesicInterpolator_8hpp.html</filename>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">aikido/statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::GeodesicInterpolator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>Interpolator.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d2/d6f/Interpolator_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::Interpolator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolator &gt;</type>
      <name>InterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae78c8cb0f9e8b59f0c6f8415bc6c8c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolator &gt;</type>
      <name>ConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acd1df13520395c55b7cd026e051bc574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolator &gt;</type>
      <name>WeakInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6da018faa8a88dd6ec0ccf323251f12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolator &gt;</type>
      <name>WeakConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acefac2fbc8f04f77a08803a49950952d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolator &gt;</type>
      <name>UniqueInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af245b6690dc8d271d14f4efb78635d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolator &gt;</type>
      <name>UniqueConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a0a843c02e921c290916adf5a551dfe93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/include/aikido/statespace/</path>
    <filename>da/ddd/README_8md.html</filename>
  </compound>
  <compound kind="file">
    <name>Rn.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d4/d4e/Rn_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d8/df3/Rn-impl_8hpp" name="Rn-impl.hpp" local="yes" imported="no">detail/Rn-impl.hpp</includes>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <class kind="class">aikido::statespace::R</class>
    <class kind="class">aikido::statespace::R::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>R&lt; 0 &gt;</type>
      <name>R0</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a112711b214334a56f6211267f3a7ea48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 1 &gt;</type>
      <name>R1</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c3a2d2580f90ca0da9fee65de8f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 2 &gt;</type>
      <name>R2</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a236d98378f3a4c871d7df5d339a598a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 3 &gt;</type>
      <name>R3</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae0ff830e4bc4cbbf927ebcb04af2346c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 6 &gt;</type>
      <name>R6</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6bdc50148bffb18120bd4b4803960ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; Eigen::Dynamic &gt;</type>
      <name>Rn</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a7d6e5d692a6d4f52a878ad0d030055ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScopedState.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d5/dac/ScopedState_8hpp.html</filename>
    <includes id="d7/da6/StateHandle_8hpp" name="StateHandle.hpp" local="yes" imported="no">aikido/statespace/StateHandle.hpp</includes>
    <includes id="de/d57/ScopedState-impl_8hpp" name="ScopedState-impl.hpp" local="yes" imported="no">detail/ScopedState-impl.hpp</includes>
    <class kind="class">aikido::statespace::ScopedState</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE3.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d2/d72/SE3_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="dd/d08/SE3-impl_8hpp" name="SE3-impl.hpp" local="yes" imported="no">detail/SE3-impl.hpp</includes>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <class kind="class">aikido::statespace::SE3</class>
    <class kind="class">aikido::statespace::SE3::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO2.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d6/d12/SO2_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d7/d6a/SO2-impl_8hpp" name="SO2-impl.hpp" local="yes" imported="no">detail/SO2-impl.hpp</includes>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <class kind="class">aikido::statespace::SO2</class>
    <class kind="class">aikido::statespace::SO2::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO3.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d3/dc7/SO3_8hpp.html</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d3/ded/SO3-impl_8hpp" name="SO3-impl.hpp" local="yes" imported="no">detail/SO3-impl.hpp</includes>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <class kind="class">aikido::statespace::SO3</class>
    <class kind="class">aikido::statespace::SO3::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateHandle.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d7/da6/StateHandle_8hpp.html</filename>
    <includes id="d6/dbc/StateHandle-impl_8hpp" name="StateHandle-impl.hpp" local="yes" imported="no">detail/StateHandle-impl.hpp</includes>
    <class kind="class">aikido::statespace::StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateSpace.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d0/d73/StateSpace_8hpp.html</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <class kind="class">aikido::statespace::StateSpace</class>
    <class kind="class">aikido::statespace::StateSpace::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a55de554810a89a068e51133660087b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a04f07b5eb15f2c5f5b72221278854eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; StateSpace &gt;</type>
      <name>WeakStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a43ca940fe24d5036ce19540cb3e7cf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const StateSpace &gt;</type>
      <name>WeakConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aac239e63abbc94c92bc02cab1b887e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StateSpace &gt;</type>
      <name>UniqueStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af85badb5902b06f3da6e845321512738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const StateSpace &gt;</type>
      <name>UniqueConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a85f9f4e81b79ee5b7194550faad26046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Interpolated.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>df/dfd/Interpolated_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">aikido/statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::trajectory::Interpolated</class>
    <class kind="struct">aikido::trajectory::Interpolated::Waypoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a2fa8e779f3587c13083faa74d6f72737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolated &gt;</type>
      <name>ConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a6ac0c2c899cf0a43fe9a86fca8b2e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolated &gt;</type>
      <name>WeakInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a37caeb8a3bfbca4cd15ef0d48d488572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolated &gt;</type>
      <name>WeakConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>acc72dc9ff0a7c62ada97262dd342331d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolated &gt;</type>
      <name>UniqueInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a3958f463715266c2e7bd73ade7883ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolated &gt;</type>
      <name>UniqueConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aac066660116f2c739043326d79c476f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trajectory.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>d2/de2/Trajectory_8hpp.html</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d5/dde/TrajectoryMetadata_8hpp" name="TrajectoryMetadata.hpp" local="yes" imported="no">aikido/trajectory/TrajectoryMetadata.hpp</includes>
    <class kind="class">aikido::trajectory::Trajectory</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Trajectory &gt;</type>
      <name>TrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a4653e7dbb840b47d280798374eda6ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Trajectory &gt;</type>
      <name>ConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae287f9bd79aff29551b41b2e815e4c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Trajectory &gt;</type>
      <name>WeakTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a52a5ed13cddf456c3955d965617d3131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Trajectory &gt;</type>
      <name>WeakConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a89384b5934145651e614b905bca5c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Trajectory &gt;</type>
      <name>UniqueTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8af519255979af6d9041bbeade5dec34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Trajectory &gt;</type>
      <name>UniqueConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ad8b57775f2914cd7d23bf3339803c9b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryMetadata.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>d5/dde/TrajectoryMetadata_8hpp.html</filename>
    <class kind="struct">aikido::trajectory::TrajectoryMetadata</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
  </compound>
  <compound kind="class">
    <name>aikido::perception::AssetDatabase</name>
    <filename>d1/d83/classaikido_1_1perception_1_1AssetDatabase.html</filename>
    <member kind="function">
      <type></type>
      <name>AssetDatabase</name>
      <anchorfile>d1/d83/classaikido_1_1perception_1_1AssetDatabase.html</anchorfile>
      <anchor>a375d9006f07419400c67ba0ee83018cd</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;resourceRetriever, const dart::common::Uri &amp;configDataURI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AssetDatabase</name>
      <anchorfile>d1/d83/classaikido_1_1perception_1_1AssetDatabase.html</anchorfile>
      <anchor>a0d0cf31b58547f087d2b23162b629d85</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAssetByKey</name>
      <anchorfile>d1/d83/classaikido_1_1perception_1_1AssetDatabase.html</anchorfile>
      <anchor>a95286fa8dbaf53299a22a696b3006daa</anchor>
      <arglist>(const std::string &amp;assetKey, dart::common::Uri &amp;assetResource, Eigen::Isometry3d &amp;assetOffset) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>YAML::Node</type>
      <name>mAssetData</name>
      <anchorfile>d1/d83/classaikido_1_1perception_1_1AssetDatabase.html</anchorfile>
      <anchor>a4c0085110fa5103fb8f0db7cf989fda6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::BinaryResource</name>
    <filename>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryResource</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a389c1225fb6ad399b8277e77ae10b70b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryResource</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>af41bf07acb53ff74515dd5db7722ba5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mPath</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a365f7a8bbca8274e47bb4f3ccd4a037c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>mSize</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a275c2c0d72249cb85104b8d63ea52d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>mData</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a58e9d0eb933d5e7ef0ba3657f8cc6e92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::BodyNodeMarker</name>
    <filename>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a3826ab7afa0256fab850eefbe43df259</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const dart::dynamics::WeakBodyNodePtr &amp;bodyNode, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a9d0cd9dd1c7e94380a066b267c6ee109</anchor>
      <arglist>(const BodyNodeMarker &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>BodyNodeMarker &amp;</type>
      <name>operator=</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a07e6a9edeec607586e23f28549096529</anchor>
      <arglist>(const BodyNodeMarker &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>ac9443a022ed46ec6b8e7487322b972ec</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a1d69117b0a11674768385e8f88fd5bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a2240506e5e23bd2c04e654be2e73c0ff</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a2e92116d6787f1270bd78701c3c386f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; const dart::dynamics::ShapeNode *, std::unique_ptr&lt; ShapeFrameMarker &gt; &gt;</type>
      <name>ShapeFrameMarkerMap</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a0f9a3c13cff9e0d73ebd5020932848ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>acc5f986bece1ea39cef4cf94b8703bba</anchor>
      <arglist>(const dart::dynamics::BodyNode &amp;bodyNode) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::WeakBodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a4874a04f2197f1546eb8a36363c97345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::common::Connection</type>
      <name>mOnStructuralChange</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a6fccd1be8d713570688bf53190f9b9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>ac40bb655c9bc3185c15157f27e8e27bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>adebafd6050721f9cf53d0bf90d82b57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a30c7bf9a88efbdfc58d9aa5cce81bbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarkerControl *</type>
      <name>mVisualControl</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a23e5197886b12f4a0176aebfef2d8982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a88bebcd8ec1e748d68a4a51f0a97c41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a5e126cd09ac4729a9d9b4d2445f30835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShapeFrameMarkerMap</type>
      <name>mShapeFrameMarkers</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a77f91aba389b002d87e8946bce460539</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::BodyNodePoseVectorField</name>
    <filename>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</filename>
    <base>aikido::planner::vectorfield::VectorField</base>
    <member kind="function">
      <type></type>
      <name>BodyNodePoseVectorField</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a049fce687013cd7a5518b73206e8d34e</anchor>
      <arglist>(aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton, ::dart::dynamics::ConstBodyNodePtr bodyNode, double maxStepSize, double jointLimitPadding, bool enforceJointVelocityLimits=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateVelocity</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a0da56713d901bd0618c13417c45634ab</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, Eigen::VectorXd &amp;qd) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateStatus</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>afd7ecc0cd7c7a417a3ceaf0ed7da2e16</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>ac776429f5f8b32cf8d566474e1fa5843</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a5f1444b170fd7250df67c50019018341</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateTrajectory</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a168c3ab38526b5913794ced471adee7a</anchor>
      <arglist>(const aikido::trajectory::Trajectory &amp;trajectory, const aikido::constraint::Testable *constraint, double evalStepSize, double &amp;evalTimePivot, bool includeEndTime) const override</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a172d41f38b1b2b559bcb058d04f2c4e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a1104e9318a36f52fd4378d14a392f8d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a1f745d91929e214010379f37864776ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::ConstBodyNodePtr</type>
      <name>getBodyNode</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a3eb880c10991fc507c8f27c8955fc110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>af252f6b0690fa3a7d31784d965e5bdf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a20941bfb96e39f78c6a19c33f24f7ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstBodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a75773d5a28151c687268bed399f86928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxStepSize</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>af3bf54972bb159d8c5e34d10645fc7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mJointLimitPadding</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a3f987b32f0194fef7cc68e410b12e34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>ae3eeeb7e8e3d251d03f356204bfa57d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a630564a86c6105ed2c7f902975729806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mEnforceJointVelocityLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a33754aac1e45c8ef63b1c92ea5c87a0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::BSpline</name>
    <filename>dd/d9d/classaikido_1_1common_1_1BSpline.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a11e2c50c48cac29a6f9db676415692bca856d5f15fe207056d7278ac550556a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a47b335b0be5e8fedba4ebb7550660d23a796674f696cb56fd5888fba3fd118207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a9561af6111fbc3ccd2bea88c35e1dbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a2533d629f02b91a9a7344fe3257b2c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::KnotVectorType</type>
      <name>KnotVectorType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>abb9e3ef7064643b22fc34e60debdb92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a470f2623eece7ad8d94c83dc61a0488f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::BasisVectorType</type>
      <name>BasisVectorType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>ac70f39035b0b9889d7bd69879e362bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::BasisDerivativeType</type>
      <name>BasisDerivativeType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>aaf5d05c25bd252b042e5c2581f98d771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; BSpline &gt;::ControlPointVectorType</type>
      <name>ControlPointVectorType</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>ab3f453405809ce63a155c6788d91ebc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a11e2c50c48cac29a6f9db676415692bca856d5f15fe207056d7278ac550556a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a47b335b0be5e8fedba4ebb7550660d23a796674f696cb56fd5888fba3fd118207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a6ff3bbac1b757e62abeed2726a613ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a1f8abaa975e7b96a66448699563334a2</anchor>
      <arglist>(const OtherVectorType &amp;knots, const OtherArrayType &amp;ctrls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a3cccafec526d30109aefd4613c10eeae</anchor>
      <arglist>(const BSpline&lt; Scalar, Dimension, OtherDegree &gt; &amp;spline)</arglist>
    </member>
    <member kind="function">
      <type>const KnotVectorType &amp;</type>
      <name>knots</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a12a374119bedba06b6489c8164fe80b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ControlPointVectorType &amp;</type>
      <name>ctrls</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>afbfa1e6af2c764173b25066e36403b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ControlPointVectorType &amp;</type>
      <name>ctrls</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>af0aef0ebd06be0287fdcc01863ce09ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointType</type>
      <name>operator()</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>abde4c583d1d6713f1f0e155487dfddae</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; BSpline &gt;::DerivativeType</type>
      <name>derivatives</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>ae40c0095156197284d032bd49ae9256a</anchor>
      <arglist>(Scalar u, Eigen::DenseIndex order) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; BSpline, DerivativeOrder &gt;::DerivativeType</type>
      <name>derivatives</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a01205619da977fee7b4713346de35120</anchor>
      <arglist>(Scalar u, Eigen::DenseIndex order=DerivativeOrder) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; BSpline &gt;::BasisVectorType</type>
      <name>basisFunctions</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>af678f08b2748913b29e6669f74ac545e</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; BSpline &gt;::BasisDerivativeType</type>
      <name>basisFunctionDerivatives</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a31ec923a21d2b5e711d9df8eda927932</anchor>
      <arglist>(Scalar u, Eigen::DenseIndex order) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; BSpline, DerivativeOrder &gt;::BasisDerivativeType</type>
      <name>basisFunctionDerivatives</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a35068a959507f1935bd59de46ef2e1de</anchor>
      <arglist>(Scalar u, Eigen::DenseIndex order=DerivativeOrder) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>degree</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a52c4e14854550ae209687d93f6f64a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>span</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a9a5fd5a3db02d4b72403f98372545bdf</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::DenseIndex</type>
      <name>Span</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a4a6e3ee7e9c6ecc1b3c35157458e5416</anchor>
      <arglist>(typename SplineTraits&lt; BSpline &gt;::Scalar u, Eigen::DenseIndex degree, const typename SplineTraits&lt; BSpline &gt;::KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasisVectorType</type>
      <name>BasisFunctions</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a92c9bd8ed99d33ee56144c5b089c968b</anchor>
      <arglist>(Scalar u, Eigen::DenseIndex degree, const KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasisDerivativeType</type>
      <name>BasisFunctionDerivatives</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a6ce66454e758a93df08c33428cedeaf1</anchor>
      <arglist>(const Scalar u, const Eigen::DenseIndex order, const Eigen::DenseIndex degree, const KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>BasisFunctionDerivativesImpl</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>ae9e7d5f9f1c48e3013d92ad74526acf7</anchor>
      <arglist>(const typename BSpline&lt; _Scalar, _Dim, _Degree &gt;::Scalar u, const Eigen::DenseIndex order, const Eigen::DenseIndex p, const typename BSpline&lt; _Scalar, _Dim, _Degree &gt;::KnotVectorType &amp;U, DerivativeType &amp;N_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KnotVectorType</type>
      <name>m_knots</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>ae475b6248dca58d95306a828eaf8863e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ControlPointVectorType</type>
      <name>m_ctrls</name>
      <anchorfile>dd/d9d/classaikido_1_1common_1_1BSpline.html</anchorfile>
      <anchor>a1e276db29fbd3704838f75f5fb86a258</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::BSpline</name>
    <filename>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</filename>
    <base>aikido::trajectory::Trajectory</base>
    <member kind="typedef">
      <type>common::BSpline&lt; double, 1, Eigen::Dynamic &gt;</type>
      <name>SplineType</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a2aa9be653b62f4563efe171c7427083a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SplineType::KnotVectorType</type>
      <name>KnotVectorType</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>aa951444ef39a7b64f9314e899035155f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SplineType::ControlPointVectorType</type>
      <name>ControlPointVectorType</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a61410f8557315ba94bc409d6fd1ee7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a193433e73aaa6f7f9f81912224e882be</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, const KnotVectorType &amp;knots, const ControlPointVectorType &amp;controlPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a06fb949e0e62e597f19803f9dc219a97</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, std::size_t degree, const ControlPointVectorType &amp;controlPoints, double startTime=0.0, double endTime=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ae81fae0d1837e4d5483e8a86b3f34b63</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, std::size_t degree, std::size_t numControlPoints, double startTime=0.0, double endTime=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a89207a22c3f2553775559840b730eccb</anchor>
      <arglist>(const BSpline &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a13954391ff50fa49708abb4170b80cf2</anchor>
      <arglist>(BSpline &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BSpline</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a4db883c9823772d52fb49128758446e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>BSpline &amp;</type>
      <name>operator=</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>abc9588c7123e7630e80760bab99ab88b</anchor>
      <arglist>(const BSpline &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BSpline &amp;</type>
      <name>operator=</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a2d91956243f6a4250c2eef241ca906ec</anchor>
      <arglist>(BSpline &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Trajectory &gt;</type>
      <name>clone</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a0dc2df780e4401f0ee6a9fd247280ae2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDegree</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ac9a99b65e52e41249d9edddcd4ca016f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getOrder</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a9b1f803895151b2fec79a607360c4ddf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumKnots</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ab04ecfd2e16c304f9c551d69cabbb04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumControlPoints</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a061e1cf74be0a5a25c404c3a206251ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>af991303905dd43ebb6f176e52ea1389a</anchor>
      <arglist>(std::size_t stateSpaceIndex, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a38796ed0296610853a5e77fcb0a22231</anchor>
      <arglist>(const Eigen::VectorXd &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a2c8b9f725bac3e6d3f3ff076daea5f6e</anchor>
      <arglist>(const statespace::StateSpace::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ae9f25b00c451bde9e26c7083a2068f42</anchor>
      <arglist>(std::size_t stateSpaceIndex, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a0636dfa116859af185eb1f7866529307</anchor>
      <arglist>(const Eigen::VectorXd &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndPoint</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a43d7c473f948a0fd2fc35c4dfe64e499</anchor>
      <arglist>(const statespace::StateSpace::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPoints</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a82bcf58784c014aede0e0bca88e28928</anchor>
      <arglist>(std::size_t stateSpaceIndex, const ControlPointVectorType &amp;controlPoints, bool withStartControlPoint=true, bool withEndControlPoint=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPoints</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a66ae2dccf77c4174208cc5ff1188b249</anchor>
      <arglist>(std::size_t stateSpaceIndex, double value, bool withStartControlPoint=true, bool withEndControlPoint=true)</arglist>
    </member>
    <member kind="function">
      <type>const ControlPointVectorType &amp;</type>
      <name>getControlPoints</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>abca11afbac520b58917760a30afa0a61</anchor>
      <arglist>(std::size_t stateSpaceIndex) const</arglist>
    </member>
    <member kind="function">
      <type>ControlPointVectorType</type>
      <name>getControlPoints</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>aa6012010d318edfdc312e70ab0e4bb97</anchor>
      <arglist>(std::size_t stateSpaceIndex, bool withStartControlPoint, bool withEndControlPoint) const</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ad395553d68fe1d74b6208f11b53e2bf9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>aefd2172284f138cd0fc34a03e17d4ab8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a649b86038f4c8616301c14f251cfb8e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a84bc94e5a34c51eef6d77be169bf8ec9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a1436cc04511f0ab174ce4aee197ac9c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a9e1c3dd5cf17fa49c4f468b1251e136b</anchor>
      <arglist>(double t, statespace::StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivative</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a5c8abb7c636b962cd20b9d00b30a99d1</anchor>
      <arglist>(double t, int derivative, Eigen::VectorXd &amp;tangentVector) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>computeArcLength</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a2c6781bf4debe44e78363925d79f953a</anchor>
      <arglist>(const distance::DistanceMetric &amp;distanceMetric, double resolution=0.1) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::size_t</type>
      <name>computeNumKnots</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>acc290b238657f224a31c0a1be8ab46c7</anchor>
      <arglist>(std::size_t degree, std::size_t numControlPoints)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static KnotVectorType</type>
      <name>computeUniformKnots</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ac3ba72c45d07ed81d8b937c566940a30</anchor>
      <arglist>(std::size_t degree, std::size_t numControlPoints, double startTime=0.0, double endTime=1.0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a02c18975ef67fddd103cc58124753b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SplineType &gt;</type>
      <name>mSplines</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a5979bd720c56b0a858d8ff9c16597050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mStartTime</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>ae7855fd01c87a555f5fd7786c5b298a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mEndTime</name>
      <anchorfile>d2/dd7/classaikido_1_1trajectory_1_1BSpline.html</anchorfile>
      <anchor>a14744b0de35a4a0aeac81fe1cd64759c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CartesianProduct</name>
    <filename>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::CartesianProduct::State</class>
    <member kind="typedef">
      <type>CompoundStateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3791c3650aa4dc0919de8ab8e99e7da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CompoundStateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a5d3f8f42cb62d051bdf50ef3763855dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3df5ea23639b7b25da4e24c57a2e1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a43cc73f596bc15f2a59a374f161a255d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianProduct</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a7705255fb8bcca643be5df6be6e41fb1</anchor>
      <arglist>(std::vector&lt; ConstStateSpacePtr &gt; _subspaces)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a6c75558b14c543a025da0186f86fb1eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a1aa4b02d2a8cfccc0bce1c91354923d4</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSubspaces</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a775682676412d1e903ea7417f4b06336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; const Space &gt;</type>
      <name>getSubspace</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ac1fa63208cde66644e670c599b971d06</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a6e03b9a4f463c57774eb97e8d6b59683</anchor>
      <arglist>(State *_state, std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>const Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a116f636ab9f37177f7fbad45119e883c</anchor>
      <arglist>(const State *_state, std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandle</type>
      <name>getSubStateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a2311c94e80c83bef8c7bc342aa89373e</anchor>
      <arglist>(State *_state, std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandleConst</type>
      <name>getSubStateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ab98c29b2ed946520f7324a5abda2809d</anchor>
      <arglist>(const State *_state, std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aed1b565244d01557cf4c06f8bc5572d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a7f4cc59f646f76fc287e879f5b4c02ad</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aff54f5c62f680efd209d134b0a017d9a</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a0c9cb4f0f7f4506f722dd6f0df946c43</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3e8daae460d5a626d6b203d62c220d23</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>abdd47691c257d733640adb16fab50a3b</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a300b4dda49bb48b037bd87f0ed410ecf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a0f603892bbe0cabf310fdeeb53933a40</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aca5fced33955588037d846dc4ff24a97</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a1e2f90a0ee0110076f2d3dbfbed0f622</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>af64d2135d3b548a6015a8b758fecac93</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ConstStateSpacePtr &gt;</type>
      <name>mSubspaces</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a0a67ea1633b3129dd550e5cef5f5c1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>mOffsets</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ae07f5db7ea027905d4063aaa33b459fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mSizeInBytes</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a9610fa1d532e1c8343b33253f9535261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductProjectable</name>
    <filename>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</filename>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductProjectable</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>ad9fbf543af727bc8c705750aac0d5af8</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; ProjectablePtr &gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a45290e1536993e40f4956922bc2d5639</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a8e7f2d9f0842eb9a02f3b5b0a10bc745</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>ad8608f12533b424a779622bcf68aa7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ProjectablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a63293dde0bc3fa80789c90da7d601719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductSampleable</name>
    <filename>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductSampleable</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a27d577f88704a62f55a737ae12998af5</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; std::shared_ptr&lt; Sampleable &gt;&gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a291f9d2befd8386c99f7397adf39efb7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a8070b15735be2db8634ed00b0600f0f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a17aaa55c8ccad88610814b96a1f38247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::shared_ptr&lt; Sampleable &gt; &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a5ea192348ae631cf25c25ea11912d96b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductTestable</name>
    <filename>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductTestable</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>aa64cd59179bb5fc59b40cd0d98972025</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; ConstTestablePtr &gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a501d677b89cb4da77b1ff7d053d976fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a24f3167ad354b6739bfdb7cdb0511989</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a5c54e550d6b1f2ba331d36a96ffc9f3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a68ed3c3bd9704d564b716b51298d3c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ConstTestablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>ab78b131a33eb0ee2a75a7d29497176f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::CartesianProductWeighted</name>
    <filename>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductWeighted</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>aa33318e36573cc8a79d45e9ab0a7aeb7</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _space, std::vector&lt; DistanceMetricPtr &gt; _metrics)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianProductWeighted</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a7a4ab42568828f4596c86ff2f5081e58</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _space, std::vector&lt; std::pair&lt; DistanceMetricPtr, double &gt;&gt; _metrics)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a46e38dc1396f2e00b85fa1066d68cc11</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a8d002b937448ad0e73b213c6904b60de</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>aaf6e295594ce1818351718af2d204e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; DistanceMetricPtr, double &gt; &gt;</type>
      <name>mMetrics</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>ac161d106fcfa2932d020571ffd443dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::io::CatkinResourceRetriever</name>
    <filename>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</filename>
    <class kind="struct">aikido::io::CatkinResourceRetriever::Workspace</class>
    <member kind="function">
      <type></type>
      <name>CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>aaa3c8a6429dd2665f40ac8f6ea726e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a27e921efc03fe7526c677d0c2de6cc74</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;_delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a8b63d16a127ccbb58465a03c7fa23696</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a1961345a915eb126f56af6c6bde3f3b4</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) override</arglist>
    </member>
    <member kind="function">
      <type>dart::common::ResourcePtr</type>
      <name>retrieve</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a5432cf8a6cd7b3d64808445872f6ea56</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; Workspace &gt;</type>
      <name>getWorkspaces</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>aa785a0ce117169074e8d3a6c7854867a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>dart::common::Uri</type>
      <name>resolvePackageUri</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a163f0eca967bb089770f3858fd8ac535</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::common::ResourceRetrieverPtr</type>
      <name>mDelegate</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>aacbdf472b1b37019965811ba2fc8fbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Workspace &gt;</type>
      <name>mWorkspaces</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a2ca43b25c6cf6e320a402779243dd593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::CollisionFree</name>
    <filename>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>CollisionFree</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>add296a2e1efe3b49fb5acc5f8167479c</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr _metaskeleton, std::shared_ptr&lt;::dart::collision::CollisionDetector &gt; _collisionDetector, ::dart::collision::CollisionOption _collisionOptions=::dart::collision::CollisionOption(false, 1, std::make_shared&lt;::dart::collision::BodyNodeCollisionFilter &gt;()))</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>af8602cb208eda5f2117a40d034fdb0d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a5b326f9fdab7816374067f799607a6b4</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a037deffe4478550b47c14a9a9b12e87d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a3b586e17f1cf74bc8d2d2acb087b3a25</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group1, std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a0d7864908c1153119ad916dbe7a1d35c</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group1, std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a9e91fc490547e854c1bf7b9c4db60624</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a1999a50d5c629dfe5aa8694f18761e8d</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>::dart::collision::CollisionGroup</type>
      <name>CollisionGroup</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>acb160835578078305eeab79a5e22fb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a05d5f332277024a161b77d0ae9dde688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a92f50c60838b780be48accd43ab9942a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt;::dart::collision::CollisionDetector &gt;</type>
      <name>mCollisionDetector</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a37b52090bcb11d4069d6b10c6c1508d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionOption</type>
      <name>mCollisionOptions</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>abca9224a7a5ee4a0d160bcf8982f7c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; std::shared_ptr&lt; CollisionGroup &gt;, std::shared_ptr&lt; CollisionGroup &gt; &gt; &gt;</type>
      <name>mGroupsToPairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a4dcf5feca1c6e9e8d238966537dfa8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::shared_ptr&lt; CollisionGroup &gt; &gt;</type>
      <name>mGroupsToSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>ae5f1a6f8c0c892246ded13373edc4cae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::CollisionFreeOutcome</name>
    <filename>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</filename>
    <base>aikido::constraint::TestableOutcome</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a1882f5418611476cdcb68b30dbe8cdb6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>ad18edb8a233637d9a70b4607977ccc6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>ac03fa1f5c065a9821261919820b29bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>getPairwiseContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a290ffe3aa55d4e8ad8301f7e2d886f9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>getSelfContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a87cbc0400009e7039c0a2c2b6ca0a27b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCollisionObjectName</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a76854b1ceaaa546d885dc3fb20f9b32f</anchor>
      <arglist>(const ::dart::collision::CollisionObject *object) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>mPairwiseContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a1ba9ed81e15846bd30b8019b8f50cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>mSelfContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a48d8f9a5d9dbbe8050d98f6b1181a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollisionFree</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>aa17355bc414f840bda5593cb27be4f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::CompositePlanner</name>
    <filename>dd/db3/classaikido_1_1planner_1_1CompositePlanner.html</filename>
    <base>aikido::planner::Planner</base>
    <member kind="function">
      <type></type>
      <name>CompositePlanner</name>
      <anchorfile>dd/db3/classaikido_1_1planner_1_1CompositePlanner.html</anchorfile>
      <anchor>adeb67da841df26c6f74469526cf813f8</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, const std::vector&lt; PlannerPtr &gt; &amp;planners=std::vector&lt; PlannerPtr &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPlanner</name>
      <anchorfile>dd/db3/classaikido_1_1planner_1_1CompositePlanner.html</anchorfile>
      <anchor>a5475efddc2e2f077ea15eecb92a33f7d</anchor>
      <arglist>(const Planner &amp;planner) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSolve</name>
      <anchorfile>dd/db3/classaikido_1_1planner_1_1CompositePlanner.html</anchorfile>
      <anchor>a63b54739cba7f3ed25e4b2f658b63209</anchor>
      <arglist>(const Problem &amp;problem) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; PlannerPtr &gt;</type>
      <name>mPlanners</name>
      <anchorfile>dd/db3/classaikido_1_1planner_1_1CompositePlanner.html</anchorfile>
      <anchor>aa6031a64402d7b2f090894e7db5bf5c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CompoundStateHandle</name>
    <filename>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CompoundStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a408a402c89c5f30fc7fc6d1eac33a442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>ac8febdfc47896b25e2340e987562a8ff</anchor>
      <arglist>(const StateSpace *_space, State *_state)</arglist>
    </member>
    <member kind="function">
      <type>Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a634d47b9c71bfde572ee7640038d8057</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>const Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a15e157bb787c4d9cc4165c468e3fb829</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandle</type>
      <name>getSubStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a129c82558bddba44b724ad9829ab7021</anchor>
      <arglist>(std::size_t _index)</arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandleConst</type>
      <name>getSubStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>aa2f55553065a95c97780e5024e271e2d</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::ConcreteManipulator</name>
    <filename>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</filename>
    <base>aikido::robot::Manipulator</base>
    <member kind="function">
      <type></type>
      <name>ConcreteManipulator</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ad815f7f232fdd72c690e4e8e4f6ee6a3</anchor>
      <arglist>(RobotPtr robot, HandPtr hand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcreteManipulator</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a88516f499eaa65c5582fc1abd0cb501d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstHandPtr</type>
      <name>getHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aaff4db25127cb42080677596b87f2cf3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a976aa57f21a127cb1e350026deadc29e</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ad4ebfc80aff14d61da9071ae933b0d45</anchor>
      <arglist>(const std::string &amp;name) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a8454c44017f9bf83e51a52ec0e09e7c5</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ae7a172cfb38f8c0d62516dc3fa2436d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>afc465e8ae6f662cc827f170bbbfd7698</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a8cf4d664af96651e39ea835f591a89ea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a16554276fdf101c106c4e034f30727ae</anchor>
      <arglist>(Robot *robot) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a4d17d40e2f54d7aa7d594b081698e662</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a28082be098d38217a79a90aacbd3b7b0</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aa7b2138904118c6c5703126d19a61c0f</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree) const override</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1cec99fda9c4d6b7e686ff028d002451</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const constraint::dart::CollisionFreePtr &amp;collisionFree, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance, double angularTolerance)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planEndEffectorStraight</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aa24cdc5882a9bb773fe22d7a18914078</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const constraint::dart::CollisionFreePtr &amp;collisionFree, double distance, double timelimit, double positionTolerance, double angularTolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorFieldPlannerParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>abd88a6949cee7e4d2163be8d677e5ab4</anchor>
      <arglist>(const util::VectorFieldPlannerParameters &amp;vfParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCRRTPlannerParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1614d0a923e13aeefa083fe3bf161f15</anchor>
      <arglist>(const util::CRRTPlannerParameters &amp;crrtParameters)</arglist>
    </member>
    <member kind="function">
      <type>virtual ConstHandPtr</type>
      <name>getHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a6a8ef74707d2235111806c5884127f2a</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>HandPtr</type>
      <name>getHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ac155179fcd1bd1595225c475238772ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a725ddfbebf574061e66872d25b7b6489</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a075d293387c58992892f8548c60825e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>virtual aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aeacc2b1c8b14e52c6c525cedf2a077f3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a426955efece731eb9e1a5c4f97a93891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotPtr</type>
      <name>mRobot</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1d381c8ecd8b648372397abdca8d3f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandPtr</type>
      <name>mHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a066f0719283806f905588899e63390cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::VectorFieldPlannerParameters</type>
      <name>mVectorFieldParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1d027290dd7dbd5265fbd7f637ce301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::CRRTPlannerParameters</type>
      <name>mCRRTParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ab4b5182a17ecfe9ef49cace7a1f38c7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::ConcreteRobot</name>
    <filename>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</filename>
    <base>aikido::robot::Robot</base>
    <member kind="function">
      <type></type>
      <name>ConcreteRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afc5cdbec101664800ea4d1fd0aa05dc2</anchor>
      <arglist>(const std::string &amp;name, dart::dynamics::MetaSkeletonPtr metaSkeleton, bool simulation, aikido::common::UniqueRNGPtr rng, aikido::control::TrajectoryExecutorPtr trajectoryExecutor, dart::collision::CollisionDetectorPtr collisionDetector, std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt; selfCollisionFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcreteRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a23295cfbb07738840a87fe36ef04d18d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a869d08c1e2e1f48ef2149fcb561426f4</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ac003ab65248f873f0f064b8860ddcefa</anchor>
      <arglist>(const std::string &amp;name) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a44dca833cc463f97166bca12f628451b</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ad28f3b5b5cfee85cdf204f3ab7be1c4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a0677f5726cf7ed619e32035b4fafb161</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a1e805fa1a39b90089dc5948b41d3a925</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aa7bc5f3c21551d78b5a2843363147911</anchor>
      <arglist>(Robot *robot) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a99352e68faa59934f37a8ea6fb752587</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a54d84388736d0cc32561a2482f9a7104</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aeb4add9c1c3f0ea665d054d9ebef76d2</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree) const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; aikido::planner::TrajectoryPostProcessor &gt;</type>
      <name>getTrajectoryPostProcessor</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a201226285db98cbeee1e6ea1b0ac85fd</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const typename PostProcessor::Params &amp;postProcessorParams) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; aikido::planner::TrajectoryPostProcessor &gt;</type>
      <name>getTrajectoryPostProcessor</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a4b37c82cfc8939dd074bf3ef12d3adc6</anchor>
      <arglist>(const Eigen::VectorXd &amp;velocityLimits, const Eigen::VectorXd &amp;accelerationLimits, const typename PostProcessor::Params &amp;postProcessorParams) const</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueSplinePtr</type>
      <name>postProcessPath</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a106f5b5f65f146bdf9df0287a7e97c4c</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path, const constraint::TestablePtr &amp;constraint, const typename PostProcessor::Params &amp;postProcessorParams)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueSplinePtr</type>
      <name>postProcessPath</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ad3322c31166c0b52ed1d2d8e31ba9ba1</anchor>
      <arglist>(const Eigen::VectorXd &amp;velocityLimits, const Eigen::VectorXd &amp;accelerationLimits, const aikido::trajectory::Trajectory *path, const constraint::TestablePtr &amp;constraint, const typename PostProcessor::Params &amp;postProcessorParams)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a05c819255ca01884738d7824630e686e</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::statespace::StateSpace::State *goalState, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a83d144ce90fa99e01c5ef72c2683ddbe</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const Eigen::VectorXd &amp;goal, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a7103e7e6ab4598f2049aeb9b38847f3f</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; aikido::statespace::StateSpace::State * &gt; &amp;goalStates, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>af3fa82c6f2bdc2ea45407f76df0b1e34</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; Eigen::VectorXd &gt; &amp;goals, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToTSR</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a172e84dac584847e9c17ab5a61cc135f</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const aikido::constraint::dart::TSRPtr &amp;tsr, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit, std::size_t maxNumTrials, const distance::ConstConfigurationRankerPtr &amp;ranker=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>addd9173b5f9ada027b4bfa995506ee09</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const aikido::constraint::dart::TSRPtr &amp;goalTsr, const aikido::constraint::dart::TSRPtr &amp;constraintTsr, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToNamedConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ae13c96431315c4d033ecc07b3cb6b114</anchor>
      <arglist>(const std::string &amp;name, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCRRTPlannerParameters</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a83dd9317e549e465c294ba56c213664f</anchor>
      <arglist>(const util::CRRTPlannerParameters &amp;crrtParameters)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getVelocityLimits</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a491cd6ac9992799f95d7572a114c1109</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;metaSkeleton) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getAccelerationLimits</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a396be7caf03736727f8d09dfb1e6c657</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;metaSkeleton) const</arglist>
    </member>
    <member kind="function">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a725ddfbebf574061e66872d25b7b6489</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a075d293387c58992892f8548c60825e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>virtual aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aeacc2b1c8b14e52c6c525cedf2a077f3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a426955efece731eb9e1a5c4f97a93891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>ConfigurationMap</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afe55d65367f7885006ee3236f64319e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::unique_ptr&lt; aikido::common::RNG &gt;</type>
      <name>cloneRNG</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a8b2cbd23a5f8431ed309ecdd279005fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Robot *</type>
      <name>mRootRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a13a6e96ff4e965704051fa9a8def7bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ae2a61d9b2371a5d65ba4ba6d04194cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a502559638fd409e373535596bb63046c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ab42d761d9e6d9882561b1176f87afc4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mParentSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a2a5b9d9d9faaf649bac46ad816844dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aa8dcb22211d40d022d3a5d84caf0c478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; control::TrajectoryExecutor &gt;</type>
      <name>mTrajectoryExecutor</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a281a52fe856e2ecfddb5c2f30bf7ac7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConfigurationMap</type>
      <name>mNamedConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a4b937aa6bb5e7650408824b31e80cc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionDetectorPtr</type>
      <name>mCollisionDetector</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ac8d6bb3ff3fc0108deea576e008b4de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>mSelfCollisionFilter</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a76dad7cb89d4d91c7394279ed889f2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::CRRTPlannerParameters</type>
      <name>mCRRTParameters</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afab8012e237769ba2022cf5be38562ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::ConfigurationRanker</name>
    <filename>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigurationRanker</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>afc8c8fad678ac33b483954bd801a12de</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr metaSkeletonStateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, std::vector&lt; double &gt; weights=std::vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigurationRanker</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>a6c39c4bb55651e50dd085589dd0ad470</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rankConfigurations</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>a937d2ab0b79636ae6bde530c3c742f7c</anchor>
      <arglist>(std::vector&lt; statespace::dart::MetaSkeletonStateSpace::ScopedState &gt; &amp;configurations) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>evaluateConfiguration</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>aec2bc52e34b964f792547657f94e78b5</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpace::State *solution) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>aa0c653de4ce6ef265717a4bfdd9c9372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>aef9ef671a21f64a543aa025989111d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>distance::DistanceMetricPtr</type>
      <name>mDistanceMetric</name>
      <anchorfile>d8/d1c/classaikido_1_1distance_1_1ConfigurationRanker.html</anchorfile>
      <anchor>a0ddec719fee54e771b6aa839d4cc28f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ConfigurationToConfiguration</name>
    <filename>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfiguration</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a358fc87f091708560addddee34e0d9ad</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, const statespace::StateSpace::State *startState, const statespace::StateSpace::State *goalState, constraint::ConstTestablePtr constraint)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a6a4af90c32d930e68bf0aceb5745abf3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const statespace::StateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a34d406f0f60097e3887655c5805ace5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const statespace::StateSpace::State *</type>
      <name>getGoalState</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a93234e9525acde708ee3f138588ba5fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a19d987acf8c292bddcd3d000b6da8718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::StateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a15cc4bd0ea535b0f3c9ee0a27c5d5137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::StateSpace::ScopedState</type>
      <name>mGoalState</name>
      <anchorfile>df/db0/classaikido_1_1planner_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>abfb827621bcee283f7109b38928ef522</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToConfiguration</name>
    <filename>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfiguration</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a8aa125031d0c4260617b77d5100ee33d</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, const statespace::dart::MetaSkeletonStateSpace::State *goalState, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfiguration</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a919457c9d303c910df236d8bcd9c8665</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, const statespace::dart::MetaSkeletonStateSpace::State *startState, const statespace::dart::MetaSkeletonStateSpace::State *goalState, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a492d91b110879d07ea9853668e79a52f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const statespace::dart::MetaSkeletonStateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a748276eda5e3cc53581a027242db934a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const statespace::dart::MetaSkeletonStateSpace::State *</type>
      <name>getGoalState</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a9f8fb75875bc57db8cc7c04c67411d58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a219f4ec71a7d8e1b32831316a21c225b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a00156e7a4da6dcb500b78013aab9ae30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a422d4865f75a190bd8537a7f9023eb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>a0534c1e3d57c73e8508579c0841b0d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mGoalState</name>
      <anchorfile>d1/d7a/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration.html</anchorfile>
      <anchor>ae4933ff9f604e84be3e7afeec44767e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToConfiguration</name>
    <filename>d6/da8/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToConfiguration.html</filename>
    <base>PlannerAdapter&lt; planner::ConfigurationToConfigurationPlanner, planner::dart::ConfigurationToConfigurationPlanner &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfiguration_to_ConfigurationToConfiguration</name>
      <anchorfile>d6/da8/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToConfiguration.html</anchorfile>
      <anchor>af76298ea575d61d946718c396f3f315c</anchor>
      <arglist>(std::shared_ptr&lt; planner::ConfigurationToConfigurationPlanner &gt; planner, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d6/da8/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToConfiguration.html</anchorfile>
      <anchor>ab9c82a1b94577854350d2e39b373712c</anchor>
      <arglist>(const planner::dart::ConfigurationToConfiguration &amp;problem, Planner::Result *result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToTSR</name>
    <filename>d5/d20/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToTSR.html</filename>
    <base>PlannerAdapter&lt; aikido::planner::ConfigurationToConfigurationPlanner, ConfigurationToTSRPlanner &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfiguration_to_ConfigurationToTSR</name>
      <anchorfile>d5/d20/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToTSR.html</anchorfile>
      <anchor>a216e134f98c3e46cbcc2b0953cf0bf4d</anchor>
      <arglist>(std::shared_ptr&lt; aikido::planner::ConfigurationToConfigurationPlanner &gt; planner, ::dart::dynamics::MetaSkeletonPtr metaSkeleton, distance::ConstConfigurationRankerPtr configurationRanker=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d5/d20/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfiguration__to__ConfigurationToTSR.html</anchorfile>
      <anchor>ae103512816c67479506ea36ec5587a04</anchor>
      <arglist>(const ConfigurationToTSR &amp;problem, Planner::Result *result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ConfigurationToConfigurationPlanner</name>
    <filename>de/de7/classaikido_1_1planner_1_1ConfigurationToConfigurationPlanner.html</filename>
    <base>SingleProblemPlanner&lt; ConfigurationToConfigurationPlanner, ConfigurationToConfiguration &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfigurationPlanner</name>
      <anchorfile>de/de7/classaikido_1_1planner_1_1ConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>ac198e10c3cc9281c810794d53287581b</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>de/de7/classaikido_1_1planner_1_1ConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a5ea895fe7a4bd0d02d0538fca37a2268</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr)=0</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>de/de7/classaikido_1_1planner_1_1ConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>aacacd654d9b601d7e3507ecb059b081f</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) final override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToConfigurationPlanner</name>
    <filename>dc/d48/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfigurationPlanner.html</filename>
    <base>aikido::planner::dart::SingleProblemPlanner</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfigurationPlanner</name>
      <anchorfile>dc/d48/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a9938f6a3c814f1faa0cadcca57cdfced</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>dc/d48/classaikido_1_1planner_1_1dart_1_1ConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a4c6bc5a6d246fc7968a9549af28c7b2e</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ConfigurationToConfigurations</name>
    <filename>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="typedef">
      <type>std::vector&lt; const statespace::StateSpace::State * &gt;</type>
      <name>GoalStates</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a7215608a06021e33b03472e1a96c9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToConfigurations</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>af81913fc93e9115958c1cec2912f390f</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, const statespace::StateSpace::State *startState, const GoalStates &amp;goalStates, constraint::ConstTestablePtr constraint)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a31376494cda47c48525c4e0ab75756a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const statespace::StateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>adfd5e079bb57b79dd5e56490894eca0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumGoalStates</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a08ac9bb682072093b028da2a0cf44f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GoalStates</type>
      <name>getGoalStates</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a56ee79dae69243738f6c6bb2c352f218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a674bdb4814db9e7b992ae9a9c01a295d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::StateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>a30e9b34e6666e087271081032e3d6e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; statespace::StateSpace::ScopedState &gt;</type>
      <name>mGoalStates</name>
      <anchorfile>d6/d2f/classaikido_1_1planner_1_1ConfigurationToConfigurations.html</anchorfile>
      <anchor>ace6ddb3fc1d1520d22f1809e64b80ef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToEndEffectorOffset</name>
    <filename>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorOffset</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a8f6aec8dc354c3362ba8d63f67cdff4c</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, const Eigen::Vector3d &amp;direction, double signedDistance, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorOffset</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a85952f76cbc9a79fafe4a0cfbcaf0c11</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, const statespace::dart::MetaSkeletonStateSpace::State *startState, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, const Eigen::Vector3d &amp;direction, double signedDistance, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorOffset</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>af19ba328f884d08c220f4d15838ca4ae</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, double signedDistance, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorOffset</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a716c3eba263127cd384849cafc43881f</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, const statespace::dart::MetaSkeletonStateSpace::State *startState, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, double signedDistance, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>ada2d1ef2ac2ab1f8b7fbb90fdb6381d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::ConstBodyNodePtr</type>
      <name>getEndEffectorBodyNode</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a64d0b2dd85d586a7d3f4e7a86fb9d4d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const statespace::dart::MetaSkeletonStateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a2254d983752ab33a4573dfb0b269689f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getDirection</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a8bf4bbdf4d7dadc74b959845a3cde0ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistance</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>abe5d131c1b05441b6496c2ebd1c8f351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>abc18ad8e371e8899775d9cf49a81a192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a1165640de4c8f199e6b85302d770f237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a26f8754fac04ae9bf55c9eee4ddb3816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a59281f6928246a378839b9f3dd0ea814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ::dart::dynamics::ConstBodyNodePtr</type>
      <name>mEndEffectorBodyNode</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>ae6a04f52c83c31e15691db43d9417b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const boost::optional&lt; Eigen::Vector3d &gt;</type>
      <name>mDirection</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>a9b6b50f778ffd65c1fbdf0d1f314aef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>mDistance</name>
      <anchorfile>d4/d4a/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffset.html</anchorfile>
      <anchor>abe03dd1796e9da2547ccdf669dc0f04e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToEndEffectorOffsetPlanner</name>
    <filename>d4/db9/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffsetPlanner.html</filename>
    <base>SingleProblemPlanner&lt; ConfigurationToEndEffectorOffsetPlanner, ConfigurationToEndEffectorOffset &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorOffsetPlanner</name>
      <anchorfile>d4/db9/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>ad4a7ad8f3ca8909723f7cac91f78e03e</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d4/db9/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>adcbba356c028c103383e1333c0947c1d</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToEndEffectorPose</name>
    <filename>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorPose</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>afd6e534c138653cf257c3683b3dacf1e</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, const Eigen::Isometry3d &amp;goalPose, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToEndEffectorPose</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a70bfc413b907f2cb4f4108ebe69ff83f</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, const statespace::dart::MetaSkeletonStateSpace::State *startState, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, const Eigen::Isometry3d &amp;goalPose, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a53e8b100d552f350bccf5e99891147ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::ConstBodyNodePtr</type>
      <name>getEndEffectorBodyNode</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>aa3a26d5ba687a5389aa2908fb9a075b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const statespace::dart::MetaSkeletonStateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a9ea2c08efff4ee96df97af835a06457f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Isometry3d &amp;</type>
      <name>getGoalPose</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a18078ff041bae46c779628784521b4f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a2a7f895095f14af897ccfdc6f70d8468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>af54e3c43bf9f19be68897acde8d53b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>aef5bb1e964220c0644562e067f41fc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>a4e8a1e8840c7019ec46ecb7a9aef7019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ::dart::dynamics::ConstBodyNodePtr</type>
      <name>mEndEffectorBodyNode</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>af83109c5f7991a228e79b888ce6bf78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Eigen::Isometry3d</type>
      <name>mGoalPose</name>
      <anchorfile>d2/d46/classaikido_1_1planner_1_1dart_1_1ConfigurationToEndEffectorPose.html</anchorfile>
      <anchor>ad0aee9190748ab42b0a331c2b262d969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToTSR</name>
    <filename>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</filename>
    <base>aikido::planner::Problem</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationToTSR</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a5e1d36cc33d4f17554e69a22328fe8fe</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, std::size_t maxSamples, constraint::dart::ConstTSRPtr goalTSR, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationToTSR</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>ab130bcea5cdfc42a8c816353e3071238</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, const statespace::dart::MetaSkeletonStateSpace::State *startState, ::dart::dynamics::ConstBodyNodePtr endEffectorBodyNode, std::size_t maxSamples, constraint::dart::ConstTSRPtr goalTSR, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a107f20f620fe22c489d4c73c84e0298b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::ConstBodyNodePtr</type>
      <name>getEndEffectorBodyNode</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>adc02e40bf11cd8d584ae91d0d46ec363</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getMaxSamples</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a0d30b4bf3f1351f528039dad13ac96eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const statespace::dart::MetaSkeletonStateSpace::State *</type>
      <name>getStartState</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a6569666febac8a678810cf53ac153e9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constraint::dart::ConstTSRPtr</type>
      <name>getGoalTSR</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a545d85fc69e0e47c51cb8ba56b167cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getStaticType</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a50da61a800ef69f4f3703275c4c846e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>ae0152186d8ecad7544cf4e0f79d7dfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>aabafce0d40a5ef5712a861e83e024354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mStartState</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>ae4a6ae8a149c8bbbb3a5051edba6d220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ::dart::dynamics::ConstBodyNodePtr</type>
      <name>mEndEffectorBodyNode</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>a871c0ebcd216f8e19a43aba51059c417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>mMaxSamples</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>aa597c9a142f58f007aa8ce4cecb1a986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const constraint::dart::ConstTSRPtr</type>
      <name>mGoalTSR</name>
      <anchorfile>d8/d8e/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSR.html</anchorfile>
      <anchor>afbd1f431e0b3aae260e367928272ef31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::ConfigurationToTSRPlanner</name>
    <filename>d4/d5d/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSRPlanner.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigurationToTSRPlanner</name>
      <anchorfile>d4/d5d/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSRPlanner.html</anchorfile>
      <anchor>a8ced543d767ce5bd921fe84473ece4c6</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton, distance::ConstConfigurationRankerPtr configurationRanker=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d4/d5d/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSRPlanner.html</anchorfile>
      <anchor>a16c33515ec4a07ef11c6ca4a18fd1506</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>distance::ConstConfigurationRankerPtr</type>
      <name>mConfigurationRanker</name>
      <anchorfile>d4/d5d/classaikido_1_1planner_1_1dart_1_1ConfigurationToTSRPlanner.html</anchorfile>
      <anchor>af34e5bdd15a6157e6275d0f5212d1999</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::StepSequence::const_iterator</name>
    <filename>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</filename>
    <member kind="function">
      <type>double</type>
      <name>dereference</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a3b99f68a1da9ed82b75a8e0367e19a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a815c7173c4d0b085059e273c2787bdf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a2d8e1cd6d299e24d94fcf6fe280ab278</anchor>
      <arglist>(const StepSequence::const_iterator &amp;other) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a4f73d111bd81ccec24e04f2f654ab2bd</anchor>
      <arglist>(const StepSequence &amp;seq, std::size_t step)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const StepSequence &amp;</type>
      <name>mSeq</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>af303dbde76db504361a2cb753dfb2055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mStep</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>aa0b2ddfd6a0b251375b1813705b7a7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mValue</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>aa44b316b0cc444171c6a9ab787090dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StepSequence</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>adc10d5963404733770b076e67ee4dbd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::VanDerCorput::const_iterator</name>
    <filename>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</filename>
    <member kind="function">
      <type>double</type>
      <name>dereference</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>aaa5f59f210d778eaef79f2bbaad4d901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>afbbabda6e6e3f1d9bfe9b8cb2719e535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a37450cb87235580a2befad2355846019</anchor>
      <arglist>(const VanDerCorput::const_iterator &amp;other) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a508d4b43fbe3be3f52f437a0b276076e</anchor>
      <arglist>(const VanDerCorput *seq)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VanDerCorput *</type>
      <name>mSeq</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a106cfa23a6706b12dbc6843f27c75e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mN</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a39f98123ee2a8d0e71bd0e42772115f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mFinalIter</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>ab5f98f43239557c8db2cd0f9bb3eebc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>mCurr</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a41ec327a3b056ddcc4bb0790cf0b28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VanDerCorput</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a129883e7a33213fad30b37229c1770ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;</type>
      <name>MatrixType</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a8465f040506bd76e09328abee28f6892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MatrixType::Index</type>
      <name>Index</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a9618c65dff472d3e6b3b63f5ae7a847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a2f4f387835df42ca87f5d1b1cf60dfa9</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a3e6b7aa9c8112f87f4ed8e282614f2c6</anchor>
      <arglist>(const YAML::Node &amp;node, MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</name>
    <filename>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Mode</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt;</type>
      <name>TransformType</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>a08b86af0b5b84a73d3fed6bcc434533d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TransformType::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>af254fc2bdeb01b5b48008a7cc410cb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>ae005f5c29cbbfbda72f48566c7bbfe82</anchor>
      <arglist>(const TransformType &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>a9de160fbb870be1838ad57ed50c1f609</anchor>
      <arglist>(const Node &amp;node, TransformType &amp;transform)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</name>
    <filename>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt;</type>
      <name>UnorderedMap</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>a1ed108aa27428a4707c9b50f8bb8ecf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>a9090a6dbf794de5a8bdf7a249bf9312d</anchor>
      <arglist>(const UnorderedMap &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>ac12660d7433969838259102dbbae855d</anchor>
      <arglist>(const Node &amp;node, UnorderedMap &amp;map)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl</name>
    <filename>d9/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>df/dad/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01states0ffc4173cce3631b9784b5b5ec4f0a17.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>df/dad/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01states0ffc4173cce3631b9784b5b5ec4f0a17.html</anchorfile>
      <anchor>a6247642746a0a7b03d64be444ecba05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>df/dad/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01states0ffc4173cce3631b9784b5b5ec4f0a17.html</anchorfile>
      <anchor>a6562c370d8d305b706aec8d362a493ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>df/dad/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01states0ffc4173cce3631b9784b5b5ec4f0a17.html</anchorfile>
      <anchor>a74c75c8379160f0853e52e8afb03ee5c</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE2Joint &gt;</name>
    <filename>d0/da8/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d0/da8/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a4d98c2793d011c5b1ac557b67bc64d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d0/da8/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a14ab752320df91506b8adcd492744307</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d0/da8/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a30021d662e8f3a384eed400c05fe10e5</anchor>
      <arglist>(ConstStateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE3Joint &gt;</name>
    <filename>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a93abf74cda46692b1f46efc215b01db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a0940e6e28b4251c3cec33c3587ab91e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>aa3d993ab640ec2efa03d00d05d1f8bf7</anchor>
      <arglist>(ConstStateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO2Joint &gt;</name>
    <filename>dd/df5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>dd/df5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a8e2d0f8ba9a4d511fca94c5e67bc628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>dd/df5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>aef5db7db696d4cec20d5eccc723baaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>dd/df5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ac86615b597b6fdc78b2d8ebd21709ab0</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO3Joint &gt;</name>
    <filename>d4/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d4/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a4a18fe7d62fef1aa86e88b81524fbad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d4/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>af06c593f3bf698c775ab7c416813fd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d4/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a2a9b33ff23c992bfd98a1b4de456566b</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::WeldJoint &gt;</name>
    <filename>dc/dc0/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>dc/dc0/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a8c9a4c01fe863aff5c2265bd6dfb3900</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>dc/dc0/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>aafb551d700343be79798616c816ebf85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>dc/dc0/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a733a63276973a6417795ca25ef04b03f</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl</name>
    <filename>d4/d14/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::CartesianProduct &gt;</name>
    <filename>d1/d7a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1CartesianProduct_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d1/d7a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1CartesianProduct_01_4.html</anchorfile>
      <anchor>a1f57dbfe3cf4077943410817d40a6d7f</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R0 &gt;</name>
    <filename>d8/d9e/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R0_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d8/d9e/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R0_01_4.html</anchorfile>
      <anchor>aa8f07770ad91c2c498eb7c93836a52a9</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R0 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R1 &gt;</name>
    <filename>d4/df2/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R1_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/df2/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R1_01_4.html</anchorfile>
      <anchor>a1736939cc737c1411b65b1bc9e971caf</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R1 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R2 &gt;</name>
    <filename>dd/dc1/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>dd/dc1/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R2_01_4.html</anchorfile>
      <anchor>a27aaa2434fe4f15ae7d0dcf7f923ee94</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R3 &gt;</name>
    <filename>db/d96/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R3_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>db/d96/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R3_01_4.html</anchorfile>
      <anchor>ae2de940ddc9cc2441775724e68bb67f5</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R3 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R6 &gt;</name>
    <filename>de/d60/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R6_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>de/d60/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1R6_01_4.html</anchorfile>
      <anchor>a6e309b35c6cc12a898ead10184ffb0c8</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R6 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SE2 &gt;</name>
    <filename>d1/d1a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SE2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d1/d1a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SE2_01_4.html</anchorfile>
      <anchor>a4e4f81939cf095b75ae46c3a6bba272e</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SE2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO2 &gt;</name>
    <filename>da/da0/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SO2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>da/da0/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SO2_01_4.html</anchorfile>
      <anchor>a4e20e4b7200744b62e843e9acca2d239</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO3 &gt;</name>
    <filename>de/d98/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SO3_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>de/d98/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01const_01statespace_1_1SO3_01_4.html</anchorfile>
      <anchor>a8f0bee4bbd00b03915edcdba890327b2</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO3 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl</name>
    <filename>da/d97/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</name>
    <filename>d7/de7/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1d5980ecfad8076ad93a8b9bf301763eb0.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d7/de7/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1d5980ecfad8076ad93a8b9bf301763eb0.html</anchorfile>
      <anchor>a194311934fa5b2b53c82daab48231b81</anchor>
      <arglist>(const ::dart::dynamics::BallJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</name>
    <filename>d4/d22/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df2a2b605ea7e1e903263bc99e27f6a59.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/d22/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df2a2b605ea7e1e903263bc99e27f6a59.html</anchorfile>
      <anchor>a01cef2ecf653cdecb1e3e90c2df4b730</anchor>
      <arglist>(const ::dart::dynamics::FreeJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</name>
    <filename>db/dd0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dc35b3420907431c495f31411a51c02a8.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>db/dd0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dc35b3420907431c495f31411a51c02a8.html</anchorfile>
      <anchor>a72bbec44db4754dc81f5fe6e37ebbf94</anchor>
      <arglist>(const ::dart::dynamics::PlanarJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</name>
    <filename>d7/df0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df0cd567572cb219a515886b7bcb84ca3.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d7/df0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df0cd567572cb219a515886b7bcb84ca3.html</anchorfile>
      <anchor>a0346d1b9cfef2f9ad7b4d82ccb6ebea1</anchor>
      <arglist>(const ::dart::dynamics::PrismaticJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</name>
    <filename>d1/d08/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dcd02bff845f57b869a00eb38ea408e96.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d1/d08/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dcd02bff845f57b869a00eb38ea408e96.html</anchorfile>
      <anchor>a5f7d78a37386e79b40999bf0145a95ba</anchor>
      <arglist>(const ::dart::dynamics::RevoluteJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</name>
    <filename>df/d87/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df720fd0edc05c102198e1191d470375a.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>df/d87/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df720fd0edc05c102198e1191d470375a.html</anchorfile>
      <anchor>a7dd058cea2720d54793f0ec415f5a2dd</anchor>
      <arglist>(const ::dart::dynamics::TranslationalJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</name>
    <filename>d4/d12/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1db6a9d2571d69f6f7ff47d182e65f5577.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/d12/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1db6a9d2571d69f6f7ff47d182e65f5577.html</anchorfile>
      <anchor>a0ef93c39914a2ef315e1af89cce0eda1</anchor>
      <arglist>(const ::dart::dynamics::WeldJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl</name>
    <filename>d0/d90/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>d8/d52/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespac104f0c2fe193e77e901b72e467421e72.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>d8/d52/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespac104f0c2fe193e77e901b72e467421e72.html</anchorfile>
      <anchor>aa42b7b0e7c253bfce00ac401f8972f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d8/d52/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespac104f0c2fe193e77e901b72e467421e72.html</anchorfile>
      <anchor>a59b6df42e933f27bef589ffec3bd8334</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>d8/d52/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespac104f0c2fe193e77e901b72e467421e72.html</anchorfile>
      <anchor>a47958c11cc05d1608122ee85d14f6a3f</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE2Joint &gt;</name>
    <filename>df/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>df/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a87c6bc4e4c6bcc362598900afdbfb0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>df/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a516042655c83b53db90d12c62b841063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>df/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a40ac4af55a9e1557f178902faadebf0a</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE3Joint &gt;</name>
    <filename>d7/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d7/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a9012ace272aa579e9ea69ebaba8a0483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d7/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a16445582223f7e8183e5588d0c693240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>d7/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>afe9737601d75ee7f573a04818efa60b5</anchor>
      <arglist>(ConstStateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO2Joint &gt;</name>
    <filename>df/d1b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>df/d1b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>aff0d90f5fd4d11165b046699ddf73aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>df/d1b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a9a5a82ae4944093183b95190f33508b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>df/d1b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a382bff9cc77b5220918497423a28b655</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO3Joint &gt;</name>
    <filename>d8/d8e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d8/d8e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a8eda2a86273b687b9974152dbc3757d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d8/d8e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a5bff970a42d5bfdfe60667887bad3207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>d8/d8e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>ad063fdebdd90938c1cce3b33fdce7164</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::WeldJoint &gt;</name>
    <filename>df/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>df/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>acf5df73cb4d222593e70d2519508c3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>df/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>aa1d81f778a5bf618222fcff1d72e583e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>df/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a7f08efc85ee0c75ea5c4acf4acdc4f5b</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl</name>
    <filename>dd/dc6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>d8/d26/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace6690648b3756fb18883af81ec36e901d.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>d8/d26/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace6690648b3756fb18883af81ec36e901d.html</anchorfile>
      <anchor>a67efb068e621c56923de9898902bcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d8/d26/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace6690648b3756fb18883af81ec36e901d.html</anchorfile>
      <anchor>af56d32578542f487b7d62a61a265d7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d8/d26/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace6690648b3756fb18883af81ec36e901d.html</anchorfile>
      <anchor>af835e9af81b34b9141dfaf06e9f1b396</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE2Joint &gt;</name>
    <filename>d0/daa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d0/daa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a74d95f8cab6d23c925d74fe99e4a1ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d0/daa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>ac2a386171a96bb4c10a82ccb9bd74c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d0/daa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a3e5bf48820cc6f7c102c9ebb2756029e</anchor>
      <arglist>(ConstStateSpacePtr stateSpace, std::unique_ptr&lt; common::RNG &gt; rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE3Joint &gt;</name>
    <filename>db/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a277b6f276332e189e74d22ca0bed302a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>db/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a301cb0570233230e17f8a2a47fa3dff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>db/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a2906d267178d897f03e0b355fe68fccc</anchor>
      <arglist>(ConstStateSpacePtr, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO2Joint &gt;</name>
    <filename>d7/d46/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d7/d46/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a042b37dee0676300de2075c334bc85eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d7/d46/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a7f8fba81a4521b7403571f534c5092ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d7/d46/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a586f419fa6870000cbd40bd7344964ce</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO3Joint &gt;</name>
    <filename>db/db3/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/db3/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a4efefc6429a934ac42015bab2a9a97cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>db/db3/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>aec36d8cae487b5040aa2e82494573de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>db/db3/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>aacd2628b8a99c7c2243a7c19c0c82c35</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::WeldJoint &gt;</name>
    <filename>da/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>da/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a6bde2f89a86d88e9e036a8ade6c207ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>da/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>aa6a315a6df6f80c335770524b0d5db07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>da/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>ae5d9b2ceff73c28312e13be52a17d6cd</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl</name>
    <filename>d0/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>d3/dd2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1d6c6b1e11fb733e4c904186ed8f5a68e.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>d3/dd2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1d6c6b1e11fb733e4c904186ed8f5a68e.html</anchorfile>
      <anchor>a8ac8258b7131f8fc36c1d9863711e6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d3/dd2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1d6c6b1e11fb733e4c904186ed8f5a68e.html</anchorfile>
      <anchor>a8e99c3b8696db551ecdd9725528e3cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d3/dd2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1d6c6b1e11fb733e4c904186ed8f5a68e.html</anchorfile>
      <anchor>aaa227ae5ab952893303d75f7e771c18f</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE2Joint &gt;</name>
    <filename>d8/d2c/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d8/d2c/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a4ea2cd5f1ac5bf8d9ab2ce9e41819207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d8/d2c/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>aa2073c01b9f8cb392979b1dd919d521e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d8/d2c/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>af67f5df56d29d3184f54d8264359a346</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE3Joint &gt;</name>
    <filename>de/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>de/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a6e87b6e243d80d17cfa7c472a26e2aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>de/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>ab321a1d0edfb2fcef49588a468cd6d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>de/d43/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a100400bc30f779eeeb65097ea41dd5d0</anchor>
      <arglist>(ConstStateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO2Joint &gt;</name>
    <filename>d1/d1f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d1/d1f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a0ddee50a6f5b75e6c119d44163439acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d1/d1f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a154b187b1890351742b1f74906f4ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d1/d1f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a528f0a06948e6311cfd33d30c7033398</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO3Joint &gt;</name>
    <filename>d2/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d2/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a647c2cadf7d1caec499a9a2010fe99f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d2/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>ae847216085571c2808258694334e96ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d2/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>acde85ad20c9329683213ab8d182bcb42</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::WeldJoint &gt;</name>
    <filename>dc/d14/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>dc/d14/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a36c78c0ac5cdf03931e8520c99a06a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>dc/d14/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>ad77a43c98cf7802b7167d70da2000247</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>dc/d14/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01const_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a10bc90648249eb17b99cac5a2eedb480</anchor>
      <arglist>(ConstStateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRT</name>
    <filename>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</filename>
    <class kind="class">aikido::planner::ompl::CRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a12b8ef609569f7becc2e2a948d56ca75</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a0ede66ec2ed2043da8a79cedc3cec2e0</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, const std::string &amp;_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a94c596297e1f303fd6ba3308126d766e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>aa3472f807b4e5010a7414c2aa9e3711c</anchor>
      <arglist>(::ompl::base::PlannerData &amp;_data) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a7be89c1b0e0fe146502be923f0b14735</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;_ptc) override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6cc9cfac7ea24f94ac2a84601fde7b49</anchor>
      <arglist>(double _solveTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab072f567c2cb5cd40e1bdc1b6b772b91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab9968eee53308e4e053e26be6804ece7</anchor>
      <arglist>(double _goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ae90f6bce2a0e7221c4f988fac9685536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6ba1fe219cdd71373868b290cd2139c6</anchor>
      <arglist>(double _distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ae956a1b79b3aaf13f7800a107185476f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPathConstraint</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>af74e8a18d69e9b42ec4d10d157cb8cd9</anchor>
      <arglist>(constraint::ProjectablePtr _projectable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionResolution</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a5e10fc9e220e7016d06d196e2652200f</anchor>
      <arglist>(double _resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProjectionResolution</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a0e02d2b64d5f08982af3dce546d3ee10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinStateDifference</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>acc3fd006bd99c3d9444f79fbe449c6f8</anchor>
      <arglist>(double _mindist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinStateDifference</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a59b23f638f43a713ccf2f9b40f81dc30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a8efdd027f9e9c52789a2492052316a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a5c54d3a5b4f1245dd2a0d8b9b128ce9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ompl_shared_ptr&lt;::ompl::NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>TreeData</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a840f7a7e3109609348adace2b1920101</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>freeMemory</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a2a51714cf81d6c586e2025333e0323f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>abbceef8abf2ed46f4fb3e288610e389c</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>constrainedExtend</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a321aba7d01931e7f33765e2acf002039</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;ptc, TreeData &amp;tree, Motion *nmotion, ::ompl::base::State *gstate, ::ompl::base::State *xstate, ::ompl::base::Goal *goal, bool returnlast, double &amp;dist, bool &amp;foundgoal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>mStartTree</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a9c2e30d4a46e49dd7681613fe447dee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ompl::base::StateSamplerPtr</type>
      <name>mSampler</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a87b86ff84ada6d240d63e28de0077e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab33f809901205104f2d47fd9c0984a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxDistance</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a849baf0da929f65fb88ddf38c5135b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ompl::RNG</type>
      <name>mRng</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6a59c2101a468e469304f2ecf7a3961a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>mLastGoalMotion</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ae6cd73b3ea5126c27da802dc040582ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>constraint::ProjectablePtr</type>
      <name>mCons</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a9b04f9af68ebe95495b78e7030c02e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxStepsize</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab54bccab802c95a1f4c3cf1a87461ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMinStepsize</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a06a8801141adcff3d2a69264bd0c5db2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRTConnect</name>
    <filename>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</filename>
    <base>aikido::planner::ompl::CRRT</base>
    <member kind="function">
      <type></type>
      <name>CRRTConnect</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a07eb41eef7c1ef5d517867a10c27437a</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CRRTConnect</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>afb57e9d7953b732d87ba0b048e74e927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>aad40e65081b1124e293b36a1e85dfaf0</anchor>
      <arglist>(::ompl::base::PlannerData &amp;_data) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a5155719a6830ab904d1413054ecf2706</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;_ptc) override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3e876f49260f19592a95e82a8962dd76</anchor>
      <arglist>(double _solveTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>aae616cfe61a7814b74c3829e7149c11c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3c557081c00c23b8cdecca47cd839916</anchor>
      <arglist>(double _radius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>abe0c779fab4a73eb24e4e8b09222c7ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3deaa08e88cdc13cd9fe69830d12cd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a01e87f36b4708badcf1b5033e25dc4ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a781210c45e48a63645094a406cd8ce7c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>mGoalTree</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a02b2a5d12912a05cf4abaf69ac36b737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>ab751752825c651e4408932ac081dedd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt;::ompl::base::State *, ::ompl::base::State * &gt;</type>
      <name>mConnectionPoint</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>abeb3535b149b7c5a1cd6770d5fa091cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::util::CRRTPlannerParameters</name>
    <filename>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>CRRTPlannerParameters</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a55f4a5856beda8770bf779cbcf07d156</anchor>
      <arglist>(common::RNG *rng=nullptr, std::size_t maxNumTrials=5, double maxExtensionDistance=std::numeric_limits&lt; double &gt;::infinity(), double maxDistanceBtwProjections=0.1, double minStepSize=0.05, double minTreeConnectionDistance=0.1, std::size_t projectionMaxIteration=20, double projectionTolerance=1e-4)</arglist>
    </member>
    <member kind="variable">
      <type>common::RNG *</type>
      <name>rng</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a2cecb8a41ecf762190a8bfd297183a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxNumTrials</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>ad6f051c4b3fe66f399a89b525282d880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxExtensionDistance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a18853502f89986343dce8f299fda0575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxDistanceBtwProjections</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a1c0855000763cafe48c67a22eda86a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minStepSize</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a727f1a9fcbe94e9aede3056b694496b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minTreeConnectionDistance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a1945c3aac71241f36eae6e079689e02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>projectionMaxIteration</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a056305e47474b109c065bdf032a32886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>projectionTolerance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a496561503d34536b6589f0b57fa162b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CyclicSampleable</name>
    <filename>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>CyclicSampleable</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a76decf40ee5501f5c7503ebd9739e125</anchor>
      <arglist>(SampleablePtr _sampleable)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a52f0083762717e0786516829d1ce2ba2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a4a0f6df5d09881cbd24e8497161dcbf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSampleable</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a79ec705d77a607196111ad15033f7d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>ac42015c5f9e5d9f1914ba18968d4595b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DefaultTestableOutcome</name>
    <filename>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</filename>
    <base>aikido::constraint::TestableOutcome</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a893f3e43ffcfac214d1faffcaf0a342b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a920a900b4b0083af362620441a26eced</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSatisfiedFlag</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>adbec6eb1217e9d6fe7ab05970e6942b6</anchor>
      <arglist>(bool satisfiedFlag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSatisfiedFlag</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a2ed7f25c6adbc1740665136e97d32ea8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::DetectedObject</name>
    <filename>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</filename>
    <member kind="function">
      <type></type>
      <name>DetectedObject</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>af19eeeacd1b7bc9d16cb448fe2613847</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DetectedObject</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a919d438edc76f59f160fbab492a10686</anchor>
      <arglist>(const std::string &amp;objectName, const int &amp;objectId, const std::string &amp;detectionFrameID, const std::string &amp;yamlStr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DetectedObject</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a50e3476beb761d0a2b2621489c44b2da</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUid</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>afc72dc288837853704997cd3d813bffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAssetKey</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a57f98042a847d00ea9ebf42f7b618bea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDetectionFrameID</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a54c98aad787bd157eac11d78f49710d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a816b1600742227a5210fd8a934dfcdd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>getYamlNode</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a74444656b2b4e9be6a4c090dd4f839ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a8afce671a942ec4912eb14731c130739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetaSkeleton</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>ad22a75cb84b90f4e1b6d8bc5bc3a9306</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getInfoByKey</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a1ede007d74ef40e2b6d8e762ea944e31</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mObjectName</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>acb10bcf5ee5ad000a76b924b0d3a4272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mUid</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a86655aff8fa47b2cc75a6c404b437f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mAssetKey</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>af4b56d3b92656078659b3d4e060ed63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mDetectionFrameID</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a4e76178aba5955e1f8369701e983c8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>YAML::Node</type>
      <name>mYamlNode</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>a76c8a1dff49d127a2129dddba87381be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>dd/d05/classaikido_1_1perception_1_1DetectedObject.html</anchorfile>
      <anchor>ac0c59c499610a3da4cbaffb694c9698e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Differentiable</name>
    <filename>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Differentiable</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>af57231c107b176905efae5142dcadc1a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>ac779d1bb27de0e532258363c71ed3355</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>ae765cd0fb411bdb71ca0b19b4ee95c74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>a0822cfc8ff95cd25c95df139450f265f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getValue</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>a58b5a9753b25dd3a2ad72edf50da6f2e</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getJacobian</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>aec4646b8dd435851873ec30bbec277a4</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>a28ea8b5fffd9852b481d83e4df480cc0</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DifferentiableIntersection</name>
    <filename>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>DifferentiableIntersection</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a640cd386bcad5ec1265280ebebce716f</anchor>
      <arglist>(std::vector&lt; DifferentiablePtr &gt; _constraints, statespace::ConstStateSpacePtr _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aea2fe79b898751d2a9add1d8d730ff81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aa500ec60be5d36efaaba549a80b0a691</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a7ac6f49b44125e416d64c7f79b0da40d</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a3548568c2b12c54e481b91b0dbd14cf0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a0a3971d33b9703bd4d4471c3da2d51e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aeed69d06bf32b3782aa6dcbdb7f372eb</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; DifferentiablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a29d7f7fa3a65da49bf744d89d6d5972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a324a0157066661a858e1710b6688ac20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DifferentiableSubspace</name>
    <filename>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>DifferentiableSubspace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>aff4382a61989ebd774bc763ac917176c</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::CartesianProduct &gt; _stateSpace, DifferentiablePtr _constraint, std::size_t _index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferentiableSubspace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a1e323eb161c98dab6105576421a3e3de</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a090c7151d5db38f2571c3ef4735ab5aa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>aa36256f5a25686f2b4a0baed35114d7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a457ba79db971a9d66d0ead7ec31adcca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a0a1850d5b62358cd0991a29ff48e7758</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a94f2870395dd053abce407dc6cfd6ce1</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a87ef331aab73638b5f40b2270e262b64</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a969a8d4c3d1a2e01855606f4636e6085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mConstraint</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a7f315d64207e66f2fe99d5f6f8c8c2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mIndex</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>ab5a74af7fee0afeaf4227e65e0f8903e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::DistanceMetric</name>
    <filename>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceMetric</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>af5faeff37a5c85d12431965ed7115d48</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>a7c325a308f8c6c9e8a841e34a1371cf6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>a71fc6abe4d2a1c33f42c2876401b0e74</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory</name>
    <filename>dd/dd2/structaikido_1_1common_1_1DynamicCastFactory.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args... &gt; &gt;</name>
    <filename>d1/d00/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01cod52411feef177dc55526b72ac13528fb.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>create</name>
      <anchorfile>d1/d00/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01cod52411feef177dc55526b72ac13528fb.html</anchorfile>
      <anchor>a59f1b64a4c304ce04c15de9fa7b228cc</anchor>
      <arglist>(typename Pointer&lt; BaseParameter &gt;::type _base, Parameters &amp;&amp;... _params) -&gt; decltype(Factory&lt; Arg &gt;::create(Pointer&lt; BaseParameter &gt;::template cast&lt; Arg &gt;(_base), std::forward&lt; Parameters &gt;(_params)...))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</name>
    <filename>d1/dbd/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01common_1_1type__list_3_4_01_4.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::nullptr_t</type>
      <name>create</name>
      <anchorfile>d1/dbd/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01common_1_1type__list_3_4_01_4.html</anchorfile>
      <anchor>ad0200c9949f7e1df374c8dcda8c296ab</anchor>
      <arglist>(typename Pointer&lt; BaseParameter &gt;::type, Parameters &amp;&amp;...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory_raw_ptr</name>
    <filename>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Pointee *</type>
      <name>type</name>
      <anchorfile>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</anchorfile>
      <anchor>a48c65efc6f03540d7c73c2037f55fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived *</type>
      <name>cast</name>
      <anchorfile>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</anchorfile>
      <anchor>ad5eac576026dbe20af90503fb8c0546d</anchor>
      <arglist>(Pointee *_pointer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory_shared_ptr</name>
    <filename>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Pointee &gt;</type>
      <name>type</name>
      <anchorfile>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</anchorfile>
      <anchor>a0883b4c25ee8e55ef7a6ff7f277f8b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Derived &gt;</type>
      <name>cast</name>
      <anchorfile>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</anchorfile>
      <anchor>ad8e42fc865aaa5c021adb260aaf2e5a5</anchor>
      <arglist>(std::shared_ptr&lt; Pointee &gt; _pointer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl</name>
    <filename>d2/d45/structaikido_1_1io_1_1detail_1_1encode__impl.html</filename>
    <templarg></templarg>
    <templarg>IsVectorAtCompileTime</templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</name>
    <filename>d0/d42/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static YAML::Node</type>
      <name>encode</name>
      <anchorfile>d0/d42/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01false_01_4.html</anchorfile>
      <anchor>a6ae95b604049d5ac88c4b1315cd2684f</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</name>
    <filename>d3/d2f/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static YAML::Node</type>
      <name>encode</name>
      <anchorfile>d3/d2f/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01true_01_4.html</anchorfile>
      <anchor>a438e434c7ae9f35ea2f310d29caf39f2</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::ExecutorMultiplexer</name>
    <filename>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</filename>
    <member kind="function">
      <type></type>
      <name>ExecutorMultiplexer</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a913e011a340fee2dbc7d720314da1302</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExecutorMultiplexer</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a257723570aa5bdaf920a830da087f5e4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a0a73b152eec8c5123f3e1921d8efbd98</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a9ece5784195a32ad3201c44b0144bc42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>ac7e0e2fc9858feeebafe80b1ef250fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a9dee413b940aabecc6d95c5413b9c7b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a10bccbd3161c5c18e7090e51984c3ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>ab49eb079b555facd41299ccae2e2c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::function&lt; void()&gt; &gt;</type>
      <name>mCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>abfe90b3dab4b99e82359c54d7e4008b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::ExecutorThread</name>
    <filename>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</filename>
    <member kind="function">
      <type></type>
      <name>ExecutorThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae5d77d74d469a5b97512cceaa4b6915f</anchor>
      <arglist>(std::function&lt; void()&gt; callback, const Duration &amp;period)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExecutorThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a682e106f2b3754bdddfa6b1d4bf64366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a48857edaa51b679ef20da82fe60a5ec2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a4f483324de5494de515e4ebb054f7bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>spin</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a338f0d61beefb9cf2c5ae8b93e20bd53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::function&lt; void()&gt;</type>
      <name>mCallback</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a50d4eb6663507f96cd4af73d4d1f4ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mPeriod</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae37dccde1418fda579cadf4298bc2033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic&lt; bool &gt;</type>
      <name>mIsRunning</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae52c72243ba806bb872ec0d7a356d978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::thread</type>
      <name>mThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae85a43917dbaf2834b85570d9cd1c46d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::FiniteSampleable</name>
    <filename>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a97fa61f26afd0060d1b493a72b04f98a</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, const statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a1e762b9eac4d5e56e4977971f4d83c0e</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, const std::vector&lt; const statespace::StateSpace::State * &gt; &amp;_states)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>af008e2114b515a2b661eba1ea022534c</anchor>
      <arglist>(const FiniteSampleable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a11e386c486fe7669da056bbe509805fc</anchor>
      <arglist>(FiniteSampleable &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>FiniteSampleable &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>afab11c0abcfdb760e6d7cd57f4a85717</anchor>
      <arglist>(const FiniteSampleable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>FiniteSampleable &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a9510004e888ce739819e2fb5147fcb49</anchor>
      <arglist>(FiniteSampleable &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a18e1c15f130ca6c218595e969dfabbb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>ae74efd0f47b211e357e857f8ac90fc02</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>aa9ccb856968cb629f09536ffb292083a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>afc6f743667174061ea301ddcaafdd1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; statespace::StateSpace::State * &gt;</type>
      <name>mStates</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>aad11a62afddcecec2c71a8994ef8554c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::FirstSupportedMetaPlanner</name>
    <filename>d8/d41/classaikido_1_1planner_1_1FirstSupportedMetaPlanner.html</filename>
    <base>aikido::planner::CompositePlanner</base>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d8/d41/classaikido_1_1planner_1_1FirstSupportedMetaPlanner.html</anchorfile>
      <anchor>a972199518641cadfb79e63b2469dbb07</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FrameDifferentiable</name>
    <filename>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>FrameDifferentiable</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a8bc1432fe9b1552ee0b47cea9e0ec9a4</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr _metaskeleton, ::dart::dynamics::ConstJacobianNodePtr _jacobianNode, DifferentiablePtr _poseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a8eb45de0db2b11343e201fb8a74e31a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a52595e5c2854560c4637d1837ddf77f7</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a1e83d25f4c48fa5b0e43c5d5baee9572</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>aa9facbe8a906e5098cba53c82a66750f</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>afd8c806e4efa5f612318ef0dc0d00763</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>af9a6f04b2113fb7321873be73d88b907</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a026bf962675873fd4e47dddcecc475eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a618cfa30cc2618c9460ea3b7a2e166d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>acbf10f915aab95092bc24681c85d799d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>ae249c8f4f3d549214524ae3e7d95c414</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::FrameMarker</name>
    <filename>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>afd2ba122c52b475224ded4f2ef42b87c</anchor>
      <arglist>(interactive_markers::InteractiveMarkerServer *markerServer, dart::dynamics::Frame *frame, const std::string &amp;frameId, double length=0.25, double thickness=0.02, double alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrameMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a4a6c179d4ce308f8c858b762e7adf562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a8cddb2592f63830dae304ed6e966fbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>ad66f052eda0b1dbf124f6bed28a38fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>afb43e509773e2bb7bcbfdb78bfc96233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::Frame *</type>
      <name>mFrame</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a05a0b8870f50b142f68f0090619257d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a091ff36be557db3b0f41f23f50ecea24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FramePairDifferentiable</name>
    <filename>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>FramePairDifferentiable</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>aa472f121f753190f5361cca2bffe1f4d</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr _metaskeleton, ::dart::dynamics::ConstJacobianNodePtr _jacobianNodeTarget, ::dart::dynamics::ConstJacobianNodePtr _jacobianNodeBase, DifferentiablePtr _relPoseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ad2eb65429eb696181e017ea54f22b5bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a90b58a310e201ac3390158da0200fa02</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a84e7166de57101e5b68527a17df84b22</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a4869913590b92bd1d8f4537e3fa761cc</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>aae4c55caa319c52de0d5e900eb3e4b97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a59a64faa1ad84f24f6b687a2f6d54e38</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a353cbc43e52c33a4608bc0eb7ac7da25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a375c3c0cb56a9bba0eafe7ec4205655c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode1</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a820a15114385a7d6cc1bc6a304f17657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode2</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ae71cdd6d569eb94cec1b187c1748430d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mRelPoseConstraint</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a666b8b6174be39d152a2134ee20e1a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FrameTestable</name>
    <filename>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>FrameTestable</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a75c1baf0eedfe16c931cdd8812912d14</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr _metaskeleton, ::dart::dynamics::ConstJacobianNodePtr _frame, TestablePtr _poseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>ae9cbbef67f91c15905d109f46fefcd3f</anchor>
      <arglist>(const statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a65cd77f45ab302b233834785263c9242</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a0e519cd7f70a13749c06109bb1998fc9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>ad1a28d457a693440525d7368e94bef18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a2f7a1965c4c9c1dccdac0d285ed2c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mFrame</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a9220bfd6cbcab76ce0fe2f5ac73b06e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TestablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a819f95acd2d4dcb9c00ba8a9de77c68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SE3 &gt;</type>
      <name>mPoseStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>adca87d874f36d6aa45c3d947cf348e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::GeodesicInterpolator</name>
    <filename>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</filename>
    <base>aikido::statespace::Interpolator</base>
    <member kind="function">
      <type></type>
      <name>GeodesicInterpolator</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a3224fd4846b5c029846a722bb4b640a8</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeodesicInterpolator</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>aed72c24cd12a6d4c75a7266cb6cc442d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a9dffd52cd8d1cb02e02a49778c48536e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a2ece4bc1eef6b87805c298e0c9a49a9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getTangentVector</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a6b4198808510661002ad687ff326437a</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a1ad809f540490ec70d2882ec02ed1064</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, double _alpha, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDerivative</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>ac8503fd2d9798102080570599006e5e8</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, std::size_t _derivative, double _alpha, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a6497cd3c33ed03c645143af41f63bde4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GeometricStateSpace</name>
    <filename>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</filename>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>GeometricStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a73ff94b5293ca88c043f00f3df0b8008</anchor>
      <arglist>(statespace::ConstStateSpacePtr sspace, statespace::ConstInterpolatorPtr interpolator, distance::DistanceMetricPtr dmetric, constraint::SampleablePtr sampler, constraint::ConstTestablePtr boundsConstraint, constraint::ProjectablePtr boundsProjection, double maxDistanceBetweenValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a98e9374ad1d370a892f2110b2e679eab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ad5d499a0b2c440c48225f3fb8d0834e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a177b842a23b5b09133129f9c5eee922c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a9534f3bc2f04b6a6afe984e3605da788</anchor>
      <arglist>(::ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ac2d2741e8b32d62985245f5de439df4f</anchor>
      <arglist>(const ::ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a899181f1791ddecc1e50a48c38b82fbe</anchor>
      <arglist>(::ompl::base::State *destination, const ::ompl::base::State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ad4545c3e1d081b0f3af032a22baa5619</anchor>
      <arglist>(const ::ompl::base::State *state1, const ::ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a897e6c6eab724f270f4c134ed5deb398</anchor>
      <arglist>(const ::ompl::base::State *state1, const ::ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a65fda391df866958bbbe8255e3364c6d</anchor>
      <arglist>(const ::ompl::base::State *from, const ::ompl::base::State *to, double t, ::ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a3f867ce617a1f1d8dee42f1f3a0b4c40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a947565010872907fe68d192f947f6d6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ad4b9e65725c62cff74972e259b4b8756</anchor>
      <arglist>(const statespace::StateSpace::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a4dd62f2710cc5a64bb644c203f338932</anchor>
      <arglist>(::ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getAikidoStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a4ff96e48df38dfc808690f6b0c71eb81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::ConstInterpolatorPtr</type>
      <name>getInterpolator</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a529adeb96f71dff9129dfa1539973ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>aikido::constraint::ConstTestablePtr</type>
      <name>getBoundsConstraint</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a56de7380ed76175eaa6cb05b3f16748d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDistanceBetweenValidityChecks</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>af4c5dfec1975855b1ba6309f6d77e870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a8e0183278b2d31ad591a3771529a4b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>mInterpolator</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ac881b55ca4e2aa9f4f195aaccd66146f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>distance::DistanceMetricPtr</type>
      <name>mDistance</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a81921665c191a08b931e6227f4302352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::SampleablePtr</type>
      <name>mSampler</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a33571492d490456e6fc80d55d579f3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::ConstTestablePtr</type>
      <name>mBoundsConstraint</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a87ba95af3f4e527ff8188a4f0c412375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::ProjectablePtr</type>
      <name>mBoundsProjection</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>acdafc7da23282fec05e9118bbc62ff32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMaxDistanceBetweenValidityChecks</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>aedc0f02f178e50839db2688dfb1a47e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GoalRegion</name>
    <filename>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>GoalRegion</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a87c84452b9d22ff660c98bac39cd0dfe</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, constraint::TestablePtr _goalTestable, std::unique_ptr&lt; constraint::SampleGenerator &gt; _generator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>adc7c3e6b5b2489123fb9593352be443d</anchor>
      <arglist>(::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a3d8ca00581c027a66f29f5c9458b1f55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>couldSample</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a8012b2df123fb9931d0772f662348c4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a79a030bec482c9c7bc91581baf00c0a0</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a114d0a341a05dc4b6ca5fb9c1060b4e9</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::TestablePtr</type>
      <name>mTestable</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a7bd5ed2032531e44ecf0a430bce70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>mSampleGenerator</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>ab5355bcdb5401b22a7114ff92b158f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::GrabMetadata</name>
    <filename>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</filename>
    <member kind="function">
      <type></type>
      <name>GrabMetadata</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a3d151e6d6a127f279aff45327688aed0</anchor>
      <arglist>(dart::dynamics::BodyNodePtr bodyNode, const std::string &amp;oldName, dart::dynamics::SkeletonPtr parentSkeleton, const dart::dynamics::FreeJoint::Properties &amp;jointProperties)</arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::BodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a8766d2ff245be1749774104f451c46d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mOldName</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>ae993ec4a3347ac5050b1545607b83d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mParentSkeleton</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>ad0e09e687c6059e95307fcc0c7b98555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::FreeJoint::Properties</type>
      <name>mJointProperties</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a2bd07ddf06117bf8123c2fd4cfbe4d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Hand</name>
    <filename>d0/dbc/classaikido_1_1robot_1_1Hand.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hand</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>aa20dacef3e9672d89605291b04134593</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>grab</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>a7f525d8c7c57d6aa4925fb4a2d44a41d</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;bodyToGrab)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ungrab</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>ae3e2d401b5fd792d907b593182325587</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executePreshape</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>ae2dc692a31881ab9c74e380891af0acd</anchor>
      <arglist>(const std::string &amp;preshapeName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>afcbde2db207dbce11cbecc93f2ce33a2</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>aa6251e961a2ba72415239463a6866bb2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>af5024bd6557f7465792f5f1e2de7b27c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::BodyNode *</type>
      <name>getEndEffectorBodyNode</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>af1d83d624f6e2964acfbf7946c673363</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::BodyNode *</type>
      <name>getHandBaseBodyNode</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>a3ac094d9f2abbcac70cd18a1c524efab</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::InstantaneousTrajectoryExecutor</name>
    <filename>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>InstantaneousTrajectoryExecutor</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a7a8e56c89930eaa0a656a805fc24ec6f</anchor>
      <arglist>(::dart::dynamics::SkeletonPtr skeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InstantaneousTrajectoryExecutor</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a571befbf2d9bf496b76a2c2d8c0ee0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a48486db6850d0a134ba7d32bfc14d2de</anchor>
      <arglist>(const trajectory::Trajectory *traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a136c506b894209b83efa4c9067cb85e7</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a0d7bb3b8b8d74c0975fecb088d9f2031</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>ad37d5391da214305442e9f11ba7b9570</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>ac385def8a29d1b82e5543e941788cdd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>ad685d74e2ea03aee5c0a37283fc00f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>af8f2c4e27964c46dee447d832e7de451</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::InteractiveMarkerViewer</name>
    <filename>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</filename>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>ac42b7ed94eb533bd9e5ec886743705b4</anchor>
      <arglist>(const std::string &amp;topicNamespace, const std::string &amp;frameId, aikido::planner::WorldPtr env=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a88be5590d4fcdea595567582ce6250bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0c46e3998bcb0d7d319d6ed32ff26737</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a942a5c5c179d06327cbc10f46971df23</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>InteractiveMarkerViewer &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>abf3a3d377135128303d10fa7d0e4947d</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>interactive_markers::InteractiveMarkerServer &amp;</type>
      <name>marker_server</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aaa5db2f3ef844a6cc78ff726278bacad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SkeletonMarkerPtr</type>
      <name>addSkeletonMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a423754ac8a22596d23240b1a505c74bb</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>FrameMarkerPtr</type>
      <name>addFrameMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aba2197fcea175c8f36bab031a6c4ead7</anchor>
      <arglist>(dart::dynamics::Frame *frame, double length=0.25, double thickness=0.02, double alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>TSRMarkerPtr</type>
      <name>addTSRMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a791d61e5b3ae03283dcafac1e8db26ae</anchor>
      <arglist>(const constraint::dart::TSR &amp;tsr, int nSamples=10, const std::string &amp;basename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryMarkerPtr</type>
      <name>addTrajectoryMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0b3862930f34f094ff1fdf813bc2bc4f</anchor>
      <arglist>(trajectory::ConstTrajectoryPtr trajectory, dart::dynamics::MetaSkeletonPtr skeleton, const dart::dynamics::Frame &amp;frame, const Eigen::Vector4d &amp;rgba=Eigen::Vector4d::Constant(0.75), double thickness=0.01, std::size_t numLineSegments=16u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoUpdate</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a3d650109cc305d4804f2a899e6680248</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>acbecac6d65eb5689c433b5df53f8965b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>autoUpdate</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>af690b60f7c07866f1a9fa6cb81981e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSkeletonMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a53e75b9f519bc3a71a9990e3f0bf0aa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateFrameMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a1cb0e7fb7299aa91d3e375b1ee306a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTrajectoryMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a9d43f2cf142eece69e500e2c6275f8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interactive_markers::InteractiveMarkerServer</type>
      <name>mMarkerServer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aeae2e7048c833909802a41a9310f0c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; dart::dynamics::SkeletonPtr, SkeletonMarkerPtr &gt;</type>
      <name>mSkeletonMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a76515cbc5e5aa6f55a739ea2515bc422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; FrameMarkerPtr &gt;</type>
      <name>mFrameMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a5c0058c6249c53115e6899994bd614be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; TrajectoryMarkerPtr &gt;</type>
      <name>mTrajectoryMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a33dd9f5f93a51404c76ac01cb0995b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::common::NameManager&lt; trajectory::ConstTrajectoryPtr &gt;</type>
      <name>mTrajectoryNameManager</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a7f254ac9acd0fcfbef23001cc6dcec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::atomic_bool</type>
      <name>mRunning</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a3e93f26dc6ad4f54822f4fd9a1ce6ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::atomic_bool</type>
      <name>mUpdating</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a830f68fa15963c4769e0d63ba68b3c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0c2148208b943f0b31b87d1f8860dbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::planner::WorldPtr</type>
      <name>mWorld</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aad4d1e921619692acd187101403d0a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a9ca70b1a3b39ecf24ff5ec5010f83742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread</type>
      <name>mThread</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>af558c80bbb9828ed5aa6f3b70b734d31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Interpolated</name>
    <filename>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</filename>
    <base>aikido::trajectory::Trajectory</base>
    <class kind="struct">aikido::trajectory::Interpolated::Waypoint</class>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ace344c658bd269e07d17c9957a9ab015</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, statespace::ConstInterpolatorPtr _interpolator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolated</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a9d45410d6e066cc4f95e1be288c4fffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWaypoint</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ad4d15fbffc2b4aa8ebe22d6611bc6e28</anchor>
      <arglist>(double _t, const statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type>const statespace::StateSpace::State *</type>
      <name>getWaypoint</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>adcba99e1ff4efdad8d42a7e0c42a9070</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWaypointTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a87cce434aa12cb5b3d5f3a3c1fe5e7ab</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a5df71b46997de16d646ca0c37e04e10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a6dea32d85b50faabe4831a0fe31ee838</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>getInterpolator</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a0d40a5918b8db1d767b5f2d474ea829a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>aa384c8cbc6d6e0e12066c7f7bca62934</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>abad2ebcbc109deabc4b831a291b5eae9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab654e12ef95ba9e39868fe8f7b92e963</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a7a0536ad2cf021599cdabe2e6ddc3403</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab45db14a56c73e8e798cfac13b39e7a5</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivative</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a89855ff25ce2e41adf0c9cd3f25cf72e</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getWaypointIndexAfterTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a973718ded0eda3d618bd6d078bfd7291</anchor>
      <arglist>(double _t) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a8b0e3eb6957f7a323cc9c96c069d88c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>mInterpolator</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab5a7c05ca47bb889686a5d007eaa5c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Waypoint &gt;</type>
      <name>mWaypoints</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ae2a301c449652f90fbb36076d94ae69b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::Interpolator</name>
    <filename>df/d81/classaikido_1_1statespace_1_1Interpolator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolator</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>a923f161c1ecca74aa35234d32e0ad6c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>ad7a915672faeb5e31b4d31bfe175f420</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>acb8747d034aa0a70f41185d36248c713</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>aedea8edceb9e75771f7548ff9b828783</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, double _alpha, statespace::StateSpace::State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDerivative</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>aafea86f2afdb68d802e7b6fb1eb6d1fd</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, std::size_t _derivative, double _alpha, Eigen::VectorXd &amp;_tangentVector) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::InverseKinematicsSampleable</name>
    <filename>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>InverseKinematicsSampleable</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>ac1b39a63f9bf098247555be64c46a89d</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeletonStateSpace, ::dart::dynamics::MetaSkeletonPtr _metaskeleton, SampleablePtr _poseConstraint, SampleablePtr _seedConstraint, ::dart::dynamics::InverseKinematicsPtr _inverseKinematics, int _maxNumTrials)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseKinematicsSampleable</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>ac27834729b4adc749842083ad57e387e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>afafb878962c7126ce545933eb2ed19d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>aaa050fe9e88615de2326125320733523</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>af6330f1ba679f0964a8f0a580d364aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a75651699d0cdfe6c8a8bc132b659e93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a8f601735f3db74c67ed7e925cf9a470c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSeedConstraint</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a3bed7a6f35228da481ccc29c1f886e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::InverseKinematicsPtr</type>
      <name>mInverseKinematics</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a35d9e66fe99540d79605d3cb48915f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxNumTrials</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a4ecc6352b32f208651366f9317d701f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::JointAvoidanceConfigurationRanker</name>
    <filename>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</filename>
    <base>aikido::distance::ConfigurationRanker</base>
    <member kind="function">
      <type></type>
      <name>JointAvoidanceConfigurationRanker</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>aecb01db38fb6e457891fcf733c537069</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr metaSkeletonStateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, std::vector&lt; double &gt; weights=std::vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupJointLimits</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>a2bd0b8fd28c9f8c4074a66018da98191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>evaluateConfiguration</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>a8a03a1a67513548c4c7ee43acd18df35</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpace::State *solution) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>mUnboundedLowerLimitsIndices</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>aa8b24871012fe32ec0c2da3a1457cc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>mUnboundedUpperLimitsIndices</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>a6c997222c5317fe2a8dfe3c85c0afd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mLowerLimitsState</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>a7530e405c01650b9e57407cb4b1c587a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mUpperLimitsState</name>
      <anchorfile>dc/d07/classaikido_1_1distance_1_1JointAvoidanceConfigurationRanker.html</anchorfile>
      <anchor>a29eb2117b049654b4ab06104d1d442c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::control::ros::RosJointStateClient::JointStateRecord</name>
    <filename>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>a3a055eee8ba0ce067ea3de197be4aac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>::ros::Time</type>
      <name>mStamp</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>a293177345acb4a368273a6c26e91de35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mPosition</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>aa61273b0e6479d22c28e61ca5feeb2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::JointStateSpace</name>
    <filename>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::dart::JointStateSpace::Properties</class>
    <member kind="function">
      <type></type>
      <name>JointStateSpace</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a10f1f97db0c7e1090d4babe74daa386a</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JointStateSpace</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a1c09a2569d3782f9d87b6d52733a51cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a9ea5673932d9ff4d38cd64a0104294b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>ac27e7a659ddd3c4eae86cc42f74d1f44</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCompatibility</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>acf15bb177ef8cd123b861fd3856a9678</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a72d265e4101b293f0594aa11cb75a336</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a52cefc7dd9ecbbb44339a4453118aaf3</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>ac4f61567310ea0088a22ace5f0c80817</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint, StateSpace::State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a2e131a989dc882c33965c18ec0108f54</anchor>
      <arglist>(::dart::dynamics::Joint *joint, const StateSpace::State *state) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Properties</type>
      <name>mProperties</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a97834c9d0c53ff9e197d56b801629840</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::KinematicSimulationTrajectoryExecutor</name>
    <filename>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>KinematicSimulationTrajectoryExecutor</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a2210ed11bdad835fca99f6a8b431a7cb</anchor>
      <arglist>(::dart::dynamics::SkeletonPtr skeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinematicSimulationTrajectoryExecutor</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a9a158c57f3e036e08b912fa59cc7097b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>aef243294919777c6c34bcc55b1ed00ae</anchor>
      <arglist>(const trajectory::Trajectory *traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a79993602a6beadcacbc4a47c7f805b31</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>aee8afd0c0682dbb54253bea0ba264e17</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a07932d3196dc1fa3d11d83659b5c4f0f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a81ad08cf041e1a1e3dcfc6359831492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>trajectory::ConstTrajectoryPtr</type>
      <name>mTraj</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a09205da0549fea9c97090234c17ffd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a715d28a830418a94f4187f519f071ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>ae307ab018146f0f46af508928753c740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a7c9d5abc8dd6d09aea9f447bb39ccee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a1c707ef519c0b6d70494e4816872540c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>afaed62eecb8574c4049cb46715e16e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::kunzretimer::KunzRetimer</name>
    <filename>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</filename>
    <base>aikido::planner::TrajectoryPostProcessor</base>
    <class kind="struct">aikido::planner::kunzretimer::KunzRetimer::Params</class>
    <member kind="function">
      <type></type>
      <name>KunzRetimer</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a4a25c588323f2092f90acbaab29cdce2</anchor>
      <arglist>(const Eigen::VectorXd &amp;velocityLimits, const Eigen::VectorXd &amp;accelerationLimits, double maxDeviation=DEFAULT_MAX_DEVIATION, double timeStep=DEFAULT_TIME_STEP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KunzRetimer</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a5c3810c033e728b22e54653f958d33a9</anchor>
      <arglist>(const Eigen::VectorXd &amp;velocityLimits, const Eigen::VectorXd &amp;accelerationLimits, const Params &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a35b75cc35e37668b223033e46e2756c7</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;inputTraj, const aikido::common::RNG &amp;rng, const aikido::constraint::TestablePtr &amp;constraint=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a856fd972ecabac7007d3632800e90628</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;inputTraj, const aikido::common::RNG &amp;rng, const aikido::constraint::TestablePtr &amp;constraint=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>ac7b6c5960d17568e799a83f853b447cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getAccelerationLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>afe378ae95aab27ba34551580ff11f0c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocityLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a7a031b88fd46245927bb46400c62cba4</anchor>
      <arglist>(const Eigen::VectorXd &amp;velocityLimits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccelerationLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a71754d416d583c26ceb15f26206b9c81</anchor>
      <arglist>(const Eigen::VectorXd &amp;accelerationLimits)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeStep</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a7ef849a36bb35689b0f724ebe374b001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStep</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a2653ac9b5ae6bcb0ef33ea228be17daa</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDeviation</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>aeaf3c27457377a93df3957edce46522b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDeviation</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a815a4a31cec29b5f1601775d95bda594</anchor>
      <arglist>(double maxDeviation)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a031e4a55cfd07cbd8aa33203c7ddaf9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mAccelerationLimits</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>aa74a5c09d3df082c78bd31fe0c21d78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMaxDeviation</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>afbe77be889f795bc1a9ad42056561f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mTimeStep</name>
      <anchorfile>d1/d94/classaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer.html</anchorfile>
      <anchor>a71951e1ff19ae08d791fa469bb231bb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Manipulator</name>
    <filename>d9/d57/classaikido_1_1robot_1_1Manipulator.html</filename>
    <base>aikido::robot::Robot</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Manipulator</name>
      <anchorfile>d9/d57/classaikido_1_1robot_1_1Manipulator.html</anchorfile>
      <anchor>a99725840c4dbbb8921964e1453542da7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstHandPtr</type>
      <name>getHand</name>
      <anchorfile>d9/d57/classaikido_1_1robot_1_1Manipulator.html</anchorfile>
      <anchor>a12c8345085c9b01fe24e5d13689f58b8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>HandPtr</type>
      <name>getHand</name>
      <anchorfile>d9/d57/classaikido_1_1robot_1_1Manipulator.html</anchorfile>
      <anchor>ac155179fcd1bd1595225c475238772ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::MeshResource</name>
    <filename>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</filename>
    <base>aikido::rviz::BinaryResource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshResource</name>
      <anchorfile>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</anchorfile>
      <anchor>abb9ce38d32de33ce47358408e5a5b1f0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, TextureResourcePtr &gt;</type>
      <name>mTextures</name>
      <anchorfile>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</anchorfile>
      <anchor>af868e1f2d03c0b2ae75e2e46c3f96150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSaver</name>
    <filename>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Options</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIONS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9ac9b81ec7233d5cd6acb0ba9d1ab25651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_LIMITS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9a90f764506efb0e6765fdc30fffe866a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIONS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9ac9b81ec7233d5cd6acb0ba9d1ab25651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITION_LIMITS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9a90f764506efb0e6765fdc30fffe866a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a03beaf5336b4925d51be620c8c4db351</anchor>
      <arglist>(::dart::dynamics::MetaSkeletonPtr metaskeleton, int options=POSITIONS|POSITION_LIMITS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>aad37a528a932db0d178b751bfb3ec94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a4776d368c19e95ece718e5baebdc36e5</anchor>
      <arglist>(const MetaSkeletonStateSaver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MetaSkeletonStateSaver &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a5ac20d282f20c71598239821e6b2381c</anchor>
      <arglist>(const MetaSkeletonStateSaver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>ab29546625734c391fbf4a2caf53c9073</anchor>
      <arglist>(MetaSkeletonStateSaver &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>MetaSkeletonStateSaver &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a0ef0279243bb9c7e6a273a99126fdd43</anchor>
      <arglist>(MetaSkeletonStateSaver &amp;&amp;)=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a225ed2fda24cd1b19d016aa88c92df77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mOptions</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a7f643a0a9055c87cb67a09d6e19b38ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositions</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a06405e7ac8167837453ce632489fd5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a543e0a258524310ab4af38af27b38e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a43b386788641b3485d6228db3d27f5c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSpace</name>
    <filename>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</filename>
    <base>aikido::statespace::CartesianProduct</base>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace::Properties</class>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a3df5ea23639b7b25da4e24c57a2e1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>aff4bd98ec77a24acf7be28971f5dbf58</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton)</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>aeaa750b69a3a3db3c45679503d2d7d1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a467afb1485dd7503014f7444d903097b</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCompatibility</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a48ca047415b24792a34cba16ad6f1c60</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkIfContained</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a079b7ea28f52ddf073183e46c1d3aea2</anchor>
      <arglist>(const ::dart::dynamics::Skeleton *skeleton) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Space &gt;</type>
      <name>getJointSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>adfeb562c74da715129842e1a655dd06f</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton, const ::dart::dynamics::Joint *_joint) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; const Space &gt;</type>
      <name>getJointSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>ac3f15194158b03d85832fedff8a0e41c</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>aeef3ab49e200da4db4e9930aec962186</anchor>
      <arglist>(const Eigen::VectorXd &amp;_positions, State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a16b366ee0c49a542bddfa75e1b701947</anchor>
      <arglist>(const State *_state, Eigen::VectorXd &amp;_positions) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a917ae3c52d4201a3e70a9645afe9f2a6</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton, State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a58b67148a6db5fe4fd62a12b4049a654</anchor>
      <arglist>(::dart::dynamics::MetaSkeleton *_metaskeleton, const State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>getScopedStateFromMetaSkeleton</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a265344ab389015b9d27fc08c2e1a1431</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton) const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getControlledMetaSkeleton</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a9fb00581ce85924744104099e08baf24</anchor>
      <arglist>(const ::dart::dynamics::SkeletonPtr &amp;_skeleton) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Properties</type>
      <name>mProperties</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a6d462d74d1f9d5c4fe1e229c30ab14c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRT::Motion</name>
    <filename>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a10821e432e708a770e594f6f83fb162a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a2c1dfdacd5a1234783a0b67936ded833</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a4fad9bae0c8e69e581cb323edfd15cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::ompl::base::State *</type>
      <name>state</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a3b35f78db9f3d1a9011d2bdbfd8c9e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a43a3badc9879fd25cb048463d79ff7dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::MotionValidator</name>
    <filename>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>a2a6e94c2f9e3af8ee71c3442d1f1c70c</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, double _maxDistBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>aecfd8129e1412f6bc6ce3f878cc409a0</anchor>
      <arglist>(const ::ompl::base::State *_s1, const ::ompl::base::State *_s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>ae60746faa62c9456aede17bd90bd6114</anchor>
      <arglist>(const ::ompl::base::State *_s1, const ::ompl::base::State *_s2, std::pair&lt;::ompl::base::State *, double &gt; &amp;_lastValid) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mSequenceResolution</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>acd4f18b4e1e42e0240c5163b6e25a153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</name>
    <filename>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</filename>
    <base>aikido::planner::vectorfield::BodyNodePoseVectorField</base>
    <member kind="function">
      <type></type>
      <name>MoveEndEffectorOffsetVectorField</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>aa2c3017e09f7f79a783b67d9b02f697b</anchor>
      <arglist>(aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaskeleton, ::dart::dynamics::ConstBodyNodePtr bn, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double maxStepSize, double jointLimitPadding)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a6943f8e4d66d8093838a2953ff5d7e18</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>acaa471940f761182f1877ba515a6b0c1</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>mDirection</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a47be972eff51927b854cdd3362280ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMinDistance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a658ed52c9c5bd4d6c71eeacdc67a33b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxDistance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a6831a05b7421c1e071a44dc464957314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mPositionTolerance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a1f4562506ce3850e1d47fed0740faca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mAngularTolerance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a5171b9301761d75441dbab07592cf1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>mStartPose</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>af0057b43e8c30eb90d84defb21bda52f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</name>
    <filename>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</filename>
    <base>aikido::planner::vectorfield::BodyNodePoseVectorField</base>
    <member kind="function">
      <type></type>
      <name>MoveEndEffectorPoseVectorField</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a260d8fa21bc6c84f9631edfd6804b6ac</anchor>
      <arglist>(aikido::statespace::dart::MetaSkeletonStateSpacePtr stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, dart::dynamics::BodyNodePtr bn, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double r, double maxStepSize, double jointLimitPadding)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a89d81ed244f4ae0cf55b5e4d6c475342</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>ae47f66213c3d8697e119cf3884346e93</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>mGoalPose</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a68cdf745d0b6acf06609298e3e568683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mPoseErrorTolerance</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a1bf8926979507f1fe1ea9e2190baaf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mConversionRatioFromRadiusToMeter</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a356ff799fe13eb58efce40af080d4d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::NewtonsMethodProjectable</name>
    <filename>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</filename>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>NewtonsMethodProjectable</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a7a3e8722451c0d0b98d96b5ad2767f80</anchor>
      <arglist>(DifferentiablePtr _differentiable, std::vector&lt; double &gt; _tolerance, int _maxIteration=1000, double _minStepSize=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a867d868d2161ea8cb22c29b1b022e0b6</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>af4b46531ebd67f152385155386a7fb0b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a420898ebe7606dbfa0c789247899181c</anchor>
      <arglist>(const statespace::StateSpace::State *_s) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mDifferentiable</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a933e8446353ab93a6cb2f9a4d6ca5611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>mTolerance</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a1134fedf5477863e5badb95ce4c1d68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxIteration</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a6d2586b45ccb41b7dfa805d655304b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMinStepSize</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a5f4dd5d97e15342654a2544cfad29ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a4c1e841b4105f73c989a117aed34d0b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::NominalConfigurationRanker</name>
    <filename>d4/d40/classaikido_1_1distance_1_1NominalConfigurationRanker.html</filename>
    <base>aikido::distance::ConfigurationRanker</base>
    <member kind="function">
      <type></type>
      <name>NominalConfigurationRanker</name>
      <anchorfile>d4/d40/classaikido_1_1distance_1_1NominalConfigurationRanker.html</anchorfile>
      <anchor>ab2c05385f4288106b0f93ae64ec774bb</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr metaSkeletonStateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, const statespace::CartesianProduct::State *nominalConfiguration, std::vector&lt; double &gt; weights=std::vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NominalConfigurationRanker</name>
      <anchorfile>d4/d40/classaikido_1_1distance_1_1NominalConfigurationRanker.html</anchorfile>
      <anchor>af11dfe24db8f49430f742bd2e6d6cd65</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr metaSkeletonStateSpace, ::dart::dynamics::ConstMetaSkeletonPtr metaSkeleton, std::vector&lt; double &gt; weights=std::vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>evaluateConfiguration</name>
      <anchorfile>d4/d40/classaikido_1_1distance_1_1NominalConfigurationRanker.html</anchorfile>
      <anchor>a8427410e9520e6809f25fce228cd04a4</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpace::State *solution) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const statespace::dart::MetaSkeletonStateSpace::ScopedState</type>
      <name>mNominalConfiguration</name>
      <anchorfile>d4/d40/classaikido_1_1distance_1_1NominalConfigurationRanker.html</anchorfile>
      <anchor>a7df3e5196b34c043e9816379476705ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::OMPLConfigurationToConfigurationPlanner</name>
    <filename>d3/dd0/classaikido_1_1planner_1_1ompl_1_1OMPLConfigurationToConfigurationPlanner.html</filename>
    <templarg></templarg>
    <base>aikido::planner::ConfigurationToConfigurationPlanner</base>
    <member kind="function">
      <type></type>
      <name>OMPLConfigurationToConfigurationPlanner</name>
      <anchorfile>d3/dd0/classaikido_1_1planner_1_1ompl_1_1OMPLConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a52dbed21e094c5e668020e2f60fdf407</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr, statespace::ConstInterpolatorPtr interpolator=nullptr, distance::DistanceMetricPtr dmetric=nullptr, constraint::SampleablePtr sampler=nullptr, constraint::ConstTestablePtr boundsConstraint=nullptr, constraint::ProjectablePtr boundsProjector=nullptr, double maxDistanceBtwValidityChecks=0.1)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d3/dd0/classaikido_1_1planner_1_1ompl_1_1OMPLConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a0fa8466127180554a213cad85d46f5a2</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerPtr</type>
      <name>getOMPLPlanner</name>
      <anchorfile>d3/dd0/classaikido_1_1planner_1_1ompl_1_1OMPLConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>ab2e1a81303d49a53ff9bef7e43000a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ompl::base::PlannerPtr</type>
      <name>mPlanner</name>
      <anchorfile>d3/dd0/classaikido_1_1planner_1_1ompl_1_1OMPLConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a891d4bada40fecba9be8149ead709dd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::PairHash</name>
    <filename>df/d1d/structaikido_1_1common_1_1PairHash.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>df/d1d/structaikido_1_1common_1_1PairHash.html</anchorfile>
      <anchor>a092ff215c404aa0cf1be750391e2ef82</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;pair) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::parabolic::ParabolicSmoother</name>
    <filename>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</filename>
    <base>aikido::planner::TrajectoryPostProcessor</base>
    <class kind="struct">aikido::planner::parabolic::ParabolicSmoother::Params</class>
    <member kind="function">
      <type></type>
      <name>ParabolicSmoother</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>a92fd54013d00e015dc587380eddd80f6</anchor>
      <arglist>(const Eigen::VectorXd &amp;_velocityLimits, const Eigen::VectorXd &amp;_accelerationLimits, bool _enableShortcut=true, bool _enableBlend=true, double _shortcutTimelimit=DEFAULT_TIMELIMIT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _feasibilityCheckResolution=DEFAULT_CHECK_RESOLUTION, double _feasibilityApproxTolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParabolicSmoother</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>a29545d780d2627465ad4c6217f55e0c1</anchor>
      <arglist>(const Eigen::VectorXd &amp;_velocityLimits, const Eigen::VectorXd &amp;_accelerationLimits, const Params &amp;_params)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ab7a31a254e2c907cf921bcf09b3f2beb</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ab0c53dc6cae4d77aee575338178b6fa0</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>handleShortcutOrBlend</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aae44773ce738921081579baba84c0236</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mFeasibilityCheckResolution</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aa7c40e01f4e0e1487c8d769b2fcebec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mFeasibilityApproxTolerance</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ac2f2f5c30288d3604139a60f92e12922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mVelocityLimits</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>afa78086da563e892fe527d3f91ab4ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mAccelerationLimits</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>a0f8d84e7d21e09329de2cd340ced3157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mEnableShortcut</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ae2a96c5b6a7b503e74106fab81846e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mEnableBlend</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>abf3019c395d8053bbe3d6c5968506386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mShortcutTimelimit</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>acf19a34ce6565f8413f0d0605cb30584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mBlendRadius</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>acfb9d6a3bc8a67a41dc2bc9adc080c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mBlendIterations</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aaef8e4fd96e1bf2b8bb2f86a5943912d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::parabolic::ParabolicTimer</name>
    <filename>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</filename>
    <base>aikido::planner::TrajectoryPostProcessor</base>
    <member kind="function">
      <type></type>
      <name>ParabolicTimer</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a32037335f69e00a2e9a13b27cbf59910</anchor>
      <arglist>(const Eigen::VectorXd &amp;_velocityLimits, const Eigen::VectorXd &amp;_accelerationLimits)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a8298379e662a935c8b8886a4b3e4771f</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a1d8a115b807eab524d9166b39ca55981</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint=nullptr) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mVelocityLimits</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a8e394dc3abfb5b214fa259ec23eb1fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mAccelerationLimits</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a98bd9a356151c49148268ab719ad4708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::planner::kunzretimer::KunzRetimer::Params</name>
    <filename>da/d51/structaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer_1_1Params.html</filename>
    <member kind="function">
      <type></type>
      <name>Params</name>
      <anchorfile>da/d51/structaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer_1_1Params.html</anchorfile>
      <anchor>a29d3ec1c7cfd5b5579399e3922a0d57b</anchor>
      <arglist>(double _maxDeviation=DEFAULT_MAX_DEVIATION, double _timeStep=DEFAULT_TIME_STEP)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mMaxDeviation</name>
      <anchorfile>da/d51/structaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer_1_1Params.html</anchorfile>
      <anchor>a509761e04f0132352219a3c4f82fcb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mTimeStep</name>
      <anchorfile>da/d51/structaikido_1_1planner_1_1kunzretimer_1_1KunzRetimer_1_1Params.html</anchorfile>
      <anchor>a7b2e4cd3d37c050646688f43f8ef5c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::planner::parabolic::ParabolicSmoother::Params</name>
    <filename>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</filename>
    <member kind="function">
      <type></type>
      <name>Params</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>ac2c93eff6cf2cadc07ef7939dedbef54</anchor>
      <arglist>(bool _enableShortcut=true, bool _enableBlend=true, double _shortcutTimelimit=DEFAULT_TIMELIMIT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _feasibilityCheckResolution=DEFAULT_CHECK_RESOLUTION, double _feasibilityApproxTolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mEnableShortcut</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>a9b41a5223eed4a274286f47ffcf70672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mEnableBlend</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>a974bc490793b0f88d6564aa072a77f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mShortcutTimelimit</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>ae010f518fb21ba8af95c6cd9e0ca9434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mBlendRadius</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>a2f7cbd55bc349058cc911a401547c1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mBlendIterations</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>a3e755cb4195b87642550522c362836b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mFeasibilityCheckResolution</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>ade46b57aab3d9ed24bdd6508bdf31100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mFeasibilityApproxTolerance</name>
      <anchorfile>df/d57/structaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother_1_1Params.html</anchorfile>
      <anchor>a7c835558dca635c21d4ba6dc71c3c0fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::PerceptionModule</name>
    <filename>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PerceptionModule</name>
      <anchorfile>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</anchorfile>
      <anchor>a23df4e43e5fed3dcf764e51ec78270bb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detectObjects</name>
      <anchorfile>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</anchorfile>
      <anchor>a3af9e4c6d1a4f4424a1abce9fdd691fb</anchor>
      <arglist>(const aikido::planner::WorldPtr &amp;env, ros::Duration timeout=ros::Duration(), ros::Time timestamp=ros::Time(0.0), std::vector&lt; DetectedObject &gt; *detectedObjects=nullptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::Planner</name>
    <filename>d7/d95/classaikido_1_1planner_1_1Planner.html</filename>
    <class kind="class">aikido::planner::Planner::Result</class>
    <member kind="function">
      <type></type>
      <name>Planner</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>aa7c8b27fa7e81afef98b9581efcd5b89</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Planner</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>aadcd4a8a79d5f4ab4e25a904624407d6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>adecae74f36990fb5e32c1a1c450883b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>common::RNG *</type>
      <name>getRng</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>a9001caf7f88cf2c7e81645b8d1f05f31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canSolve</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>a91cabbc7eb5e8a2b1302b348e20ea72a</anchor>
      <arglist>(const Problem &amp;problem) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>a75b7424062c3503ca7d3fb2c2493d113</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>a3aca1992ac50d7e5f8102dcd6ab5ff07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d7/d95/classaikido_1_1planner_1_1Planner.html</anchorfile>
      <anchor>a38a4f3c1c3af4a1c0308cbaa7ff05549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::PlannerAdapter</name>
    <filename>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a6dc28e242d38ca522bf91914467399ae</anchor>
      <arglist>(std::shared_ptr&lt; DelegatePlanner &gt; planner, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a7c91758865a28b20826b6c0c338b2295</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DelegatePlanner &gt;</type>
      <name>mDelegate</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a669c68637fbb871c2b62a5f9b0815092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlannerAdapter&lt; aikido::planner::ConfigurationToConfigurationPlanner, ConfigurationToTSRPlanner &gt;</name>
    <filename>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</filename>
    <base>aikido::planner::dart::ConfigurationToTSRPlanner</base>
    <member kind="function">
      <type></type>
      <name>PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a6dc28e242d38ca522bf91914467399ae</anchor>
      <arglist>(std::shared_ptr&lt; aikido::planner::ConfigurationToConfigurationPlanner &gt; planner, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a7c91758865a28b20826b6c0c338b2295</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; aikido::planner::ConfigurationToConfigurationPlanner &gt;</type>
      <name>mDelegate</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a669c68637fbb871c2b62a5f9b0815092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::PlannerAdapter&lt; DelegatePlanner, TargetPlanner, typename std::enable_if&lt; std::is_base_of&lt; dart::SingleProblemPlanner&lt; DelegatePlanner, typename DelegatePlanner::SolvableProblem &gt;, DelegatePlanner &gt;::value &gt;::type &gt;</name>
    <filename>d7/d29/classaikido_1_1planner_1_1dart_1_1PlannerAdapter_3_01DelegatePlanner_00_01TargetPlanner_00_01typ85f36c712489a59535144b182b295bc8.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PlannerAdapter</name>
      <anchorfile>d7/d29/classaikido_1_1planner_1_1dart_1_1PlannerAdapter_3_01DelegatePlanner_00_01TargetPlanner_00_01typ85f36c712489a59535144b182b295bc8.html</anchorfile>
      <anchor>a0a2e177dba7ff071df8d5f3a1a8929f8</anchor>
      <arglist>(std::shared_ptr&lt; DelegatePlanner &gt; planner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerAdapter</name>
      <anchorfile>d7/d29/classaikido_1_1planner_1_1dart_1_1PlannerAdapter_3_01DelegatePlanner_00_01TargetPlanner_00_01typ85f36c712489a59535144b182b295bc8.html</anchorfile>
      <anchor>a44c1cb722867da102f54068572d0674a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; DelegatePlanner &gt;</type>
      <name>mDelegate</name>
      <anchorfile>d7/d29/classaikido_1_1planner_1_1dart_1_1PlannerAdapter_3_01DelegatePlanner_00_01TargetPlanner_00_01typ85f36c712489a59535144b182b295bc8.html</anchorfile>
      <anchor>a0e2d72ac2405a2028723a450866ba6cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlannerAdapter&lt; planner::ConfigurationToConfigurationPlanner, planner::dart::ConfigurationToConfigurationPlanner &gt;</name>
    <filename>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</filename>
    <base>aikido::planner::dart::ConfigurationToConfigurationPlanner</base>
    <member kind="function">
      <type></type>
      <name>PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a6dc28e242d38ca522bf91914467399ae</anchor>
      <arglist>(std::shared_ptr&lt; planner::ConfigurationToConfigurationPlanner &gt; planner, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerAdapter</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a7c91758865a28b20826b6c0c338b2295</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; planner::ConfigurationToConfigurationPlanner &gt;</type>
      <name>mDelegate</name>
      <anchorfile>df/d98/classaikido_1_1planner_1_1dart_1_1PlannerAdapter.html</anchorfile>
      <anchor>a669c68637fbb871c2b62a5f9b0815092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::PlanningResult</name>
    <filename>dc/d4c/classaikido_1_1planner_1_1PlanningResult.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>dc/d4c/classaikido_1_1planner_1_1PlanningResult.html</anchorfile>
      <anchor>a9b4ade4aeecb2f7e7843cc0915034f53</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>dc/d4c/classaikido_1_1planner_1_1PlanningResult.html</anchorfile>
      <anchor>aa1e4b75c15a3d38b0b66b99e39c39c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mMessage</name>
      <anchorfile>dc/d4c/classaikido_1_1planner_1_1PlanningResult.html</anchorfile>
      <anchor>acfe803cdef081266342f72d3d6409818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>dc/d4c/classaikido_1_1planner_1_1PlanningResult.html</anchorfile>
      <anchor>adb0787892e557ef1643de92034267d63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::Spline::PolynomialSegment</name>
    <filename>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</filename>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>mStartState</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>a0d2f07b70e8819c789ba38bb76eb8120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>mCoefficients</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>a88c10f7fa23ca9f18c9f451245fb40cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mDuration</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>aa69ac3a05b9ec8d3a2bfd823ae7170db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::PoseEstimatorModule</name>
    <filename>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</filename>
    <base>aikido::perception::PerceptionModule</base>
    <member kind="function">
      <type></type>
      <name>PoseEstimatorModule</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a981b3b5085c7273a66205618968947c4</anchor>
      <arglist>(ros::NodeHandle nodeHandle, const std::string &amp;markerTopic, std::shared_ptr&lt; AssetDatabase &gt; assetData, std::shared_ptr&lt; aikido::io::CatkinResourceRetriever &gt; resourceRetriever, const std::string &amp;referenceFrameId, dart::dynamics::Frame *referenceLink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PoseEstimatorModule</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a4d5188b3f878d177d6bc76af3615e266</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detectObjects</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>acc95b012eec52f4dc84c60174e71c75f</anchor>
      <arglist>(const aikido::planner::WorldPtr &amp;env, ros::Duration timeout=ros::Duration(), ros::Time timestamp=ros::Time(0.0), std::vector&lt; DetectedObject &gt; *detectedObjects=nullptr) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>mNodeHandle</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a791ae43ea5e5a2285ff1715c2b4818f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mMarkerTopic</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>aeadbd51ac344178650e7a9435a5f9dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; AssetDatabase &gt;</type>
      <name>mAssetData</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a15ac04ad3b6fae4836f1e59e29fc7661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; aikido::io::CatkinResourceRetriever &gt;</type>
      <name>mResourceRetriever</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a1e301f04e249295d8713d621de2b2017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mReferenceFrameId</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>abda6c18c0f49dc4d8507427eeb4c7055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::Frame *</type>
      <name>mReferenceLink</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>a51771cfaaee5a99d4c7de65016cdb5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tf::TransformListener</type>
      <name>mTfListener</name>
      <anchorfile>d4/db6/classaikido_1_1perception_1_1PoseEstimatorModule.html</anchorfile>
      <anchor>adc1611ee04b97e74b1016edba287b6d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::PositionCommandExecutor</name>
    <filename>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PositionCommandExecutor</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>a52fd19e414bc2eabc5c4d5e92c53db05</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>a8f4e8c0c3fe1a9c198af792949ec7bb4</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>ab4f6244d621d8ebc7720001de06099af</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::system_clock::time_point</type>
      <name>mTimeOfPreviousCall</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>aa09708704dcc6443c6604239d3af6d83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::Problem</name>
    <filename>d3/dc0/classaikido_1_1planner_1_1Problem.html</filename>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>aff745230e22c3f57cb65d94fd31cd1c2</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, constraint::ConstTestablePtr constraint=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Problem</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>a6ceb60f483b63384ac20c83d1c7459c8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>a5196684b50abcfcfcf3d309dbeda157e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>a4a0da7d27acc855210292b5c742aa2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constraint::ConstTestablePtr</type>
      <name>getConstraint</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>a28a7a5e48773b4aa2d9a8198f5cdb020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>aa3042ac624078b919e96dd16d1a02722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>constraint::ConstTestablePtr</type>
      <name>mConstraint</name>
      <anchorfile>d3/dc0/classaikido_1_1planner_1_1Problem.html</anchorfile>
      <anchor>a0498fc7cc9594fb65f3c73b22306ccea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Projectable</name>
    <filename>d1/d26/classaikido_1_1constraint_1_1Projectable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Projectable</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>aeab18cc3f462922d476dcac255828b4a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>ad2c978a80a76f80c269ee98adeb83934</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>ad759802f9a5864781d3b19ba0e1f7aa5</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>af35aa18ed7ac29c70c1e04df1cf31d93</anchor>
      <arglist>(statespace::StateSpace::State *_s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::JointStateSpace::Properties</name>
    <filename>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a8a1a78b64bf648c0bca35f670471e72a</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aea61bd29ebe12ba8d1906c77bd7f81e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a024bda7103392f6984674fea183a9310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2d4c69f4c1e1ed587635003a7a16376e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofNames</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>acc5b85408a668103fc98eac0541d28ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPositionLimit</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a894d64c70c9d8752ecdf36c0c73665a8</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositionLimited</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aaa95c06f6552e02073d58b1bb4502acd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>af4e64650f9cc853bb8027ec7045b7e13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a1d6ce305c739cd4769944e309fce28e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a8ce6d6ccb4292ed1970aa78592d5a62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aee04063f01f9c7c48ffddb47861b4ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a156722748b8d957316396a8b1f7fd2f2</anchor>
      <arglist>(const Properties &amp;otherProperties) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aaf551014931a552dbfaf9cf01412b267</anchor>
      <arglist>(const Properties &amp;otherProperties) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad1ba4c89b6f13b82d71dfb0ab60ef2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mType</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>af0a6ac7b77e2210b03196931744f29ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mDofNames</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a37e6d0c590d426bb722a4a08cfb5659b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aa3ca052d5857ca323639a9d47258518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a72ab6a3315cd93590a3d635464245548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; bool, Eigen::Dynamic, 1 &gt;</type>
      <name>mPositionHasLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a8ece5292f7ce6c45fa09bcf1aab88689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a526073dcf5eab4b7613c67845334d88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>abdf0aa323302b21e88e962cac0d4860b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSpace::Properties</name>
    <filename>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>abd5b19e3a77c35e7a169fb6ef45ff5aa</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>acd8e16f1bd516fbae58a685a82fe7dfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumJoints</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a626a3afa334bd864d8c2510d8bd6b55d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>af76c1a97c2896d26ae352d1507debb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofNames</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a30c285f8d2dc7b2ed32f1f96c495fd49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDofIndex</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>abf0145f40a1825a1d2c79a200920d4db</anchor>
      <arglist>(std::size_t ijoint, std::size_t ijointdof) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDofIndex</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>abe4cd3d32df16e5d1e5868b0f959928d</anchor>
      <arglist>(const std::string &amp;dofName) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a59449385a97f2d940fc33e730a5d4010</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>aad60f03b536e806d420a800982752e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>afe040bc2f5e4c4a9ca24c519bea7fe2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a0007b81f6661803bd425b1adb2a8b970</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a827689ebce57d524f665aad8aa56c6da</anchor>
      <arglist>(const Properties &amp;otherProperties) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ae27097d1b60b0f4a393a1ed6e49c716d</anchor>
      <arglist>(const Properties &amp;otherProperties) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a31339a2591e4315ed6826aa536abfd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>mNumJoints</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2efaf685d45938bc0344a4ee441754a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mDofNames</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a3d256fbb856a8372bcb621d7c5c84364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::pair&lt; std::size_t, std::size_t &gt;, std::size_t, aikido::common::PairHash &gt;</type>
      <name>mIndexMap</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a50ad80c2c4eacf48827f55fd3ebb8c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a76c7714472b0d297382dd4eec182a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2dd77696ec28b2751ad53ce16d3647e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad1f798eb6b8735e468fbdd6d29a39516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ae50adfb5971553847d9c804cd0b9db14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::QueuedTrajectoryExecutor</name>
    <filename>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>QueuedTrajectoryExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>af61401450838902e7774104d7558affc</anchor>
      <arglist>(std::shared_ptr&lt; TrajectoryExecutor &gt; executor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QueuedTrajectoryExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a7ab00197520dd72721e8f89eb7b66439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a15ad9e3e5eefca60677b773957036bbf</anchor>
      <arglist>(const trajectory::Trajectory *traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a03e66ca61b50f1d14f066e32c24145ba</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a58d08560e4c2bfd4ec2e17fa71d5013d</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a119c45995df6d59f1642edf3496adf11</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>mExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a918effcca17d3c286681cc6fc3b28b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a2a6f1b0f1e83f58e94f748cad843e54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::future&lt; void &gt;</type>
      <name>mFuture</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a577ddc41b0db7c485fb089e88a8fea0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; trajectory::ConstTrajectoryPtr &gt;</type>
      <name>mTrajectoryQueue</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a8c20565b3997f1e884c2f24358ac9c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; std::shared_ptr&lt; std::promise&lt; void &gt; &gt; &gt;</type>
      <name>mPromiseQueue</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a17fe6152a6861513dc1325ce9b609a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a7044a0d08826543f0cae1fd8c912cbbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::R</name>
    <filename>d9/d9d/classaikido_1_1statespace_1_1R.html</filename>
    <templarg>N</templarg>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::R::State</class>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a09f2bfd03888a07fa2686e6cc19c93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RStateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>adb3abe7fb50db47043cd2d3fd4faac13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RStateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a35116efe5941a240dfc96570fb0b504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a48d1cf13031f91731266f9854cff877b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa839bd6222be2317b8b651b9502c7f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>R</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1c1e3fb2d38a199f04e2d40245b81e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>R</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1b6d9e14c579769027b8161dc2641194</anchor>
      <arglist>(int dimension)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a202cf4e3ba5b027dfb21bad3c8d4fad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a9beab755b0e2634409af103616ce7689</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const VectorNd &gt;</type>
      <name>getValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a66884f49f11c5f16e33d7961754aced4</anchor>
      <arglist>(const State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>ab3e6fd30610ed463e819ec15af3ab228</anchor>
      <arglist>(State *_state, const VectorNd &amp;_value) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>ac61d9cf0645efb9edf382acdc1707c95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1ac61590ecd3486a68da62da709c70dc</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>afd0a0a5ea633cccea257170ec1e21833</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa37de9dad9c29151ef551f7eed2e64a7</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a88b3461843aa8967fa7d8a50a14e1103</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a3e33f548f48371bd41cc6bde4a70cfd0</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa6795e1c6cfb995179746e894c3a6b9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1566b0886a698ff422905100815a911b</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a577cb0c36fdca2337536117e9f21a803</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1e1e101735e4de9078326db395807a4e</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a5954ad35cdfb4f166eed4cee8ee6fbb3</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa47b0038a27909e7b0804099769233e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::Map&lt; VectorNd &gt;</type>
      <name>getMutableValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a4ca349a6ce3c9ac4bb1768a536a0659a</anchor>
      <arglist>(State *_state) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mDimension</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a7ae43f0b48dd03dd82f7e60203f7a359</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::RankedMetaPlanner</name>
    <filename>d1/d04/classaikido_1_1planner_1_1RankedMetaPlanner.html</filename>
    <base>aikido::planner::CompositePlanner</base>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d1/d04/classaikido_1_1planner_1_1RankedMetaPlanner.html</anchorfile>
      <anchor>ab47a8ece8aa9d5aff520a1093ffa6fbc</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RBoxConstraint</name>
    <filename>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ac46ad3e7f6fc798e8364f3b6ac299ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RBoxConstraint</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a2ab3748693da454139272e1b9494f4c4</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R&lt; N &gt;&gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng, const VectorNd &amp;_lowerLimits, const VectorNd &amp;_upperLimits)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>aa62a3d2d5e495918de17c52f4abb0ca6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>aa0d52a8098a36512187fccdc12ef9030</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; constraint::ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a81e2cd8f043fb943b480cb6602fa80d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a4fe9e683e38b58b9b554025f39c848ef</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a97cbcb53221631b413f9146537fda044</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>aca8f3ead581b7481ab5f73e543c754bf</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a2187a9895f6fe0bc08d620262bb0862c</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a1c9138f108cab6b28fb4b91702e35e0c</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a5f2dae228b6dd059a321df45db453e4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getLowerLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a8549c6cab947391c39d81a0adbd92d04</anchor>
      <arglist>() const -&gt; const VectorNd &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getUpperLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ae8f570a6ea78517bac239c548ad3138c</anchor>
      <arglist>() const -&gt; const VectorNd &amp;</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ae90a078bfce9084609a73643f67c5b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a0da5cfbd0d61f5556b0733a6e9144823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mLowerLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a187e8b63de09c0b757ab8d89803547d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mUpperLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a5aaa9a7c971e9287c46a7a9f9039bbaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RConstantSampler</name>
    <filename>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::Sampleable</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>abd2d29c294535c1c255c99ee7edde7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RConstantSampler</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ae6492506da141639c8ac6cdf7ba18b32</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R&lt; N &gt;&gt; _space, const VectorNd &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ac13121627663e1c0e5e049a9889fe03f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ad04ff4f70c871f21c365c44dd78a38cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const VectorNd &amp;</type>
      <name>getConstantValue</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>afdf877fe43e3df8ebd720f132a68994b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ad1512f34cfd40cbe00068e7372ee8712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mValue</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>a9c326500da5b0a6f5ed9a2cacc14386f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::RejectionSampleable</name>
    <filename>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>RejectionSampleable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a48d2c2e7e7d3b6dcbbbfa5a77378e79b</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, SampleablePtr _sampleable, TestablePtr _testable, int _maxTrialPerSample)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a32cebca38ef1adaea1076c175d2a2958</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a134234236eae28cace753e89107e135d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a32a8af3231d24d803cd4c22492bf85f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSampleable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>ae6c7d2e9265e38c61444f23b9ca95774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TestablePtr</type>
      <name>mTestable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a13d838d1aa4be777bb820529e6962a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxTrialPerSample</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>ae88e3142180589a57c0631f9ec5c1695</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::ResourceRequest</name>
    <filename>d3/dfb/structaikido_1_1rviz_1_1ResourceRequest.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; BinaryResource &gt;</type>
      <name>resource</name>
      <anchorfile>d3/dfb/structaikido_1_1rviz_1_1ResourceRequest.html</anchorfile>
      <anchor>ae6bfca5301ad70a35e82d926bdfb8ae7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::ResourceServer</name>
    <filename>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>aeab3ccae4164cfc42cc18a8101a96eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a1b0870b11c85b20838667d15209c8895</anchor>
      <arglist>(const ResourceServer &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>ResourceServer &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>afbdd341fa5fde93a2022d08f35fce8a2</anchor>
      <arglist>(const ResourceServer &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a42c3df63e8b7464e63a1bb783cd96ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ad36f05070776b625a4aacbc554785d98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getPort</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>adabd5be765f5fcc893a66b38b5226814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a16d4f70eeb224a8f15d529a3fe71935b</anchor>
      <arglist>(unsigned short port=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a3112a4794a217e9aa2af974866b85db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addMesh</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>aa7f773b22efa86066f357d29f6e6c5ff</anchor>
      <arglist>(const aiScene &amp;scene, const std::string &amp;scenePath)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; MeshResource &gt;</type>
      <name>MeshResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>afa9c725904588a0f752527bd568e8fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; BinaryResource &gt;</type>
      <name>ResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a9c2d7b0b34b8c10314cd1ad5c56dc9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; BinaryResource &gt;</type>
      <name>WeakResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a2716ae85c14cd95380e0c0f79bd043b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>getMeshURI</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>abbd21607e6ec99075bea75833145d6b4</anchor>
      <arglist>(const MeshResourcePtr &amp;meshResource) const</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>hasBuggyAssimp</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a4d42ac22847e959a5db4edc1e1363f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>queueHttpError</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ab2826194c877b108c010aae0f2807985</anchor>
      <arglist>(struct MHD_Connection *connection, unsigned int code, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ssize_t</type>
      <name>resourceReaderCallback</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ada2a456b49a3a51f150113c4beea54b1</anchor>
      <arglist>(void *cls, uint64_t pos, char *buf, size_t max)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>resourceReaderFreeCallback</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ab51a718a3ead3d39d4a29ab64845917f</anchor>
      <arglist>(void *cls)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>processConnection</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a5c83d32bcc5ef03bbd6654ff979e2eb3</anchor>
      <arglist>(void *cls, struct MHD_Connection *connection, const char *url, const char *method, const char *version, const char *upload_data, std::size_t *upload_data_size, void **ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct MHD_Daemon *</type>
      <name>mDaemon</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a9349e6a0dc73d682e269750734eb96f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mHost</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a43ac4c0ef49e24b720a402d22208ca41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned short</type>
      <name>mPort</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a0b2cb2f809ba3d41c59de953283ce874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a1e9c3e8152cd0b4fa1d23bb52e3b8940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; aiScene const  *, MeshResourcePtr &gt;</type>
      <name>mScenes</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a83b273d749135dc93737041fcd0a7900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; std::string, WeakResourcePtr &gt;</type>
      <name>mResources</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a567f92f5066a38ab7c4d5827019a75ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::Planner::Result</name>
    <filename>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</anchorfile>
      <anchor>ab266466e9b630faaf2ccb7d1f8d29c1f</anchor>
      <arglist>(const std::string &amp;message=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Result</name>
      <anchorfile>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</anchorfile>
      <anchor>a906976c1d9eafdfe7c96b159f09fc4b8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</anchorfile>
      <anchor>aac16d4f1eae5feb7e1cd81a53a7e0163</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</anchorfile>
      <anchor>a9ca67c084f6e19098d1f7c15a64e2344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mMessage</name>
      <anchorfile>d3/dad/classaikido_1_1planner_1_1Planner_1_1Result.html</anchorfile>
      <anchor>a8f2c5ecf5fc3fb9b2e0e587f998e9171</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::REuclidean</name>
    <filename>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</filename>
    <templarg>N</templarg>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>REuclidean</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>aba961416b980e90d2d806eb5b97dca61</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R&lt; N &gt;&gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>a175d137041f0f2c30d905368083cde31</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>a56ba4fe2189ecadf36ebf2285b2ded8c</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::R&lt; N &gt; &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>aba8edd5996d1ba9f7da67826c87a5b88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::RJoint</name>
    <filename>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</filename>
    <templarg>N</templarg>
    <base>aikido::statespace::R</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="typedef">
      <type>typename R&lt; DimensionAtCompileTime &gt;::VectorNd</type>
      <name>VectorNd</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>acd19bb6115c432e03f4617b8905d713f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::RJointTraits&lt; N &gt;::DartJoint</type>
      <name>DartJoint</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a4239f80068dbde997626b686de182fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RJoint</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>afd435daf8fd51746d27f2b60f057799d</anchor>
      <arglist>(const DartJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a3292c28bffb57a90d36b939e033e20b6</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a50060bc345fb139d1accea5fceeb6898</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a9cf84e5faed6a65a90c18139209bdd2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::RJointTraits</name>
    <filename>d4/dcf/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>::dart::dynamics::GenericJoint&lt;::dart::math::RealVectorSpace&lt; N &gt; &gt;</type>
      <name>DartJoint</name>
      <anchorfile>d4/dcf/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits.html</anchorfile>
      <anchor>a0cda43673573f7b925c55a817ba5eb01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</name>
    <filename>dd/d98/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits_3_010_01_4.html</filename>
    <member kind="typedef">
      <type>::dart::dynamics::WeldJoint</type>
      <name>DartJoint</name>
      <anchorfile>dd/d98/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits_3_010_01_4.html</anchorfile>
      <anchor>a7617b09d59bd128a86d37dae7b47f874</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RnBoxConstraintSampleGenerator</name>
    <filename>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::SampleGenerator</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a007228a7d05be63aa8449a02e45ee679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>abffea279af46c503085307cb801d0baf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a1909b7ecf0696794f7ffc9cd065971ae</anchor>
      <arglist>(statespace::StateSpace::State *_state) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSamples</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a3a797b1891a463e27d29a54f2b278147</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>aa05bb0518b6126410ac78977b97a42d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RnBoxConstraintSampleGenerator</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>abdc4fe09377a3f0e2a208acc40a81e4a</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::R&lt; N &gt;&gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng, const VectorNd &amp;_lowerLimits, const VectorNd &amp;_upperLimits)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a921de62fce04068bf7ca47d408dd76f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a0163c5af3e7cbbdfcad04e1871b0fd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::uniform_real_distribution&lt; double &gt; &gt;</type>
      <name>mDistributions</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a06d2b3e7a07bbbf19dfafe95743616b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RBoxConstraint&lt; N &gt;</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>ab7e9f0c3f6de62cc4bc7cdaf871dd054</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::RNG</name>
    <filename>d1/d28/classaikido_1_1common_1_1RNG.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>result_type</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a7de3f8c6d25e4ef403ce98b0b06d01b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RNG</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>affdb879e4c968f6a52b6e4316749f7a6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual result_type</type>
      <name>operator()</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a41507c8dd859edd82f071882901829e3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discard</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a6ca020034a0c5bd4f1560da721e77840</anchor>
      <arglist>(unsigned long long _z)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>af9694f1ad0edf820d073cd3f28944fd5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a84e6f0e25207d02a8185a542d8fbce51</anchor>
      <arglist>(result_type _seed) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>min</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a0b705e6b5cb247b00da02bcac178458b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>max</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>ad5fb705fa8722ed6a4439fab78643b2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>NUM_BITS</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a543218fbf4dfe9404dced872313689f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::RNGWrapper</name>
    <filename>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">aikido::common::RNG</base>
    <member kind="typedef">
      <type>std::independent_bits_engine&lt; T, RNG::NUM_BITS, result_type &gt;</type>
      <name>engine_type</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acb9616c745d4794d85d166e620af7c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>result_type</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a7de3f8c6d25e4ef403ce98b0b06d01b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ab912ba7e92fd118901f9006c5e195cb0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>aca789ca1090b80d749d8f68c744c2ca8</anchor>
      <arglist>(const T &amp;_rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a98568b49730a5b461179e448a2128290</anchor>
      <arglist>(result_type _seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acfbb6f1c9bceab7beb67bf751e062ef0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>rng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ad735f47ac2dcf222840d90b6d60aeb16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>rng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>adf54945f4f5aad5ea02ccdc701ca2bcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a9be6c9889386e1cef6091194a6debc19</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ade1cb94079ac375cb86edff11592dd6e</anchor>
      <arglist>(unsigned long long _z) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acfbb9d37572d71df589edab32d230012</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>aebf3f83a95fe1fe845482bb63038a65f</anchor>
      <arglist>(result_type _seed) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>engine_type</type>
      <name>mRng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a8662fcb978498608014da112b6fe9538</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Robot</name>
    <filename>d2/da3/classaikido_1_1robot_1_1Robot.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Robot</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a4710e8de50e608d60255c0404b0ec69f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a5e0d3133893acf084f2f8389c225d5a4</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a694c792574ece7b2f6c70dcb7a9b818e</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae99c7fb3e9acd08b631dfcc8408ba629</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>afa8718b04a2be919c22f728e4db39e3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a86e4a4cbaba560d9f928cde25ceac1d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a075d293387c58992892f8548c60825e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae9772cbedc3285e65c3bbef737c86df3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a426955efece731eb9e1a5c4f97a93891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae5f1d477af57127e4ca82df3d108afc2</anchor>
      <arglist>(Robot *robot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a49439185582d4cb4d786cf0424867f70</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a7a46c4ce426b7ada8635768f4180b2fa</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a097a7a4af2b312f76aac6f29900db027</anchor>
      <arglist>(const statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosJointStateClient</name>
    <filename>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</filename>
    <class kind="struct">aikido::control::ros::RosJointStateClient::JointStateRecord</class>
    <member kind="function">
      <type></type>
      <name>RosJointStateClient</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aaa8c1360a3167a757fa4ad922d607707</anchor>
      <arglist>(dart::dynamics::SkeletonPtr _skeleton, ::ros::NodeHandle _nodeHandle, const std::string &amp;_topicName, std::size_t _capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spin</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>ab1e4f75577d2d29d462386120a3e3a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getLatestPosition</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a1e42f2016573c5fcd02cb1102be1b75e</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;_metaSkeleton) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>jointStateCallback</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a853d9ee0ee845f3cfbc0542882ed891b</anchor>
      <arglist>(const sensor_msgs::JointState &amp;_jointState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>afb0eed5899a9e2dd5eb46a25dbfd5619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aa0c504a38d9e240cd8cac9b6694190ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; std::string, boost::circular_buffer&lt; JointStateRecord &gt; &gt;</type>
      <name>mBuffer</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a7f5f598f353f3dca56af5229362b50ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mCapacity</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a818a5981a12bbf1d1f637dea7500888f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>ab81532016a56e9984eeb2243607f2cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNodeHandle</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>acf948d7060f09596518ca1dc871d370a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::Subscriber</type>
      <name>mSubscriber</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aae58600b2d6025bfa5bffed26a28fc08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosPositionCommandExecutor</name>
    <filename>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</filename>
    <base>aikido::control::PositionCommandExecutor</base>
    <member kind="function">
      <type></type>
      <name>RosPositionCommandExecutor</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a8f27260610b7b1b7a38f4e68f7212f04</anchor>
      <arglist>(::ros::NodeHandle node, const std::string &amp;serverName, std::vector&lt; std::string &gt; jointNames, std::chrono::milliseconds connectionTimeout=std::chrono::milliseconds{1000}, std::chrono::milliseconds connectionPollingPeriod=std::chrono::milliseconds{20})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosPositionCommandExecutor</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a72806beebd280f5647e15ab08f686407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>abc284dd2bcea398372bcb04be2544762</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a0aeea939009d370a057030d0e26b63f6</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>actionlib::ActionClient&lt; pr_control_msgs::SetPositionAction &gt;</type>
      <name>RosPositionActionClient</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a89b6d2ab40762294e6cd3bc68a17e1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>RosPositionActionClient::GoalHandle</type>
      <name>GoalHandle</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a67ef864e1165dcd95b8884325d698670</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transitionCallback</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a845f582be2fc573403f27b1cc6d1720a</anchor>
      <arglist>(GoalHandle handle)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNode</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a1405e7ed6a048e48b3fb0a98a54bdeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a9f7b77c6c076ccdd7bb9f713564eb3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RosPositionActionClient</type>
      <name>mClient</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a6ec0683ef74366246ccb11a6a7354b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RosPositionActionClient::GoalHandle</type>
      <name>mGoalHandle</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a678897e37980af1faaf0617f10a4624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mJointNames</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a77ee78e39715c00de55048e2d65c0a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionTimeout</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a545bc48c4b9e536e92d72a6c41766b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionPollingPeriod</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a0509b251c52dbca86fc8096b97701d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a2f575f8aacde18e7327e82ecb2ee91ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a8bd2a268eacec2827d97b817b121003b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a718d7d2fa3c9e0f9718a4ac4f274eeb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosTrajectoryExecutionException</name>
    <filename>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</filename>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>a4e4223b51010d503108425235388ff59</anchor>
      <arglist>(const std::string &amp;what, actionlib::TerminalState terminalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>a5b8301e498a5e599e852852c214ccab3</anchor>
      <arglist>(const std::string &amp;what, int result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>aa1563b65b764f7e9023be247d864da5b</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosTrajectoryExecutor</name>
    <filename>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutor</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a5596e2a53473260fad95e9c980e902c3</anchor>
      <arglist>(::ros::NodeHandle node, const std::string &amp;serverName, double waypointTimestep, double goalTimeTolerance, const std::chrono::milliseconds &amp;connectionTimeout=std::chrono::milliseconds{1000}, const std::chrono::milliseconds &amp;connectionPollingPeriod=std::chrono::milliseconds{20})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosTrajectoryExecutor</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a86d19d567024017943b064c58f0c817d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a0039eb901ec83ea35b7d61b66a181901</anchor>
      <arglist>(const trajectory::Trajectory *traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a0d8cb6c507626e2a7338638abc5ac880</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a81a55a808e0c450d215a487490fa5c47</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj, const ::ros::Time &amp;startTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>acf9b15c2940df9ed53a72ec5c2228b0f</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a7e3921dfc85ebb56a19043ae3c220b26</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>actionlib::ActionClient&lt; control_msgs::FollowJointTrajectoryAction &gt;</type>
      <name>TrajectoryActionClient</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a5f6a7141eb2e8684de001d71d3b3a2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TrajectoryActionClient::GoalHandle</type>
      <name>GoalHandle</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a70d3b7276cedc0542c878014a19f1759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transitionCallback</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a23dd26f305101482985ce811f6b27585</anchor>
      <arglist>(GoalHandle handle)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNode</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a31764dd540b8c0b015e075970bc6ac7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a280689dd5cfc9e5c64f11a1bc21a2d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrajectoryActionClient</type>
      <name>mClient</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>afd270ee837e667dba76ecab669126977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrajectoryActionClient::GoalHandle</type>
      <name>mGoalHandle</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a7b57acd23314fe3bc59c956027cf17b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mWaypointTimestep</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a2fe96d0ec9a2792759c3ce52ee60ab13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mGoalTimeTolerance</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>adfa3ec24b707441c48808b2a7c5a3ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionTimeout</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a6146bbb3dcd8c8291443ee437003d1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionPollingPeriod</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a0c36d5ecd387ec00601c05303632cc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a198136cfd5411bf6aca597416cf9b4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a3bbfd82b0d5eb8337537b0e2a2905d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a12d1a87987914dab5cc1dda39d1ead2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::RStateHandle</name>
    <filename>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename R&lt; DimensionAtCompileTime &gt;::VectorNd</type>
      <name>VectorNd</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a5db83226b3e864cbbcb687e3f9f6f858</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, const VectorNd, VectorNd &gt;</type>
      <name>ValueType</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a1f2c5ebb94c6e898b09c8efefe4242c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RStateHandle</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>addd88c31fa40995c86b5f10e7363a59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RStateHandle</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>ac21da2c35f0d5f700f5fa17d873254a9</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const VectorNd &gt;</type>
      <name>getValue</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a4561bbe9e30fcee1d3d16129edd5ec62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a1300c0ffd403704bc584492278aeefa2</anchor>
      <arglist>(const VectorNd &amp;_value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a784b271e2538cbad5f9392cab6c77ce3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Sampleable</name>
    <filename>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sampleable</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>ac0494ea38e4cca7a47d2227ba1676a03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>a5f75db53bf56e24326cee06c8eefeb88</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>aec69bb8aa4ee5159052d31b522e3ce9c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::SampleGenerator</name>
    <filename>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SampleGenerator</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>afabe63ca4cbe1d053e009c88cf890de1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a54eef43b9b82e921f4b7206294b20e3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>ac8ff8567b64de788b7981b2d9a3197c2</anchor>
      <arglist>(statespace::StateSpace::State *_state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSamples</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a6433e0efe17904dfe26e9274aa4ac6ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canSample</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>ac44789fa2549d4b64b344825978cfb83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>NO_LIMIT</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a2d7ffa2d54d48c1faeff94eb07faee55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Satisfied</name>
    <filename>da/de2/classaikido_1_1constraint_1_1Satisfied.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>Satisfied</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a9c9c82b1036c9fda8d9fe580d8541096</anchor>
      <arglist>(statespace::ConstStateSpacePtr _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a8e94c0d6c4790751a412d7067d8f4987</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a9580284fa5890daf8efd899c8a47c530</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; constraint::ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>aebc58a6567604f2cee76cec83625b222</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a30eb5cf3ba8ba841048d3481c27453ac</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a9551ebebcc7c807efb81a9da972c6dc4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>aff48abf85938a82beac46cf06781ed1b</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a4f0fbb53656d4c4af28ea1370a094d53</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>ad58d8812911e85d11f44ffbf1b722d72</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a28ea8b5fffd9852b481d83e4df480cc0</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a93a7b0c1dc4fb58a9290d411ce890f2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::ScopedState</name>
    <filename>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>_Handle</type>
      <name>Handle</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>ae966ffb3073a29b6b0130c19f1c0e3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a0c928b68452c51f3c1eb919fc3af8108</anchor>
      <arglist>(const StateSpace *_space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>adb3e16e70547ae8fae93f43ba4c850eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4ebc38c2acd04ef0b634fc77ab9b097d</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4b9fecfa1e5751135eef5eb61b2462b5</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a5268567b81ecce8dc61477390eb77f52</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a70947e90f5366d0e1872478fc412bfe1</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>clone</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a2fd2e3a45ceee2c5b594ddbe7e92b7a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; char[]&gt;</type>
      <name>mBuffer</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a364890e79bb22a29ceab90701f717f47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScopedState&lt; StateHandle &gt;</name>
    <filename>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</filename>
    <base>aikido::statespace::StateHandle</base>
    <member kind="typedef">
      <type>StateHandle</type>
      <name>Handle</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>ae966ffb3073a29b6b0130c19f1c0e3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a0c928b68452c51f3c1eb919fc3af8108</anchor>
      <arglist>(const StateSpace *_space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4ebc38c2acd04ef0b634fc77ab9b097d</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a5268567b81ecce8dc61477390eb77f52</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>adb3e16e70547ae8fae93f43ba4c850eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4b9fecfa1e5751135eef5eb61b2462b5</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a70947e90f5366d0e1872478fc412bfe1</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>clone</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a2fd2e3a45ceee2c5b594ddbe7e92b7a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; char[]&gt;</type>
      <name>mBuffer</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a364890e79bb22a29ceab90701f717f47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SE2</name>
    <filename>d8/d72/classaikido_1_1distance_1_1SE2.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SE2</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>a295f2d1762d7b2aa866dd96e058bd1ba</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>a8369a905a8269d245d8a6d9e0762098a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>ac59f6cd5b44ec46a497ab99de45efc1f</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>ad516e2328570df77907d4f2b85c70e85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2</name>
    <filename>d5/dcf/classaikido_1_1statespace_1_1SE2.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SE2::State</class>
    <member kind="typedef">
      <type>SE2StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ae27aeaa61f9f1e23849b80cdae51c579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SE2StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ab4dd5d74af9583045e34f2701f77bd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a10d9e1a38f6f51daebd9b132e3172fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1b43f3d55cd7f9639858cdbdeb9fc297</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Isometry2d</type>
      <name>Isometry2d</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ac4980c21131b53411d9a78426db29e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a72e77161e26c5ce329b7cb0b220ba91c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a630ab8bc06b16a4dfb0b7b7a98bcbb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ae0681f06f9d747c87bcb01fbb8fabb00</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>const Isometry2d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a55fec60b9aa045be085d65435907dfc9</anchor>
      <arglist>(const State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a088407ed3d42d828777162ab42aad9c5</anchor>
      <arglist>(State *_state, const Isometry2d &amp;_transform) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ac3691cb4b911eae7aabde5e7a5afd994</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ad98b52b00ef62f33e01e6f481340c79b</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a9d36285ae2821bf28c8acc8cea44f8d5</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1f34c2efa38c6da3c440f2c9901a670c</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a4402310cac9e5015ce24a346caae22d9</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1223c74cae9b02dd82a287831e5da3ab</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>aee1330862fd11a5ff3fc8c2b5a177d62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a6a60a822d539ac2c2020e3878fdfee88</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>aedf7d0c19296916c44188394f4b98ce4</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a624ff2f116872f0ca17db5ff38c8f1c2</anchor>
      <arglist>(const StateSpace::State *_state, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a894f37bd63b9b450971ecedef7b77148</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SE2BoxConstraint</name>
    <filename>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</filename>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>SE2BoxConstraint</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>ac7383a29c33e4bf8c0f64a92d01f97cb</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SE2 &gt; space, std::unique_ptr&lt; common::RNG &gt; rng, const Eigen::Vector2d &amp;lowerLimits, const Eigen::Vector2d &amp;upperLimits)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a62588ab968c0d57aba75d164c678609d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a19292ab2ef66a0fa1a0858756b64f37d</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a13c8fe0f81e60e433378a4cd5c3143a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>af536ab967c9dde59ba84b047a4874c12</anchor>
      <arglist>(const statespace::StateSpace::State *s, statespace::StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a089ee5f7cec6ec45cb01e2332bc67755</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>getLowerLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a5949b2dd3e1d9f84b1af73b59484e604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>getUpperLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a4a80b09fdca2bf46e655180998ba3fd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SE2 &gt;</type>
      <name>mSpace</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a41c0cd255839aaf3c351f2d630e6357b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a443004c4b4503848b225c196cc3c01c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>mLowerLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a9a472b336d779e2a64882d89ae254512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>mUpperLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a7787a612257012b6608f684d9d6a5418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mRnDimension</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a1268f8e78c2972430a85c645be899c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mDimension</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a63c83780ca7ce21f92974352758301bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SE2Joint</name>
    <filename>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</filename>
    <base>aikido::statespace::SE2</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="typedef">
      <type>State::Isometry2d</type>
      <name>Isometry2d</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>ac4980c21131b53411d9a78426db29e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2Joint</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>ad8f81fe9d734815e0e2446cf72ced0e0</anchor>
      <arglist>(const ::dart::dynamics::PlanarJoint *_joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>af66ef7e177d61c5354a16d7d14b15f16</anchor>
      <arglist>(const Eigen::VectorXd &amp;_positions, StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>a76f9c5c140fc29c41b35bbe2a312cb16</anchor>
      <arglist>(const StateSpace::State *_state, Eigen::VectorXd &amp;_positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2StateHandle</name>
    <filename>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SE2, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE2StateHandle</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>ae7e9984fff621b76e449caeb42c23f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2StateHandle</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>a9dd96d388131e1ead59d24a66abc937f</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry2d</type>
      <name>getIsometry</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>afaebedd7d58cf07a48b10505f012d38a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>a33251f6df1ceac6161d5acb70955a7aa</anchor>
      <arglist>(const Eigen::Isometry2d &amp;_transform)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SE2Weighted</name>
    <filename>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SE2Weighted</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a074122125d0d9268ff8d2169241b7c65</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SE2 &gt; space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2Weighted</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a05ecdd8a622ccfd370f216b48f5739ea</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SE2 &gt; space, const Eigen::Vector2d &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a1317feb645dd4cf7128ac634bf0c45c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a460f572f5c30b8302bb5bdd8c4d72cb8</anchor>
      <arglist>(const statespace::StateSpace::State *state1, const statespace::StateSpace::State *state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SE2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a821ff1728f8559467e480b60bdfa77a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector2d</type>
      <name>mWeights</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a72d13b05ad09630c2e3ab486cbc1f23c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3</name>
    <filename>df/d4f/classaikido_1_1statespace_1_1SE3.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SE3::State</class>
    <member kind="typedef">
      <type>SE3StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a2dac870be7d9a13e374f0763b3db291b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SE3StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>aeca58850b5f954c1668be393e4119143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a4274d3458924d824e0180893bedd9f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ae72255cd96c969174a634c7804264eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Isometry3d</type>
      <name>Isometry3d</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a56eccc70098f35a82c23bc4f22d20f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE3</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a796581a219080817422b67f4c6822c67</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a9b52273de7e1262efe327049fd0a9c46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a630c2e8ddb8b9fe014eec7fabfba7379</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>const Isometry3d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ae7e04e68751048bb731e5f201dcd1586</anchor>
      <arglist>(const State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a59c641990ca336592e45267b54be07d0</anchor>
      <arglist>(State *_state, const Isometry3d &amp;_transform) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac77b360690283b6303836ad3766f4d94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ae7df8d8238396fa9eeef835c5b7ef716</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a28a2af30cbf4f00157df4e213d13df2c</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a08b5c0b3d112a44776693968b8722bc3</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a33ddb1fbc0b8c88f6d35e551171e02b4</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a445ec2b751812cc963d9b3ad61294b52</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac756b8da2dd1efec87ec3de7c880c231</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac26b0baa0d89d633c094d99cff1188a3</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a3ac0fb0c6b311d2bc5a71bb5a5be4b6a</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ab8bcac95fb1f1c4c460103b34195a812</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a48842dbb8f9d508ba63b3f59e385dec4</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SE3Joint</name>
    <filename>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</filename>
    <base>aikido::statespace::SE3</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SE3Joint</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a540acdb4fdf5981388e53d8b0ce81f9c</anchor>
      <arglist>(const ::dart::dynamics::FreeJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a0952ecdb9824b86857763d7c7d9c6088</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a593b82231f43fb9dcf42f313d1761486</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3StateHandle</name>
    <filename>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SE3, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE3StateHandle</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a2ea438ed6bc404efcc3710ec7f518d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE3StateHandle</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a8888dc325f6c453104c5017e27d6cbaf</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getIsometry</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a3d31a4b45da70ecd4d575479d06a30a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a2535101dfff99e85a8eb98e0f7305fa1</anchor>
      <arglist>(const Eigen::Isometry3d &amp;_transform)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::SequenceMetaPlanner</name>
    <filename>d2/db0/classaikido_1_1planner_1_1SequenceMetaPlanner.html</filename>
    <base>aikido::planner::CompositePlanner</base>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d2/db0/classaikido_1_1planner_1_1SequenceMetaPlanner.html</anchorfile>
      <anchor>aa4e8113d355c7d87dd5f33eb116714f9</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositePlanner</name>
      <anchorfile>d2/db0/classaikido_1_1planner_1_1SequenceMetaPlanner.html</anchorfile>
      <anchor>adeb67da841df26c6f74469526cf813f8</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, const std::vector&lt; PlannerPtr &gt; &amp;planners=std::vector&lt; PlannerPtr &gt;())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::SequentialSampleable</name>
    <filename>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>SequentialSampleable</name>
      <anchorfile>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</anchorfile>
      <anchor>a67a4626c39277157bb10fb87ffadeeee</anchor>
      <arglist>(statespace::StateSpacePtr stateSpace, const std::vector&lt; ConstSampleablePtr &gt; &amp;sampleables)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</anchorfile>
      <anchor>ab5e53a9a08f7abed68a43ec89c9fa899</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</anchorfile>
      <anchor>a9e08321dd5f368d62836b2a4bbc47c2e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</anchorfile>
      <anchor>a236afd8dece0bacf390599a232febac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; ConstSampleablePtr &gt;</type>
      <name>mSampleables</name>
      <anchorfile>d4/d33/classaikido_1_1constraint_1_1SequentialSampleable.html</anchorfile>
      <anchor>ab928155a24e86be2d9392fb50e92eb98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::ShapeFrameMarker</name>
    <filename>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ad22084c9a14dc0f51cb1e1400b0a0663</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const std::string &amp;name, const dart::dynamics::ShapeFrame *shapeFrame, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ab276dc23640215b15509e8a39a992e4f</anchor>
      <arglist>(const ShapeFrameMarker &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ShapeFrameMarker &amp;</type>
      <name>operator=</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>afc17d8c43b1c7acf3042461e080be3d0</anchor>
      <arglist>(const ShapeFrameMarker &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a53f41cbbca0ccf59211e318706c464a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a03071ccc0758a382e1233c4ee6dddede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a61b0ced38701fbca8cbd8637a8a1b8e3</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a9fa600b5515241d2205a4fbcf93b07b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ab9852e7b051f36718c26ee865f9774b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>af7ad9d33c80aeb258370f63f43c03be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>addfbb0daff3b3f23b7f39e146a9dec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarkerControl *</type>
      <name>mVisualControl</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a226d41496a8a6e38ec8e02a9907f1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const dart::dynamics::ShapeFrame *</type>
      <name>mShapeFrame</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>aba1b59bb79a126de7cb92b5e6ca50d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a922484d44b44bbc4e94e4e00eb604ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mExists</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a02635eeaf341ffb985b4503dec89de18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mForceUpdate</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a2a01d614a2b092b5c417ff2184612ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mVersion</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a4fa289c3050708a14269e9b74f8bde20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mShowVisual</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a2669802755083bab22ab3dabdccd5397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mShowCollision</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ac82bb931d0f08ec000e509419e7e4148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::optional&lt; Eigen::Vector4d &gt;</type>
      <name>mColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>aed68309911f04238262b04369d8604e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::SingleProblemPlanner</name>
    <filename>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>aikido::planner::Planner</base>
    <member kind="typedef">
      <type>ProblemT</type>
      <name>SolvableProblem</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a2b3736a760eb27b6adba213a3d44317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a03264b3150459930f9221a938cde4cb0</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSolve</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a945a79f6dffb5dd6c75991559e21f643</anchor>
      <arglist>(const Problem &amp;problem) const final override</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aacacd654d9b601d7e3507ecb059b081f</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) final override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::dart::SingleProblemPlanner</name>
    <filename>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>aikido::planner::SingleProblemPlanner</base>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ae6e7b32beeca42c0c0a0214f4e0abb93</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aaff1ea247f8abb32852f677526140b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a18d0dca12c4727ae4fbddc0717de0bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ad3039d1f9cac2bcb31d76ca534731173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a46cb744c6c680dff0ab9da7832db5baa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleProblemPlanner&lt; ConfigurationToConfigurationPlanner, ConfigurationToConfiguration &gt;</name>
    <filename>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</filename>
    <base>aikido::planner::Planner</base>
    <member kind="typedef">
      <type>ConfigurationToConfiguration</type>
      <name>SolvableProblem</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a2b3736a760eb27b6adba213a3d44317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a03264b3150459930f9221a938cde4cb0</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSolve</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a945a79f6dffb5dd6c75991559e21f643</anchor>
      <arglist>(const Problem &amp;problem) const final override</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aacacd654d9b601d7e3507ecb059b081f</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) final override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleProblemPlanner&lt; ConfigurationToConfigurationPlanner, ConfigurationToConfiguration &gt;</name>
    <filename>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</filename>
    <base>SingleProblemPlanner&lt; ConfigurationToConfigurationPlanner, ConfigurationToConfiguration &gt;</base>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ae6e7b32beeca42c0c0a0214f4e0abb93</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aaff1ea247f8abb32852f677526140b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a18d0dca12c4727ae4fbddc0717de0bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ad3039d1f9cac2bcb31d76ca534731173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a46cb744c6c680dff0ab9da7832db5baa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleProblemPlanner&lt; ConfigurationToEndEffectorOffsetPlanner, ConfigurationToEndEffectorOffset &gt;</name>
    <filename>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</filename>
    <base>aikido::planner::Planner</base>
    <member kind="typedef">
      <type>ConfigurationToEndEffectorOffset</type>
      <name>SolvableProblem</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a2b3736a760eb27b6adba213a3d44317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a03264b3150459930f9221a938cde4cb0</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, common::RNG *rng=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSolve</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a945a79f6dffb5dd6c75991559e21f643</anchor>
      <arglist>(const Problem &amp;problem) const final override</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>db/d3a/classaikido_1_1planner_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aacacd654d9b601d7e3507ecb059b081f</anchor>
      <arglist>(const Problem &amp;problem, Result *result=nullptr) final override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleProblemPlanner&lt; ConfigurationToEndEffectorOffsetPlanner, ConfigurationToEndEffectorOffset &gt;</name>
    <filename>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</filename>
    <base>SingleProblemPlanner&lt; ConfigurationToEndEffectorOffsetPlanner, ConfigurationToEndEffectorOffset &gt;</base>
    <member kind="function">
      <type></type>
      <name>SingleProblemPlanner</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ae6e7b32beeca42c0c0a0214f4e0abb93</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>aaff1ea247f8abb32852f677526140b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a18d0dca12c4727ae4fbddc0717de0bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>ad3039d1f9cac2bcb31d76ca534731173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/d31/classaikido_1_1planner_1_1dart_1_1SingleProblemPlanner.html</anchorfile>
      <anchor>a46cb744c6c680dff0ab9da7832db5baa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::SkeletonMarker</name>
    <filename>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>SkeletonMarker</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a5c674d16ad79840035d42efab42b8a74</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const dart::dynamics::WeakSkeletonPtr &amp;skeleton, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a70f6f76d706fc086e3f48229aa41fa70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyNodeMarkerPtr &gt;</type>
      <name>bodynode_markers</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a3d98382e2ad0a86bfffaf262e846fdae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a2268298fbd6048a6a54e2dcee46b7564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BodyNodeMarkerPtr</type>
      <name>GetBodyNodeMarker</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>acc4309509868ad9a2da51a756d7e0857</anchor>
      <arglist>(dart::dynamics::BodyNode const *bodynode) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a73c2e60fa74a33cd621190d3ff1ed009</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a3361afd648c4314589203ca06473f05a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::WeakSkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a589084a0391f8ba52e95756c873dfb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>ab8163871e44b9f553de097191f0eb9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a0e101f3c73d0887fabbd8d18189d780b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; dart::dynamics::BodyNode const  *, BodyNodeMarkerPtr &gt;</type>
      <name>mBodyNodeMarkers</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a38ad3e5dc23754f2c6451c1daff97036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mHasColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>aefd5e7106d433d65f94da96a847d4596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>ac3791f7c5a328df7afa55732dd467582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector4d</type>
      <name>mColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a55d3de7964e960637d8338f6ebbf18fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::SnapConfigurationToConfigurationPlanner</name>
    <filename>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</filename>
    <base>aikido::planner::ConfigurationToConfigurationPlanner</base>
    <member kind="function">
      <type></type>
      <name>SnapConfigurationToConfigurationPlanner</name>
      <anchorfile>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a542a53a070e2f85a228c475f26275d47</anchor>
      <arglist>(statespace::ConstStateSpacePtr stateSpace, statespace::ConstInterpolatorPtr interpolator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a862394cbb39880c53ce1c1574fadb14d</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolator</name>
      <anchorfile>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>ad110608982b360d17d1dca64dd9c37cb</anchor>
      <arglist>(statespace::ConstInterpolatorPtr interpolator)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>getInterpolator</name>
      <anchorfile>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a1dca8666d65e47561207ba7f0b4de4d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>mInterpolator</name>
      <anchorfile>db/dff/classaikido_1_1planner_1_1SnapConfigurationToConfigurationPlanner.html</anchorfile>
      <anchor>a589c7e88ff6307b1f270cfb876e80ee7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2</name>
    <filename>dd/d4f/classaikido_1_1statespace_1_1SO2.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SO2::State</class>
    <member kind="typedef">
      <type>SO2StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>af3cfaeb8ef08bf0940fa330da5b5067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SO2StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a93db99e451e6bb27d8f10e0cd390a90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>abddfdcbcd49ac0b3447b0b39898638f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a830d494a55c005265ab79058466d6eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO2</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ae35a51772c4a55523e369fd8492528c0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a82bcd9b30ef93b99b95f4e4f56b0569d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>aa344c548c114b7d40afb5a451c66613a</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toAngle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ac4cf0bb8d8502f44dfd645409542cfc7</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAngle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a10affff868c1a3d6677506d3c2a06e40</anchor>
      <arglist>(State *state, double angle) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>toRotation</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a13a4f1e6134942116c5f2f1721406301</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotation</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ad63d359796c504e403336a5d8adc205e</anchor>
      <arglist>(State *state, const Eigen::Rotation2Dd &amp;rotation) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ab9015330713529ed6abc4382bf606142</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ab9825037b6369c1195d15a2cf56e86a8</anchor>
      <arglist>(void *buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a1e33438e4a104d660689e8b0e2352039</anchor>
      <arglist>(StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a8c06a184bfa7c3e56972ea5ca91eac6b</anchor>
      <arglist>(const StateSpace::State *state1, const StateSpace::State *state2, StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a3b706137734b26cd77f34a0fcebd2402</anchor>
      <arglist>(StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a22fb661acb09735b7332e68ad0754635</anchor>
      <arglist>(const StateSpace::State *in, StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ae1fc806ae9d63b9692f1730060349f51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a79cacc246cdcb44a6221fb7c9eb3f0ec</anchor>
      <arglist>(const StateSpace::State *source, StateSpace::State *destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a7fba2f2e91fda7fb959b027188655b40</anchor>
      <arglist>(const Eigen::VectorXd &amp;tangent, StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a3c78ba5e64fb8c750d93624775605d4f</anchor>
      <arglist>(const StateSpace::State *in, Eigen::VectorXd &amp;tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a8c4f5363c1be2a376aeff68e0bbcd98c</anchor>
      <arglist>(const StateSpace::State *state, std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SO2Angular</name>
    <filename>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SO2Angular</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>ad2fd68e1c04cb9df5120ca401e4c182a</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO2 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a6735c0e937edc627eea2477162198b70</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a272491427d144bca8f7d737f10f44393</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SO2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a2bd71b95f46f03834afe5886724d71f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SO2Joint</name>
    <filename>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</filename>
    <base>aikido::statespace::SO2</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SO2Joint</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a0d85824dae791fd78e6f8a1e7cfb8890</anchor>
      <arglist>(const ::dart::dynamics::GenericJoint&lt;::dart::math::R1Space &gt; *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a98a90f6afb54cf7c289823d0374d11b5</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a8715f78c8c4f3f130dcf51223a96f9bc</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2StateHandle</name>
    <filename>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SO2, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SO2StateHandle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a4dcb69f38247dc90a5f9e820b8546dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO2StateHandle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a597472126735132c6b93c9e6efdac8fd</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toAngle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>aeda98271a495c74067b3bfadb2e98987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAngle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a0715a0f5dc57296c38d9e8fbcc5b5353</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>toRotation</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>ae08fa7cad0533a068930d5e2b949aaaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotation</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>aae09540fa785faee95894bf2db9568b2</anchor>
      <arglist>(const Eigen::Rotation2Dd &amp;rotation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SO2UniformSampler</name>
    <filename>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>SO2UniformSampler</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>afeac56fe3ef1b4809c089ae77fbc6b4e</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO2 &gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a0a7317caa23812fa6d4313c21965c180</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a2862161abf678198885016772267344d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SO2 &gt;</type>
      <name>mSpace</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a4b37f35a3b6d6ae0e814993cad633bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a0a7c7e29dc88beeb823bfc1db622177c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3</name>
    <filename>de/d2a/classaikido_1_1statespace_1_1SO3.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SO3::State</class>
    <member kind="typedef">
      <type>SO3StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aee6d346d7cc1ab7882678d7ce2131506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SO3StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a19f3e359577eddff6bc8e35983d5d4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a84ab4ecd6c6024de88de865ff61a3c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>abafb686de2f749ea6427188b65ebbd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Quaternion</type>
      <name>Quaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a867156d2816df3de018653e43497e971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aa316756a78997d2a96ab8dd0a9badf39</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a9f8552e935dcd6d63e46be9319308a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>affd9df39588036d820085d162ea9679c</anchor>
      <arglist>(const StateSpace::State *stateIn) const</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ac254f7409cac70262ce81a44a56558d0</anchor>
      <arglist>(const State *_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ad2d0b9de37a79eb1d30569d1f08f0c94</anchor>
      <arglist>(State *_state, const Quaternion &amp;_quaternion) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a7e91d2446f68dac73cc5f8d359d79317</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a5df93db8bd216e83eba9321870d94c7c</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ac9b254d34da8a961a3d924c5ae9460c9</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ade07c47756d0232e00d39f4c3751ada3</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a7c2187563dcaf28e864578f200855cd2</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a49a2b1380179b9132213c6d7d72d00dd</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a772d92c300a96af6645285fc9d4d65b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a1400b39976474cbc811a4ece244febb8</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aa65993865918be312e6b0ea6f4038330</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a415aabe216e150a5b80486307ad1d079</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a5c00011d48598e61d0654209d0664d16</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a1d2627c83982666da64765cb65f7ebee</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SO3Angular</name>
    <filename>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SO3Angular</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>a417065a1cf36d5444ebdc2cbdd8466b1</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO3 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>a3cf2cfb5968daa02191cfca496f8e67a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>ad44bace895a3c0aeaf6358950428aaa7</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SO3 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>af37d088f60f8ea4298dbffd2d77c95ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SO3Joint</name>
    <filename>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</filename>
    <base>aikido::statespace::SO3</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SO3Joint</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>a262d89ed2977058436e75833e03c29f2</anchor>
      <arglist>(const ::dart::dynamics::BallJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>a54c50f8d64c3c9a359f49586ee32b469</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>add9023205456e2fe694820a1e047a23d</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3StateHandle</name>
    <filename>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SO3, _QualifiedState &gt;</base>
    <member kind="typedef">
      <type>typename State::Quaternion</type>
      <name>Quaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a6c36b2e651885151906e072f068b390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3StateHandle</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a64eac11eb5cdd1c3e660af9b7cf15a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3StateHandle</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>ae8849c78713dca8a503acac98a3cdecf</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a85421e6dc839ae8f6e000aaa6d9838e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a61bce194c118fbb4eb0ee04839e5aa82</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SO3UniformSampler</name>
    <filename>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>SO3UniformSampler</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a72e0ac020a0fdc8673f355984a91526b</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::SO3 &gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a890e668bf828eb51456f2aba1d32c568</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>aaed2ea6036f1a787368e7e8a0f20b896</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const statespace::SO3 &gt;</type>
      <name>mSpace</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a714dceab20e1d24c250a5c827df8e40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a5b800430a73d88564c3047e2aebf8c5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline</name>
    <filename>d1/de6/classSpline.html</filename>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Spline</name>
    <filename>df/d9c/classaikido_1_1trajectory_1_1Spline.html</filename>
    <base>aikido::trajectory::Trajectory</base>
    <class kind="struct">aikido::trajectory::Spline::PolynomialSegment</class>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ac272f9487fd2e3f3cbdebdcf91425f6e</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, double _startTime=0.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Spline</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a416302cb62209a07a49323adc063ef95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a5f8169b7e883d63ef078c5c62b8482e1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _duration, const statespace::StateSpace::State *_startState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a2b18c47dc676e4ad5fa42c4256bdc860</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _duration)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSegments</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a47c7a19c8bbf20aba7a5614804be5af6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a3bf6ccd39bbc22e81047dd5993fc8493</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a07df1d6567fa29ab7e958c88a9ecb635</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a10d9ffb6373c2a2b76c57b9a74a4b53b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>acf16befaf3d628f575cd3fe0fae53c25</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a4693a28449a17760c289e8194721331e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a0f9b5cc24ca171aa743655b86ccc6cc5</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivative</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a9b4ab7558a90397ebf8dad78c6f2e848</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a65ef38f56a8a472d5c1545bd25ce7d39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWaypoint</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a09649e4b4bfdaecc8d3071659a7a9b7b</anchor>
      <arglist>(std::size_t _index, statespace::StateSpace::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWaypointTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a63d511b2e771050389aaca7b8a1f2cb5</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWaypointDerivative</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ad4a60f3bf1cf5c9fc1e483e7c6ec5947</anchor>
      <arglist>(std::size_t _index, int _derivative, Eigen::VectorXd &amp;_tangentVector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSegmentDuration</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a7f9ce8caa199f68495af0c13de694d36</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>getSegmentCoefficients</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a2d044f018f83e439dd0126cb1ab4a3b6</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function">
      <type>const aikido::statespace::StateSpace::State *</type>
      <name>getSegmentStartState</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a1b2aa3e05a3cedb6cdbdfa59f7fa8849</anchor>
      <arglist>(std::size_t _index) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; std::size_t, double &gt;</type>
      <name>getSegmentForTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a088bc984d17b507272fbec836964a2ce</anchor>
      <arglist>(double _t) const</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Eigen::VectorXd</type>
      <name>evaluatePolynomial</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a6235a36a6c396e192fd1b7dd157f6a30</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _t, int _derivative)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a80f8f0aff92b6a66059833c20d31dd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mStartTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ab2857db05f49965e4adee7588edd0075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PolynomialSegment &gt;</type>
      <name>mSegments</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a9a62756524518742b358443c2dd1ae52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::SplineND</name>
    <filename>d1/dca/classaikido_1_1common_1_1SplineND.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_NumCoefficients</templarg>
    <templarg>_NumOutputs</templarg>
    <templarg>_NumKnots</templarg>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>afdc52203b5ed71e0be5ce818651cc959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Index</type>
      <name>Index</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aee563231ec15026eec143209ecbde2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumKnotsAtCompileTime, 1 &gt;</type>
      <name>TimeVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ab196b6735f27565de53431f6585f4fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>SolutionMatrix</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aa62520e1bfcbef07be6a51cc21551185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, 1 &gt;</type>
      <name>OutputVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a7b1409e401d44b61fa74d505c29a9560</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt;</type>
      <name>SolutionMatrices</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a59775ad55e110c6e49409b22a2314fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a07c6fb6615f41369f96780f320d7de54</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a9b19d6a24b3f89c9dd97bf841b83d78a</anchor>
      <arglist>(const TimeVector &amp;_times, const std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt; &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a15da823e0d0022157d35056196235680</anchor>
      <arglist>(SplineND &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a8c01e20bb5b5c6989e7499bfce10ce55</anchor>
      <arglist>(const SplineND &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineND &amp;</type>
      <name>operator=</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a4d385a5d7db6df7d7bda65fb33d63062</anchor>
      <arglist>(SplineND &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineND &amp;</type>
      <name>operator=</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ab6d3efa39bbbd56cb68010ed235912b3</anchor>
      <arglist>(const SplineND &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a986912275683274769a75d9fde75ead4</anchor>
      <arglist>(Index _index, Scalar _t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a5c5da20abd268bbe9349d442769d8eab</anchor>
      <arglist>(TimeVector &amp;&amp;_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a4e162c020a5b2ba68dcd3b736daa929c</anchor>
      <arglist>(const TimeVector &amp;_t)</arglist>
    </member>
    <member kind="function">
      <type>const TimeVector &amp;</type>
      <name>getTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aa0b341d27c49521ad1501ff8b26de524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SolutionMatrices &amp;</type>
      <name>getCoefficients</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a4ae3bba62bcc5d222c225fd20e10b89b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumKnots</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a341fd04245bc31484fa6c20a17554a4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumOutputs</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aca89ed0d4d3a868bd4db592c9f28608b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumDerivatives</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>acb77a9d4c031143ddb985fd9d2fe2c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumCoefficients</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aef47c1527f8f7cfc04ba3127174b9628</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDuration</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a27d2150019a7916a261cf36decddc493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getSegmentIndex</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ab6c23f8c2faa781d781a72247cef0442</anchor>
      <arglist>(Scalar _t) const</arglist>
    </member>
    <member kind="function">
      <type>OutputVector</type>
      <name>evaluate</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a620be21830b9c030dc15af09db4829b8</anchor>
      <arglist>(Scalar _t, Index _derivative=0) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumCoefficientsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ad1b7eeea93f84e5619b161d8d79ac48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumOutputsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>acd25055ce1d01087a920661a2f4d6a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumKnotsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ae0ae032ace76207e8c54c684d6e59065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumSegmentsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a308fe2606eede2a07c651552380617d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a62a632c0ccf00b18048723b5d44e32dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, 1 &gt;</type>
      <name>CoefficientVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a56555f7cdece7be9e69c1c0ad9061478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aca2df737369d2fe7cfa725e9a905f236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeVector</type>
      <name>mTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a26fce2ca513befe4f20f67f380d2d4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SolutionMatrices</type>
      <name>mSolution</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a37ded18841102a8ca8c5c9c93117f978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::SplineProblem</name>
    <filename>d9/d97/classaikido_1_1common_1_1SplineProblem.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_NumCoefficients</templarg>
    <templarg>_NumOutputs</templarg>
    <templarg>_NumKnots</templarg>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a53c3aeb45a8ccef61ddefee78aecbf43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Index</type>
      <name>Index</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a329bee141521e133e33c722b5863baf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumKnotsAtCompileTime, 1 &gt;</type>
      <name>TimeVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a91ff97055a983f344b3265ef01c74517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, 1 &gt;</type>
      <name>OutputVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9d15b753e5c4b4ce07efe8e35ac16d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumOutputsAtCompileTime &gt;</type>
      <name>OutputMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a86a50c8d0d9c393537c558df09a95c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, 1 &gt;</type>
      <name>CoefficientVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ad793d6b116d214f4185dd858227e7c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ae9f08550bca7472aba07584559b5217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; Scalar, 0, Index &gt;</type>
      <name>ProblemMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9936b7cf8e41446edf146c8a4c622f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, DimensionAtCompileTime, NumOutputsAtCompileTime &gt;</type>
      <name>ProblemVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>acc4e15f55d1b3125affa25ed33c77b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>SolutionMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ac38e0eb89fbcbc994e4d978e0385d614</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineND&lt; Scalar, Index, _NumCoefficients, _NumOutputs, _NumKnots &gt;</type>
      <name>Spline</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a3946fca2dd31538767a59d25777a7d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a8da0fadca3122a9d7d72c205dacd8063</anchor>
      <arglist>(const TimeVector &amp;_times)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5162fd4971844d2e73736190cdfdd1f8</anchor>
      <arglist>(const TimeVector &amp;_times, Index _numCoefficients, Index _numOutputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a2aba5606b3f9475348b51f8fea8ab00a</anchor>
      <arglist>(SplineProblem &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a38f1ee34d64caa95946deacd67187c85</anchor>
      <arglist>(const SplineProblem &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a0060aa15e27e66dc1f7581e8bb5da8b7</anchor>
      <arglist>(SplineProblem &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a438935cd67d7f083877a0ff11bcd5f76</anchor>
      <arglist>(const SplineProblem &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstantConstraint</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a1740e2d8467d194dab07b6f086a03c9e</anchor>
      <arglist>(Index _knot, Index _derivative, const OutputVector &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContinuityConstraint</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5afc0fc1887da0588137ea7d111eb4e6</anchor>
      <arglist>(Index _knot, Index _derivative)</arglist>
    </member>
    <member kind="function">
      <type>Spline</type>
      <name>fit</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aa59732a0938590b77e7a334b2c0ad032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumKnots</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a73c7521dc029987f7846c18f91162831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumOutputs</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ac79eff6fe5e23f6e3740d67a3eab8650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDuration</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ad1d3ec1284c57e6cfaf9ac0e6894e79b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoefficientVector</type>
      <name>createTimeVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a13170e1862d1fc40d8e150ddd08750fc</anchor>
      <arglist>(Scalar _t, Index _i, Index _n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoefficientMatrix</type>
      <name>createCoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ab376246499a6b0179e91431115185703</anchor>
      <arglist>(Index _n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumCoefficientsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ab702c509d75e3cdc3058e3ec8150cfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumOutputsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a0a582aaa7bf1e6a40a6142e55b29cf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumKnotsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a4ef751411147b2091183c306913a8462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumSegmentsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a1934e7156b65ffd3980d37c990a3ce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a3959d89830c89b8c77930e7249066e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumKnots</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aaaf61ac795b4ab9c1a36040e1a2b8e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumSegments</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a876e51b8ed962c3dae6b53dd06e8de10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumCoefficients</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9bf3a4d49d8531e09ef8faaafca645d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumOutputs</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ae23326aed182a49abb4d813171544ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mDimension</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a18bf3b57432d749ddc2ad09e2ce415ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CoefficientMatrix</type>
      <name>mCoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5395f3580f94bdfce9795742ca04d9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mRowIndex</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aa087e0f8e8e4e729ef5cd1f92c56d4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeVector</type>
      <name>mTimes</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>af3f9e7069623979c9af8edeba2dc5291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProblemMatrix</type>
      <name>mA</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a6d81a9ccf054b0c76aeb8c1057da89e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProblemVector</type>
      <name>mB</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a8db8c3e95504863a115d59a223feefd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt;</type>
      <name>mSolution</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aa891bd4467a4703732d959090df802ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::SplineTraits</name>
    <filename>d6/d9e/structaikido_1_1common_1_1SplineTraits.html</filename>
    <templarg></templarg>
    <templarg>DerivativeOrder</templarg>
  </compound>
  <compound kind="class">
    <name>SplineTraits&lt; BSpline &gt;</name>
    <filename>d6/d9e/structaikido_1_1common_1_1SplineTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt; &gt;</name>
    <filename>d6/d9e/structaikido_1_1common_1_1SplineTraits.html</filename>
  </compound>
  <compound kind="struct">
    <name>aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</name>
    <filename>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <templarg>_DerivativeOrder</templarg>
    <base>SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt; &gt;</base>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a0709dd2f5d0ff2ef3276cb2d89a68a38a4270788b0012311bc71451c0fb48c586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a3ea1b3bb6b8ee7d03fdce7c9a947f207ad4855d2458f415a37bdc16efa434cd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>acd12609e4a13d81198e7a7e3c8fcd5c3aa434f2b4e78e3ec868e980241b98b8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; _Scalar, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor, NumOfDerivativesAtCompileTime, OrderAtCompileTime &gt;</type>
      <name>BasisDerivativeType</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a6ad846a4cdbd79469ed59532873e5e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; _Scalar, _Dim, Eigen::Dynamic, DerivativeMemoryLayout, _Dim, NumOfDerivativesAtCompileTime &gt;</type>
      <name>DerivativeType</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a186c82af39ad55d7a0f4eced92548b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a0709dd2f5d0ff2ef3276cb2d89a68a38a4270788b0012311bc71451c0fb48c586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a3ea1b3bb6b8ee7d03fdce7c9a947f207ad4855d2458f415a37bdc16efa434cd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>d6/dba/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>acd12609e4a13d81198e7a7e3c8fcd5c3aa434f2b4e78e3ec868e980241b98b8ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, Eigen::Dynamic &gt;</name>
    <filename>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>ae5417cd71dca6b976e9fc0ce87dd1271ae3d5de16f73d6dedcd3cc54330cc7658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>aca64bccb19882d6cc4cf32e1be92d599a67df90085175d72657ae1b379caa2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a7f4eae324eb3351fb36257a6ceba8e82aebe43bc57c86c24adb17cb9e4ac69a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>ac2437de5bcefb1e1f1f7ba72532b49b6ae0785d13bd2c239abefa16d18909a5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a8d0b5602b60925ef9db61132d8bb175ea80088b24766e94d5aca36cedb328aed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a7f3c59d066b547b529c4d19865000536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, 1, OrderAtCompileTime &gt;</type>
      <name>BasisVectorType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a23cc417273156df737dc577b097a6d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor, NumOfDerivativesAtCompileTime, OrderAtCompileTime &gt;</type>
      <name>BasisDerivativeType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a6937fc1c151e94723a59da454e6ccaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, Dimension, Eigen::Dynamic, DerivativeMemoryLayout, Dimension, NumOfDerivativesAtCompileTime &gt;</type>
      <name>DerivativeType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a058f69f6be19bf2ae129731f366add8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, Dimension, 1 &gt;</type>
      <name>PointType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a8280ec049c259eaea6969f96cc2d449c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, 1, Eigen::Dynamic &gt;</type>
      <name>KnotVectorType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a0a28e5e00ba3e274f2e7b7a27c9dee28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, 1, Eigen::Dynamic &gt;</type>
      <name>ParameterVectorType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>af35f3961b7fcc593d108d2f1e892c9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Array&lt; Scalar, Dimension, Eigen::Dynamic &gt;</type>
      <name>ControlPointVectorType</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>ab010cf4672c069baa15d75c7921aa537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>ae5417cd71dca6b976e9fc0ce87dd1271ae3d5de16f73d6dedcd3cc54330cc7658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>aca64bccb19882d6cc4cf32e1be92d599a67df90085175d72657ae1b379caa2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a7f4eae324eb3351fb36257a6ceba8e82aebe43bc57c86c24adb17cb9e4ac69a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>ac2437de5bcefb1e1f1f7ba72532b49b6ae0785d13bd2c239abefa16d18909a5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>d9/dfe/structaikido_1_1common_1_1SplineTraits_3_01BSpline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Eigen_1_1Dynamic_01_4.html</anchorfile>
      <anchor>a8d0b5602b60925ef9db61132d8bb175ea80088b24766e94d5aca36cedb328aed9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2::State</name>
    <filename>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Transform&lt; double, 2, Eigen::Isometry, Eigen::DontAlign &gt;</type>
      <name>Isometry2d</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a259c8a71bafd5919917ff6f4653380c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>aee01038f3b7316cdb43f83c13fc3b36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>adda7ce9742c402d3f7f5cae780058052</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a7f1f727b274c590640f07874f3c88284</anchor>
      <arglist>(const Isometry2d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>adb1cd8fb8764688108bad274a5165c17</anchor>
      <arglist>(const Isometry2d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>const Isometry2d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>aa5681a12e9789dace0c237b00754419f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Isometry2d</type>
      <name>mTransform</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a4ade7124254d2390d011108d9fb25ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SE2</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a09322590b8c74f59d4084302eccc291c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3::State</name>
    <filename>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; double, Eigen::DontAlign &gt;</type>
      <name>Quaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a7a74b49d0c061bc6e359afc23b58e37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a771ffba9e4a7e95de243ac757396b9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>afab35e655a1cf8890699fb304b764395</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a47a02a7e7db1b18ee71b7a318f8fbeb2</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a93caccbb0dd6d8bfb8b2c7ab8328ea6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>ac3dea01d7b04cd6738946a7e8a229a04</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quaternion</type>
      <name>mValue</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a323cd75b8b6ce5287c1799e47893dc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SO3</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a6deea42e725e06fcd12333f6e685ca75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::R::State</name>
    <filename>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>adf0b2e87a168382f2a90e8146c893c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>a409fad3448c40f9a9c1dbb1133e35300</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>a2dce3b961587594be560276691a04b16</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>R&lt; N &gt;</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>aea9d48c198fd85772cd8c6bc66cd87d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2::State</name>
    <filename>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a07ccbe48c7883c4fe2b743a8d7c636e0</anchor>
      <arglist>(double angle=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a237b08f7d6cd7cb75906fd8c4eace72e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a696e15179303ff5a0f208a8fcd5ec393</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a428196fa9d844575bdd301f2ed7ebedb</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>toRotation</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a4cdc4abc39b12553a25da5009627ca66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotation</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>ab864ea2c42c3fdaac99d3a7380a316b2</anchor>
      <arglist>(const Eigen::Rotation2Dd &amp;rotation)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a806ddfb1218189278ed63e1f564f8bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SO2</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>aa4d72410658399bdf02026cdf5bc41e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateSpace::State</name>
    <filename>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</anchorfile>
      <anchor>ac0c5b446699f6ab6600291a98d10e126</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</anchorfile>
      <anchor>a465f97de19bfd3cad76c38db72e71357</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::planner::World::State</name>
    <filename>df/d21/structaikido_1_1planner_1_1World_1_1State.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>a670575973120d9705362d3a0151b3766</anchor>
      <arglist>(const State &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>ac210f97849cb99cb055dc6ad6f48e9f1</anchor>
      <arglist>(const State &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, dart::dynamics::Skeleton::Configuration &gt;</type>
      <name>configurations</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>a0978f478bd9e73ab3e4ba9467cb15262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3::State</name>
    <filename>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Transform&lt; double, 3, Eigen::Isometry, Eigen::DontAlign &gt;</type>
      <name>Isometry3d</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a44f28905e163e0d3da9628e1868a049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a29b9c477357cbf49027c5bad56a8f056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a794ce1aa1d2d17b85531508163160bb7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ab193b4bb8a3aec6ea02cac8ff7f1709b</anchor>
      <arglist>(const Isometry3d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a376c9d84e5d05c9f4d51f6d8896bddf4</anchor>
      <arglist>(const Isometry3d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>const Isometry3d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a8b4db207bb67c2bbcf9afa63dd562074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Isometry3d</type>
      <name>mTransform</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ad6ac1a4d7e6420c70e73db568abb2d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SE3</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ab3718cdf9e4bc6765b2d99afaf04648a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CartesianProduct::State</name>
    <filename>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>a0a6796cccb7963c4805f7eb86e660d6d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>ac2c5eac883eaa76068074c9f1cc770c0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CartesianProduct</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>adb2969bfcf868208027947990f3171e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateHandle</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>_StateSpace</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, QualifiedState, const QualifiedState &gt;::type</type>
      <name>ConstState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a648d6e27724a9287508b6648bda6eb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>adf4b392d28f3bdcebf310b81313f9bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a7abd023032c5c22539e672d7251cc52b</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa6a5d6cb73e77d56cc0b4cfdf9b291d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a654404007ded30ca3fbc8e1094728cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>af2a537de85c49e7b4e1378ee6f234e3a</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a531497b1e2746fdeb7bc0d70085d9267</anchor>
      <arglist>() -&gt; typename std::enable_if&lt;!std::is_const&lt; Q &gt;::value, Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a49d1fe7e9dd409a73638f8c54300851f</anchor>
      <arglist>() const -&gt; typename std::conditional&lt; std::is_const&lt; Q &gt;::value, Q *, const Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa684f8afe34572e40f1ccf5866ffe42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateHandle&lt; SE2, _QualifiedState &gt;</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <member kind="typedef">
      <type>SE2</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, QualifiedState, const QualifiedState &gt;::type</type>
      <name>ConstState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a648d6e27724a9287508b6648bda6eb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>adf4b392d28f3bdcebf310b81313f9bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a7abd023032c5c22539e672d7251cc52b</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa6a5d6cb73e77d56cc0b4cfdf9b291d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a654404007ded30ca3fbc8e1094728cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>af2a537de85c49e7b4e1378ee6f234e3a</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a531497b1e2746fdeb7bc0d70085d9267</anchor>
      <arglist>() -&gt; typename std::enable_if&lt;!std::is_const&lt; Q &gt;::value, Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a49d1fe7e9dd409a73638f8c54300851f</anchor>
      <arglist>() const -&gt; typename std::conditional&lt; std::is_const&lt; Q &gt;::value, Q *, const Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa684f8afe34572e40f1ccf5866ffe42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateHandle&lt; SE3, _QualifiedState &gt;</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <member kind="typedef">
      <type>SE3</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, QualifiedState, const QualifiedState &gt;::type</type>
      <name>ConstState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a648d6e27724a9287508b6648bda6eb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>adf4b392d28f3bdcebf310b81313f9bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a7abd023032c5c22539e672d7251cc52b</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa6a5d6cb73e77d56cc0b4cfdf9b291d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a654404007ded30ca3fbc8e1094728cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>af2a537de85c49e7b4e1378ee6f234e3a</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a531497b1e2746fdeb7bc0d70085d9267</anchor>
      <arglist>() -&gt; typename std::enable_if&lt;!std::is_const&lt; Q &gt;::value, Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a49d1fe7e9dd409a73638f8c54300851f</anchor>
      <arglist>() const -&gt; typename std::conditional&lt; std::is_const&lt; Q &gt;::value, Q *, const Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa684f8afe34572e40f1ccf5866ffe42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateHandle&lt; SO2, _QualifiedState &gt;</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <member kind="typedef">
      <type>SO2</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, QualifiedState, const QualifiedState &gt;::type</type>
      <name>ConstState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a648d6e27724a9287508b6648bda6eb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>adf4b392d28f3bdcebf310b81313f9bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a7abd023032c5c22539e672d7251cc52b</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa6a5d6cb73e77d56cc0b4cfdf9b291d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a654404007ded30ca3fbc8e1094728cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>af2a537de85c49e7b4e1378ee6f234e3a</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a531497b1e2746fdeb7bc0d70085d9267</anchor>
      <arglist>() -&gt; typename std::enable_if&lt;!std::is_const&lt; Q &gt;::value, Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a49d1fe7e9dd409a73638f8c54300851f</anchor>
      <arglist>() const -&gt; typename std::conditional&lt; std::is_const&lt; Q &gt;::value, Q *, const Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa684f8afe34572e40f1ccf5866ffe42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateHandle&lt; SO3, _QualifiedState &gt;</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <member kind="typedef">
      <type>SO3</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, QualifiedState, const QualifiedState &gt;::type</type>
      <name>ConstState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a648d6e27724a9287508b6648bda6eb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>adf4b392d28f3bdcebf310b81313f9bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a7abd023032c5c22539e672d7251cc52b</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa6a5d6cb73e77d56cc0b4cfdf9b291d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a654404007ded30ca3fbc8e1094728cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>af2a537de85c49e7b4e1378ee6f234e3a</anchor>
      <arglist>(const StateSpace *space, QualifiedState *state)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a531497b1e2746fdeb7bc0d70085d9267</anchor>
      <arglist>() -&gt; typename std::enable_if&lt;!std::is_const&lt; Q &gt;::value, Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a49d1fe7e9dd409a73638f8c54300851f</anchor>
      <arglist>() const -&gt; typename std::conditional&lt; std::is_const&lt; Q &gt;::value, Q *, const Q * &gt;::type</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aa684f8afe34572e40f1ccf5866ffe42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::StateSampler</name>
    <filename>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>StateSampler</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>af6cc91e259e23f4ed6302180b69b619c</anchor>
      <arglist>(const ::ompl::base::StateSpace *_space, std::unique_ptr&lt; constraint::SampleGenerator &gt; _generator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a97bc3dda98a6a49ebb7153d4ca4cf768</anchor>
      <arglist>(::ompl::base::State *_state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a0b23c75bdd66d0ed606bf851a1b3980c</anchor>
      <arglist>(::ompl::base::State *_state, const ::ompl::base::State *_near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a157459a43c928a5b33227f2948f55a12</anchor>
      <arglist>(::ompl::base::State *_state, const ::ompl::base::State *_mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; aikido::constraint::SampleGenerator &gt;</type>
      <name>mGenerator</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>aad4d89ed6b46931f7a2213982c08570c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateSpace</name>
    <filename>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</filename>
    <class kind="class">aikido::statespace::StateSpace::State</class>
    <member kind="typedef">
      <type>statespace::StateHandle&lt; StateSpace, State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>abc1486fdd4878268a24f1f24c5cf8a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::StateHandle&lt; StateSpace, const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a8c6e265d132e7c096c79a3d94458bf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ace74fb7490a262c4e5e264a5acd768f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a2b5942d50cc89c0e310c3bdfb471c874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StateSpace</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a1fb1e33c9468882e0517e19e396ac481</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a72160a42b05bf9a375b0cc12d9985dc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>cloneState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a6b78e08ef9855efae285f19b2ceeec41</anchor>
      <arglist>(const State *stateIn) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocateState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a6509dacb8d80a95fd74250ff2727fba6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ab4151cf453c92a005b1a9232cba85743</anchor>
      <arglist>(State *_state) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a56c8c12ec48a6f466dbf2f180ccdcb36</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>af6031783b2385162ca55dc1d82fdf754</anchor>
      <arglist>(void *_buffer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a882246cb7ff17caa2f12297729642cdf</anchor>
      <arglist>(State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a9e9da640509ceae48bf647da2d27cbb1</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a8ad6f25b7107b0b3c9c8850a1f9e3e68</anchor>
      <arglist>(State *_state1, const State *_state2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIdentity</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a26e6db779e6b67f0f3a54290d4ef8ed0</anchor>
      <arglist>(State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getInverse</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a18661369b471b7a8f91e62e13ebece5c</anchor>
      <arglist>(const State *_state, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getInverse</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a5462eb287e38fa6541f00d681a74b7ca</anchor>
      <arglist>(State *_state) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a4a7a5a52d1226be71c12e7d02f6b0648</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ad3c26cec35630d96dc746f0b76cbbd44</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>expMap</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a6f91b8c2b795a6351b2aeb17d827a0e5</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>logMap</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a21db7b888972e9cce874c5e3705f6ebb</anchor>
      <arglist>(const State *_in, Eigen::VectorXd &amp;_tangent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ac4e0199397bf4f01454b86a70f295424</anchor>
      <arglist>(const State *_state, std::ostream &amp;_os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GeometricStateSpace::StateType</name>
    <filename>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</filename>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>a12addafb6e838747891cd0a191b5bb09</anchor>
      <arglist>(statespace::StateSpace::State *state)</arglist>
    </member>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>mState</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>ab959a84df3c3df783d27c188debe38dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mValid</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>aab21970e53ec410aa619cb35ca3e545c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::StateValidityChecker</name>
    <filename>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a27dad506560fe26003856ce123f4c87f</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, constraint::TestablePtr _constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a080c7113ee5aa2ecfb1becea86acfa8c</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::TestablePtr</type>
      <name>mConstraint</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a9ecc537ce4707a157d28601300256b08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::StepSequence</name>
    <filename>df/d0e/classaikido_1_1common_1_1StepSequence.html</filename>
    <class kind="class">aikido::common::StepSequence::const_iterator</class>
    <member kind="function">
      <type></type>
      <name>StepSequence</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>ae17402bb004c4c3beabeeeef53c4ce7d</anchor>
      <arglist>(double stepSize, bool includeStartpoint=true, bool includeEndpoint=true, double startPoint=0.0, double endPoint=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StepSequence</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>ab0a32d58e9da81e0ebde2945aaa998aa</anchor>
      <arglist>(double startPoint, double endPoint, std::size_t numSteps, bool includeEndpoint=true)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>adf2411c1291c2aae4675f433c9d5879c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a96336f7b2e26883ec8a89b45775c0384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a602555bba7dcc88a065f1f1316ddf3ef</anchor>
      <arglist>(std::size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLength</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>abd2d14ad022f67be58118acc3d384ea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNumSteps</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>aad414a16b3c976d337c16f50458c07b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateStepSize</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a33bb175bf6230d3bb1598013a7427f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mStepSize</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a35793ce9f2bca51ef638212c38c20089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeStartPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>aa77673541479c97740000c811d636e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeEndPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a77e09cacece5b1ebe5bfe99af00d4320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mStartPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a113c4d4379c8ca32b5db549ba8b0830b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mEndPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a69d7911d7756656aadf1fd018047c5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mNumSteps</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a0aa94f05adf90e99b059e5591d1daf1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Testable</name>
    <filename>d3/d4c/classaikido_1_1constraint_1_1Testable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Testable</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>ac62b89278e4b325400557e641d20913d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>a07ce106362c75ad355947152f61a0105</anchor>
      <arglist>(const statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>adec0607daa565d2dc91c0411593a9a3b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>aadaf1edca0ee10ef531a78d6ed71a181</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::TestableIntersection</name>
    <filename>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>TestableIntersection</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a88280c7c5693966852df5c9ef2975f0f</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, std::vector&lt; ConstTestablePtr &gt; _constraints=std::vector&lt; ConstTestablePtr &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a785aabf42dace5ba94cffa867ceb6843</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a53c1e6707c395cd857bd4993fe49ac4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a4be0c23d61aa9f86611a2fde8d07714f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>ade267e76b7be603aef52abb1d3e7b68b</anchor>
      <arglist>(ConstTestablePtr constraint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>testConstraintStateSpaceOrThrow</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>af5d8953b1a1a08d81e3ac10fdb21fd74</anchor>
      <arglist>(const ConstTestablePtr &amp;constraint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>aa0e56dfef4139a53918ff55158e0d762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ConstTestablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>ae5b32e2eaa72a75d01c70c6c7ebac346</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::TestableOutcome</name>
    <filename>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TestableOutcome</name>
      <anchorfile>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</anchorfile>
      <anchor>a3e9c9d97a09dd5e3b87faedf41cad027</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</anchorfile>
      <anchor>a5410219af626c5607e86b2139c4fed5d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</anchorfile>
      <anchor>ae909d19f5ce5d0525a231bb018bf9d1f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::TextureResource</name>
    <filename>da/d2f/structaikido_1_1rviz_1_1TextureResource.html</filename>
    <base>aikido::rviz::BinaryResource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextureResource</name>
      <anchorfile>da/d2f/structaikido_1_1rviz_1_1TextureResource.html</anchorfile>
      <anchor>abe5a36300c16dde3b6fc304c6abe6696</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Trajectory</name>
    <filename>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Trajectory</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a7ba41e04bcbfd8ed709e9ae233018262</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a145e4ab4d0769a7958ea4409a6908261</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a7016e324b3221e879cc39f1f25596551</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a86cd2f3cad04e26104acfae324fc18a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStartTime</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a147a4fa5d809eb79c7b1074e9ae235b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getEndTime</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a6554c5a47a73ae0da6543a1ea7bb45b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a93339268026fdd7a4cd44c7acbfbe250</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateDerivative</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a2ebe5452fb48faea67f5d935bd59614b</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const =0</arglist>
    </member>
    <member kind="variable">
      <type>TrajectoryMetadata</type>
      <name>metadata</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a90373241f15d91fb92868fd563de801a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryExecutor</name>
    <filename>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryExecutor</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>ab981192c05b76cd68242200f80faa03d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>abe2549dd3441fdfb74c3b22112a9c4ef</anchor>
      <arglist>(const trajectory::Trajectory *traj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a51e70593380ec244c5326949d943cd62</anchor>
      <arglist>(const trajectory::ConstTrajectoryPtr &amp;traj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a1ea937c7974387b9d92820e06b2f7ce2</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancel</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>af24aa08d0487ac010ff66f670c98774a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; const trajectory::Trajectory * &gt;</type>
      <name>mValidatedTrajectories</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>aba768c670f0c38ec948dba9572cb84e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::system_clock::time_point</type>
      <name>mExecutionStartTime</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a21c09435b8f2f37e8919f296ca34a4b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::TrajectoryMarker</name>
    <filename>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>TrajectoryMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a27beda58b31da9e929a0a8f0ae992ba3</anchor>
      <arglist>(interactive_markers::InteractiveMarkerServer *markerServer, const std::string &amp;frameId, const std::string &amp;markerName, trajectory::ConstTrajectoryPtr trajectory, dart::dynamics::MetaSkeletonPtr skeleton, const dart::dynamics::Frame &amp;frame, const Eigen::Vector4d &amp;rgba=Eigen::Vector4d::Constant(0.75), double thickness=0.01, std::size_t numLineSegments=16u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrajectoryMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>adf821c3bee0ee6b550898a525e55906c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a9487ad00c38846169d3ac876448ebf17</anchor>
      <arglist>(trajectory::ConstTrajectoryPtr trajectory)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::ConstTrajectoryPtr</type>
      <name>getTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>af3caa5f7edcb536f05d04c65a2369400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ac609b80e472fe1a93aacd05bbf13cadb</anchor>
      <arglist>(const Eigen::Vector3d &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getColor</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a568ebb16da9f9ade8997e18d1c4f4b96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a51add6b519777ef21836dca3229c691b</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ab35907e6b4cad792e1f2c6abd131e983</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRGBA</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ae80deb6bb8ea60f7754e2a544035c0e2</anchor>
      <arglist>(const Eigen::Vector4d &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>getRBGA</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>aa827d6e77c781756e08c67c09b840458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThickness</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a1e3faffa3961ac3db081cfc7945e8a1e</anchor>
      <arglist>(double thickness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThickness</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a3253f098b0366598fb63866aa40dff75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a2b2c8f991069cbe1d1464aa71087d233</anchor>
      <arglist>(std::size_t numLineSegments)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a119899c1e2cb0683d39b4cb356e433f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a117cfa4a7f1a6e049ad0d8cf4ea7cc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updatePoints</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>aebd2eb8973a24e6fbb64caeae1cef364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>visualization_msgs::Marker &amp;</type>
      <name>getMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ade813f12d824285dd9330d25adca7c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const visualization_msgs::Marker &amp;</type>
      <name>getMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a740adbff96756a5e9f8e3c7292e56b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a115e4dfc6924bc22451ad34c58a768e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ad80cb9076d49f295357e22e10ed5aaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>aa31321b968310b40caba0123961af272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>trajectory::ConstTrajectoryPtr</type>
      <name>mTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a1691d143bb720ff6675f11e241f0835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a6065294d257137451f06345b002e7beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a2ec3807eacac3393c54d44481922630d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const dart::dynamics::Frame &amp;</type>
      <name>mFrame</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>af6868b84ac96fae27c9eb67a51344010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mNeedUpdate</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>af5b02f11640b18892eb6737f0061864f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mNeedPointsUpdate</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a6a078cee16b7b68c7c443f48b7485055</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::TrajectoryMetadata</name>
    <filename>d4/dba/structaikido_1_1trajectory_1_1TrajectoryMetadata.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>executorValidated</name>
      <anchorfile>d4/dba/structaikido_1_1trajectory_1_1TrajectoryMetadata.html</anchorfile>
      <anchor>a5c2d21f5dd4535142c80033277e35c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::TrajectoryPostProcessor</name>
    <filename>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</anchorfile>
      <anchor>a6e66cd6b0f1701cb9e7fe532677789fa</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</anchorfile>
      <anchor>a1eaf55e63db944766cc553682820d34f</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryResult</name>
    <filename>d4/d4f/classaikido_1_1control_1_1TrajectoryResult.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryResult</name>
      <anchorfile>d4/d4f/classaikido_1_1control_1_1TrajectoryResult.html</anchorfile>
      <anchor>a664275d2700a3f68e20ed48603f26f37</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryRunningException</name>
    <filename>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</filename>
    <member kind="function">
      <type></type>
      <name>TrajectoryRunningException</name>
      <anchorfile>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</anchorfile>
      <anchor>aa214e0acb745b7fba1d6b9524c6410ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryRunningException</name>
      <anchorfile>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</anchorfile>
      <anchor>a7be76760fe4d81f1dd563ff2a64b3a49</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::TSR</name>
    <filename>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Testable</base>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>abf31e6c9b6d2b426a286cca3fd1f367a</anchor>
      <arglist>(std::unique_ptr&lt; common::RNG &gt; _rng, const Eigen::Isometry3d &amp;_T0_w=Eigen::Isometry3d::Identity(), const Eigen::Matrix&lt; double, 6, 2 &gt; &amp;_Bw=Eigen::Matrix&lt; double, 6, 2 &gt;::Zero(), const Eigen::Isometry3d &amp;_Tw_e=Eigen::Isometry3d::Identity(), double _testableTolerance=1e-6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab3db546a484f61a567fdb13ce8b7408b</anchor>
      <arglist>(const Eigen::Isometry3d &amp;_T0_w=Eigen::Isometry3d::Identity(), const Eigen::Matrix&lt; double, 6, 2 &gt; &amp;_Bw=Eigen::Matrix&lt; double, 6, 2 &gt;::Zero(), const Eigen::Isometry3d &amp;_Tw_e=Eigen::Isometry3d::Identity(), double _testableTolerance=1e-6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a0e7c81a6e91752a887babf08fec5794b</anchor>
      <arglist>(const TSR &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a81691abb51b9c89c5182e32e5ff6e8dc</anchor>
      <arglist>(TSR &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TSR &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a12451a4bf0795aa30dfd0fc68e28851b</anchor>
      <arglist>(const TSR &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TSR &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a8df722bbe00f5bec038121f7f50a71dc</anchor>
      <arglist>(TSR &amp;&amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a88c5481809695c9941cbb20ab26ade95</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ac480ffbd8816a37621e18ce61f076a41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; statespace::SE3 &gt;</type>
      <name>getSE3</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a59babd1f355583b3d3d42d691b2c2d53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab5d0b928bf6dcb12e91ef046e7e74a12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>aeb10f9f83465c69e13ac9afd28c2be1b</anchor>
      <arglist>(const statespace::StateSpace::State *_s, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>adfd5a2d1cd15b1e04392830ba45525d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a136d34b4b1865b6f835d443071766051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRNG</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a6d89e4d6f0777da936baeeb250c1ff5b</anchor>
      <arglist>(std::unique_ptr&lt; common::RNG &gt; rng)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a144bd5d6cf7413dfbf6aa41621513952</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>af3ba27dc03b7d87f144768e66dd652b9</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab1c0f080c9dbc67c75e29c9724045201</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ac3b6d25b48a1adb28369b12c19e7f93f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a13d5b6b27335d75a76f6e8bb8116e120</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>aa0b2fb745c56a99439cc16f7504e09e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ac91a357176b65925915c0b49df7db08d</anchor>
      <arglist>(double _testableTolerance)</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a28ea8b5fffd9852b481d83e4df480cc0</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Isometry3d</type>
      <name>mT0_w</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a421456fef44f972eda67e0cab037cbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; double, 6, 2 &gt;</type>
      <name>mBw</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a3927aa252cd9a1f4eb9e1758ad930b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Isometry3d</type>
      <name>mTw_e</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a249434aba4cb3737be70a7ab5e05240a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a2ede0d2cd3881eb96e3c2a0212c9a723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a8a95b2589152faad7ac8a29f814a16fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE3 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a55370ae321e28d4c481b6eb540f7c7d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::TSRMarker</name>
    <filename>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>TSRMarker</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>a65a639e413dd0ad177bed7266b8faded</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; dart::dynamics::SimpleFrame &gt;&gt; tsrFrames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TSRMarker</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>a8c7fb8354e28fb78eda92a864958ff8c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::unique_ptr&lt; dart::dynamics::SimpleFrame &gt; &gt;</type>
      <name>mTsrFrames</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>ad7f555a3dba8f546a427e0ad51b9cdd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::type_list</name>
    <filename>d4/d82/classaikido_1_1common_1_1type__list.html</filename>
    <templarg>Types</templarg>
  </compound>
  <compound kind="class">
    <name>aikido::common::VanDerCorput</name>
    <filename>df/d94/classaikido_1_1common_1_1VanDerCorput.html</filename>
    <class kind="class">aikido::common::VanDerCorput::const_iterator</class>
    <member kind="function">
      <type></type>
      <name>VanDerCorput</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a6c2a1064a3d3380c4a62f6e893af7c06</anchor>
      <arglist>(double span=1.0, bool includeStartpoint=false, bool includeEndpoint=false, double minResolution=0.0)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>aaaf9a72630fc5f3d0c8aadf25ceb9bf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a5f2fb9dcd47c9b004ad1c501c56f56a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>operator[]</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a786c04e063c5a28514e0b4aebb771630</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLength</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a1e6ea958a23a1a7106d4da187a833819</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>computeVanDerCorput</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a263c5f39ac40f0ffcecdbc37d83bb2ae</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mSpan</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>ad6e6978d7d682e3d680545701cd6ae4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeStartpoint</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a45cd074b30dae709ae431e04bbd43f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeEndpoint</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>aab90240324b2f723c8d388bfa95fb789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMinResolution</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a58177649e3d58253f44fd8999d48e422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>constexpr static int</type>
      <name>BASE</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>ac774b33050b1861dd0e4d0f0677fb65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>constexpr static int</type>
      <name>MAX</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>ac3e7b6b6bafeace5d8e551c29df7dc1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::VectorField</name>
    <filename>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorField</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a213849521f28fd4d5899dc5cc7f995a3</anchor>
      <arglist>(aikido::statespace::ConstStateSpacePtr stateSpace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorField</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a2a9ecc1f75732e9344b764c1eb0a5ed6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateVelocity</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a3da25925d7340d1be97ec1ce8e1f1f92</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, Eigen::VectorXd &amp;qd) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorFieldPlannerStatus</type>
      <name>evaluateStatus</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a4145ff693474621fb6c2486dec731057</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateTrajectory</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a84ea932098cb0038434f4b657db95c4f</anchor>
      <arglist>(const aikido::trajectory::Trajectory &amp;trajectory, const aikido::constraint::Testable *constraint, double evalStepSize, double &amp;evalTimePivot, bool includeEndTime) const =0</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>ac01e94987e8e19fa9a8b6e1fdfe126f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>ab887d86c7f8512d46439b034cfa9aec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>af499e89b3c48eef26292912b942c3a00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::VectorFieldConfigurationToEndEffectorOffsetPlanner</name>
    <filename>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</filename>
    <base>aikido::planner::dart::ConfigurationToEndEffectorOffsetPlanner</base>
    <member kind="function">
      <type></type>
      <name>VectorFieldConfigurationToEndEffectorOffsetPlanner</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>afae684d03ac8eb5367b4b27721be500e</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr stateSpace, ::dart::dynamics::MetaSkeletonPtr metaSkeleton, double distanceTolerance, double positionTolerance, double angularTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>plan</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>aa359818378c00ac05071876a93eda665</anchor>
      <arglist>(const SolvableProblem &amp;problem, Result *result=nullptr) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mDistanceTolerance</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a894ba499e0e9a43678de87dbf09707e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mPositionTolerance</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a01a35ef7413edc710fed1240360729ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mAngularTolerance</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a8b385818b4d112571fe6d6e4fa69f241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mInitialStepSize</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a127a69d0abf7a9145b1ce638e043a348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mJointLimitTolerance</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>ad219035c27cab1ccc18c92617e0fb40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mConstraintCheckResolution</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a0277ee590b2898186ae71b8650cd63c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::duration&lt; double &gt;</type>
      <name>mTimelimit</name>
      <anchorfile>d7/dd3/classaikido_1_1planner_1_1vectorfield_1_1VectorFieldConfigurationToEndEffectorOffsetPlanner.html</anchorfile>
      <anchor>a3b87d5e6774b649e1ef632deb7ae1f09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::util::VectorFieldPlannerParameters</name>
    <filename>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorFieldPlannerParameters</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a5aec8b4c6ae3a5510b12e6d4592343be</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFieldPlannerParameters</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a88d8aa76b9e213c3cc20a9e309ea846f</anchor>
      <arglist>(double linearVelocity, double negativeDistanceTolerance, double positiveDistanceTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, double linearGain=1.0, double angularGain=0.2, double timestep=0.1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>linearVelocity</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>aeb477d5cfff0f2d708f87c5ef2730526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>negativeDistanceTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a9d6d88dc4ebfef7d2ebd39c21c854392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>positiveDistanceTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a04119d0b95886b30e57c5784794ca219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialStepSize</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a49bdf1a44bf1cb0ba691903343ed5fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>jointLimitTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>af21abd43781dee671cb04c5556c03982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>constraintCheckResolution</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a397fea72d6fad208fa1d1a215fa4cc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>linearGain</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>ac0c8e81c56f65b8f1ee6c8a663d39701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>angularGain</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a3707552a2bc2342c299d07e3aebe5a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a6a515250a860ea9d3ba8e49970cbcf39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::Interpolated::Waypoint</name>
    <filename>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</filename>
    <member kind="function">
      <type></type>
      <name>Waypoint</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>abb505564510110730871511bd1a94459</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>ae82d89be3bb8eee6cd6e3f07440207f2</anchor>
      <arglist>(const Waypoint &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a1a3e346212757e8d0d29057b930eb35d</anchor>
      <arglist>(double rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a0b53209368648b795a2b7f13fc168e48</anchor>
      <arglist>(const statespace::ConstStateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>t</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a8ca35e14f4d57f03899d566f0176a1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>state</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a12db59adc57a06a9696e459cd08fef24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::WeldJoint</name>
    <filename>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</filename>
    <base>aikido::statespace::R</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>WeldJoint</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>aeb03eda395381ba97cc090a62244466d</anchor>
      <arglist>(const ::dart::dynamics::WeldJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>a9131ce0ef565c74ac076d673b0ee0c97</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>a4d707c6587b2feb1bffc4419ef5f258a</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::CatkinResourceRetriever::Workspace</name>
    <filename>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>mPath</name>
      <anchorfile>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</anchorfile>
      <anchor>adf605f123ba88f725ba2f5296367848b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, std::string &gt;</type>
      <name>mSourceMap</name>
      <anchorfile>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</anchorfile>
      <anchor>aaf59c547737fe65ebfd3c76e0e74f1a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::World</name>
    <filename>d0/dee/classaikido_1_1planner_1_1World.html</filename>
    <class kind="struct">aikido::planner::World::State</class>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a096b23dd284f68f09c7c46f97667475e</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>adfa589428e1a0d267f555ba78b3c67cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>clone</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>abf1aa71db5f726f47528763174ebae26</anchor>
      <arglist>(const std::string &amp;newName=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>setName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a1b617b612f2a9108befa35c6b01f47e7</anchor>
      <arglist>(const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a1c89d2d7f60dc7fe0524f911a86edfe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a3f218390f50904f34787498b2fdd1731</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>add4aecc85a159c4550a2e34318904263</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a0e62b733a1b1175c90cb82ddc81559af</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skel) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSkeletons</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>acaf5a9e7ab6bdc2e7b4f1312c772f23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a5111847424a2be57ba1bdd126a68a6f9</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a2bcb58f12530ec803e4da58facd126e3</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::mutex &amp;</type>
      <name>getMutex</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a978eec0dfe9cfc24fcb39801dc1e336e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>World::State</type>
      <name>getState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>acf246aa046f4611535e4fb90b91c08e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>World::State</type>
      <name>getState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a7cb3311f0a4e4136dfbb5b994c3433a5</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a827e35f09bb3ce10c694bb58f48f6d19</anchor>
      <arglist>(const World::State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a938b963850623c4b2a49801897234e78</anchor>
      <arglist>(const World::State &amp;state, const std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; World &gt;</type>
      <name>create</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>adc792f9b305efeb95b7eea09a8c4fbaa</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>acac0a13832f1bf6373fe1ce5c4f42a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; dart::dynamics::SkeletonPtr &gt;</type>
      <name>mSkeletons</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a38d77c9185e00807283a59dbe7b00952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a453fa7e3ea77a88b175ec7ed186ed2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::common::NameManager&lt; dart::dynamics::SkeletonPtr &gt;</type>
      <name>mSkeletonNameManager</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a2371c4faf8dc793882935f426e9079da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static dart::common::NameManager&lt; World * &gt;</type>
      <name>mWorldNameManager</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>aa4bdd12836d09753065e64af0659d164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::WorldStateSaver</name>
    <filename>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Options</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a4a06d878487049fbe3df8286ed519f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFIGURATIONS</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a4a06d878487049fbe3df8286ed519f62adf633dff9da2d8a400925ed2cf76cfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFIGURATIONS</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a4a06d878487049fbe3df8286ed519f62adf633dff9da2d8a400925ed2cf76cfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldStateSaver</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a6c48fce941d1d5a472b9b90385ee2cce</anchor>
      <arglist>(World *world, int options=CONFIGURATIONS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateSaver</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>ac7705b0e97c8f18e823f329b214bd54b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World *</type>
      <name>mWorld</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a340e78bb7d8b9a47480d8e40658b0bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mOptions</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a1171e9ba5db46a576fd013cfc4ad3e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World::State</type>
      <name>mWorldState</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>aaf35707e24439b4148af8390ba2b83f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido</name>
    <filename>d9/dcf/namespaceaikido.html</filename>
    <namespace>aikido::common</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::distance</namespace>
    <namespace>aikido::io</namespace>
    <namespace>aikido::perception</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::robot</namespace>
    <namespace>aikido::rviz</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::trajectory</namespace>
  </compound>
  <compound kind="namespace">
    <name>aikido::common</name>
    <filename>d6/d61/namespaceaikido_1_1common.html</filename>
    <namespace>aikido::common::operators</namespace>
    <class kind="class">aikido::common::BSpline</class>
    <class kind="struct">aikido::common::DynamicCastFactory</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args... &gt; &gt;</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="class">aikido::common::ExecutorMultiplexer</class>
    <class kind="class">aikido::common::ExecutorThread</class>
    <class kind="struct">aikido::common::PairHash</class>
    <class kind="class">aikido::common::RNG</class>
    <class kind="class">aikido::common::RNGWrapper</class>
    <class kind="class">aikido::common::SplineND</class>
    <class kind="class">aikido::common::SplineProblem</class>
    <class kind="struct">aikido::common::SplineTraits</class>
    <class kind="struct">aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</class>
    <class kind="struct">aikido::common::SplineTraits&lt; BSpline&lt; _Scalar, _Dim, _Degree &gt;, Eigen::Dynamic &gt;</class>
    <class kind="class">aikido::common::StepSequence</class>
    <class kind="class">aikido::common::type_list</class>
    <class kind="class">aikido::common::VanDerCorput</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RNG &gt;</type>
      <name>RNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a6e93f385ba51ae65b1358caec7123594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RNG &gt;</type>
      <name>ConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5ab830b62be72e5609b3cebb4adf1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; RNG &gt;</type>
      <name>WeakRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a08c378abf527cfdd2dfc4b7562221f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const RNG &gt;</type>
      <name>WeakConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a065e5aa82c6a074d83ba022eef076e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>UniqueRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2e5beefd493aaebdee692c2e3e4be73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const RNG &gt;</type>
      <name>UniqueConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ae49864e7eb880866ebf17e8470eceac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; float, 2 &gt;</type>
      <name>BSpline2f</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a42724cb39ca8dff82160d8fda1bc910a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; float, 3 &gt;</type>
      <name>BSpline3f</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2850bee596241f2b94994c8de1504e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; double, 2 &gt;</type>
      <name>BSpline2d</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>aa8d3e60b25914a089728a7015e22da6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; double, 3 &gt;</type>
      <name>BSpline3d</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7b00a7133e2133128a2d6585cc2878e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2f785e13331ed3caff844bf698624116</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2a65ebfdf34681623893b6d60c462756</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivativesImpl</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a9e921b453d1f5e09b54201d5453e43a7</anchor>
      <arglist>(const SplineType &amp;spline, typename SplineType::Scalar u, Eigen::DenseIndex order, DerivativeType &amp;der)</arglist>
    </member>
    <member kind="function">
      <type>::std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>affe0ffc9b5731d398c1ebc962ce714b9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>sampleQuaternion</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7d110a30773e873691fa252da91ca085</anchor>
      <arglist>(Engine &amp;_engine, std::uniform_real_distribution&lt; Scalar &gt; &amp;_distribution)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>pseudoinverse</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a0c897267b60a196a6d0b465d3b7050c0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, double eps=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGsFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a4b27abd3edae153eb67309e0657f5f8e</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numOutputs, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ac57de355b263a15212902e5ba3ac6967</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionObject</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a39252825f40e93cfec2ecc20abf7e31a</anchor>
      <arglist>(const dart::collision::CollisionObject &amp;collisionObject, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionResult</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a54d084e926f9f585cdb549e5774a873b</anchor>
      <arglist>(const dart::collision::CollisionResult &amp;collisionResult, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a101ad378b3da9a07f7149aed91ed25df</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;delimiters=&quot; \t&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>NUM_DEFAULT_SEEDS</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5e75364963030abfe764984f5dcf35e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::common::operators</name>
    <filename>d8/d72/namespaceaikido_1_1common_1_1operators.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>a3593747aa33d43a9de2aa3cb986a66de</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionObject &amp;collisionObject)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>af3eeed202bd70764941ea4e67087b827</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionResult &amp;collisionResult)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint</name>
    <filename>d4/db9/namespaceaikido_1_1constraint.html</filename>
    <namespace>aikido::constraint::dart</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <class kind="class">aikido::constraint::CartesianProductProjectable</class>
    <class kind="class">aikido::constraint::CartesianProductSampleable</class>
    <class kind="class">aikido::constraint::CartesianProductTestable</class>
    <class kind="class">aikido::constraint::CyclicSampleable</class>
    <class kind="class">aikido::constraint::DefaultTestableOutcome</class>
    <class kind="class">aikido::constraint::Differentiable</class>
    <class kind="class">aikido::constraint::DifferentiableIntersection</class>
    <class kind="class">aikido::constraint::DifferentiableSubspace</class>
    <class kind="class">aikido::constraint::FiniteSampleable</class>
    <class kind="class">aikido::constraint::NewtonsMethodProjectable</class>
    <class kind="class">aikido::constraint::Projectable</class>
    <class kind="class">aikido::constraint::RejectionSampleable</class>
    <class kind="class">aikido::constraint::Sampleable</class>
    <class kind="class">aikido::constraint::SampleGenerator</class>
    <class kind="class">aikido::constraint::Satisfied</class>
    <class kind="class">aikido::constraint::SequentialSampleable</class>
    <class kind="class">aikido::constraint::Testable</class>
    <class kind="class">aikido::constraint::TestableIntersection</class>
    <class kind="class">aikido::constraint::TestableOutcome</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Differentiable &gt;</type>
      <name>DifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1a12f838d0919548ebb34e4b5036cf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Differentiable &gt;</type>
      <name>ConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a42f96ef94d5b9500f69c87d923b0258c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Differentiable &gt;</type>
      <name>WeakDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a0f4439c33f232df8556f26b72692bc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Differentiable &gt;</type>
      <name>WeakConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab26ff2bfec99c0dc173bec479e0699b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>UniqueDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa7410953d2dbe0fa789c5a7b7a6be59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Differentiable &gt;</type>
      <name>UniqueConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab075f8029c906ba6d002d919da337bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Projectable &gt;</type>
      <name>ProjectablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8b943907af16556b4a26c81e83560643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Sampleable &gt;</type>
      <name>SampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>addcc44c3249e65b8d273f6a31e30c03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Sampleable &gt;</type>
      <name>ConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa1a59ca1b0d116d55490b4cfa5a80d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Sampleable &gt;</type>
      <name>WeakSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>abbdb6fc190a3ca31069d8d78f2555c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Sampleable &gt;</type>
      <name>WeakConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2aa43a5bd3d81d2771ce3aa1c0d3941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>UniqueSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a04d5d0cfc146c14b41c969d6db1e518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Sampleable &gt;</type>
      <name>UniqueConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae89393311886605be570538a90074ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Testable &gt;</type>
      <name>TestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa749fba91b58949a6c3bd41ae7f39cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Testable &gt;</type>
      <name>ConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2b1b74add33a65ce5994d0f07bdc86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Testable &gt;</type>
      <name>WeakTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a59afe2e627052475fe68a714f5541eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Testable &gt;</type>
      <name>WeakConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1994872c8daeefab2f7b256ed5c644c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>UniqueTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab117e9a807013f31028c0e13dd039e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Testable &gt;</type>
      <name>UniqueConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>af533d04a7259ede666cdbc7e3373eb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestableIntersection &gt;</type>
      <name>TestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a353151b01c822c0f2751eb3e9e0f7cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TestableIntersection &gt;</type>
      <name>ConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a561ce16cd5dade636b256b32c09efb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TestableIntersection &gt;</type>
      <name>WeakTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8daee5f02e7e9bdbc24644699fbadd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TestableIntersection &gt;</type>
      <name>WeakConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ac0890d7d5647ec9499b1d5d432c0e5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TestableIntersection &gt;</type>
      <name>UniqueTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8a6d705f2a1bb6568bb8fe00bb1f0c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TestableIntersection &gt;</type>
      <name>UniqueConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a7a2cc6be5dda0fd4d4a8ecc4b0f3a04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintType</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a764bf6aa719f3f394e4ba1289489de4c</anchor>
      <arglist></arglist>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca2334c5c5672d3d347e758454046d7333">INEQUALITY</enumvalue>
    </member>
    <member kind="function">
      <type>Child *</type>
      <name>dynamic_cast_or_throw</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae4d6b7656f37d1bbb9bd5db8feaa5ad0</anchor>
      <arglist>(TestableOutcome *outcome)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::dart</name>
    <filename>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</filename>
    <namespace>aikido::constraint::dart::detail</namespace>
    <class kind="class">aikido::constraint::dart::CollisionFree</class>
    <class kind="class">aikido::constraint::dart::CollisionFreeOutcome</class>
    <class kind="class">aikido::constraint::dart::FrameDifferentiable</class>
    <class kind="class">aikido::constraint::dart::FramePairDifferentiable</class>
    <class kind="class">aikido::constraint::dart::FrameTestable</class>
    <class kind="class">aikido::constraint::dart::InverseKinematicsSampleable</class>
    <class kind="class">aikido::constraint::dart::TSR</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFree &gt;</type>
      <name>CollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a4a19e2641a038515c281e075cb7d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CollisionFree &gt;</type>
      <name>ConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6f6e3cef5b4b245866ccd85db59179da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CollisionFree &gt;</type>
      <name>WeakCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0e0786bb7f6099b23f164626e01c1ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CollisionFree &gt;</type>
      <name>WeakConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a408c0f83e36fb6bb1d0d29dfecb4e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CollisionFree &gt;</type>
      <name>UniqueCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af9ba2c24e4883b5b93daaebfeeca1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CollisionFree &gt;</type>
      <name>UniqueConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af496650ab9bcf9528aa1049002e97c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSR &gt;</type>
      <name>TSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa572847b6da671443d87e7624e6c95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSR &gt;</type>
      <name>ConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a923f80cf671fae0a3ba38755b83c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSR &gt;</type>
      <name>WeakTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a050763c953a69a2884a949ab97b1e1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSR &gt;</type>
      <name>WeakConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>abfc263235c9d09e77b0f08c90ca2d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSR &gt;</type>
      <name>UniqueTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae45921614745a52165c7c75f93cb705d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSR &gt;</type>
      <name>UniqueConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac29b63999d2f200ab823e07e9cb9c18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a98c5eb0198b89b9b80b5b6dd78c326ef</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ab31473e6fa2721102710788489cdc1fa</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a687b2d8e1fda1edac25215480b3a480a</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae92c5efe49c3a447e9dc6e8f3d9408b8</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a80d7da2dddecc8492014f86fe1fa3e59</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa2ec12dbefa689f2c43f41d50c7fa9e8</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aed23c46a69162a077d958a3f6d6279b7</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a1c29601dd5c748cedc1db10b86b4576c</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>afa7b816855ab9c4426fe6a5327471329</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac58c90a2b3602c7a23b23b23239ac5b9</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa61f54d709e7c0b7645a12179baf41f1</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::JointStateSpace &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a9d931e73e4a8c5cf627baf5d31b9a8bd</anchor>
      <arglist>(statespace::dart::ConstMetaSkeletonStateSpacePtr _metaSkeleton, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::dart::detail</name>
    <filename>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</filename>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; const statespace::dart::WeldJoint &gt;</class>
    <member kind="typedef">
      <type>common::type_list&lt; const statespace::dart::R0Joint, const statespace::dart::R1Joint, const statespace::dart::R2Joint, const statespace::dart::R3Joint, const statespace::dart::R6Joint, const statespace::dart::SO2Joint, const statespace::dart::SO3Joint, const statespace::dart::SE2Joint, const statespace::dart::SE3Joint, const statespace::dart::WeldJoint &gt;</type>
      <name>JointStateSpaceTypeList</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a931597869e1142de8ce00b35caa5ca65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a6ad3c71edc735f9474e001fa02bb6953</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::RJoint&lt; N &gt;&gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>ae2668b7f8683f2191d437c747b9c2c32</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::SE2Joint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a61564c2adaa376f9de5aa40e6fc54f2d</anchor>
      <arglist>(std::shared_ptr&lt; const statespace::dart::WeldJoint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::uniform</name>
    <filename>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</filename>
    <class kind="class">aikido::constraint::uniform::RBoxConstraint</class>
    <class kind="class">aikido::constraint::uniform::RConstantSampler</class>
    <class kind="class">aikido::constraint::uniform::RnBoxConstraintSampleGenerator</class>
    <class kind="class">aikido::constraint::uniform::SE2BoxConstraint</class>
    <class kind="class">aikido::constraint::uniform::SO2UniformSampler</class>
    <class kind="class">aikido::constraint::uniform::SO3UniformSampler</class>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 0 &gt;</type>
      <name>R0BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a74032c1d1178f4ea82048f8fd836ea4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 1 &gt;</type>
      <name>R1BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>aadfe7b44198259068917c68b5f6fea75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 2 &gt;</type>
      <name>R2BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afcaa3818f8d20494fcf01831387ef3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 3 &gt;</type>
      <name>R3BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a51c8f4d5b54f9e62c27392f7257d9163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 6 &gt;</type>
      <name>R6BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a78a0dfe4176e2c9ac1ecf20d14cec6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; Eigen::Dynamic &gt;</type>
      <name>RnBoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a612fb574a8d316320865a9f0cde66a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 0 &gt;</type>
      <name>R0ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a7d4666e1982865003824e4f0913f3438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 1 &gt;</type>
      <name>R1ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a6466649294e62304a68331de6b162029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 2 &gt;</type>
      <name>R2ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>ae82ef22f973a9f69c34d3175d4688058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 3 &gt;</type>
      <name>R3ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a30a8a6c822c0a4cdf194f5a36260dd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 6 &gt;</type>
      <name>R6ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a1a99697ca5449aa670f31b1395ee7905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; Eigen::Dynamic &gt;</type>
      <name>RnConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afe45e1c61b9184dd8e55bb8244f85c25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::control</name>
    <filename>d9/daa/namespaceaikido_1_1control.html</filename>
    <namespace>aikido::control::ros</namespace>
    <class kind="class">aikido::control::InstantaneousTrajectoryExecutor</class>
    <class kind="class">aikido::control::KinematicSimulationTrajectoryExecutor</class>
    <class kind="class">aikido::control::PositionCommandExecutor</class>
    <class kind="class">aikido::control::QueuedTrajectoryExecutor</class>
    <class kind="class">aikido::control::TrajectoryExecutor</class>
    <class kind="class">aikido::control::TrajectoryResult</class>
    <class kind="class">aikido::control::TrajectoryRunningException</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>PositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a88d847e44672c3db371d8507f6a69599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>ConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8fcca9aa9bb24048a3a95cecc821afc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>WeakPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6555b6acf0a36aa8fdda6d7fb9c81af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>WeakConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a67a1c05b63331eb86ec434e27fb66c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>UniquePositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a526e3e5f3195b3c6372506a22c6b4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>UniqueConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a107dce219a6fb867cc66636fa85ba248</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>TrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6cd6ce65058e69bbb77911fdbb13bca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>ConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a60109b41f290e36c59d8d609bb384ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>WeakTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af37f4572e010e770b185b52b2bdbbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>WeakConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aff1a075c0818cd34033494dd05c08583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>UniqueTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8982dfe576a145810192301598dc9319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>UniqueConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af44c2673d069625938196c5d1efdb2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryResult &gt;</type>
      <name>TrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1908080933ac626b49500769167b431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryResult &gt;</type>
      <name>ConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ad76541d345e94209212a677ae58e73aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryResult &gt;</type>
      <name>WeakTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9910229097d6c47680558ac665ac778a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryResult &gt;</type>
      <name>WeakConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8a7c3f720d4bd9fe680338bff028f967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryResult &gt;</type>
      <name>UniqueTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a54b618752dd91f3077a442e6b3aa897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryResult &gt;</type>
      <name>UniqueConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1eecbc5b44e957430f5bfb212c723618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::control::ros</name>
    <filename>d8/db3/namespaceaikido_1_1control_1_1ros.html</filename>
    <class kind="class">aikido::control::ros::RosJointStateClient</class>
    <class kind="class">aikido::control::ros::RosPositionCommandExecutor</class>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutionException</class>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutor</class>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a9c51274415d446d79fa29f9c2586a808</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a582c2ddfe540b4fafe70fe4567f3b51e</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory, const Eigen::VectorXd &amp;startPositions)</arglist>
    </member>
    <member kind="function">
      <type>trajectory_msgs::JointTrajectory</type>
      <name>toRosJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>ad92d30c0e867da8db19d63269858a70d</anchor>
      <arglist>(const aikido::trajectory::ConstTrajectoryPtr &amp;trajectory, double timestep)</arglist>
    </member>
    <member kind="function">
      <type>sensor_msgs::JointState</type>
      <name>positionsToJointState</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>adafd2730688b1c49c8f2adc9ddd0b098</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions, const std::vector&lt; std::string &gt; &amp;jointNames)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForActionServer</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>aebda2bf259c10aec7822e78f77760e5d</anchor>
      <arglist>(actionlib::ActionClient&lt; ActionSpec &gt; &amp;actionClient, ::ros::CallbackQueue &amp;callbackQueue, TimeoutDuration timeoutDuration, PeriodDuration periodDuration)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::distance</name>
    <filename>d4/d44/namespaceaikido_1_1distance.html</filename>
    <namespace>aikido::distance::detail</namespace>
    <class kind="class">aikido::distance::CartesianProductWeighted</class>
    <class kind="class">aikido::distance::ConfigurationRanker</class>
    <class kind="class">aikido::distance::DistanceMetric</class>
    <class kind="class">aikido::distance::JointAvoidanceConfigurationRanker</class>
    <class kind="class">aikido::distance::NominalConfigurationRanker</class>
    <class kind="class">aikido::distance::REuclidean</class>
    <class kind="class">aikido::distance::SE2</class>
    <class kind="class">aikido::distance::SE2Weighted</class>
    <class kind="class">aikido::distance::SO2Angular</class>
    <class kind="class">aikido::distance::SO3Angular</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConfigurationRanker &gt;</type>
      <name>ConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6b4d9fe42b1d80fd6300d1e2283e93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>ConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a460dd86eb288fa3c521b1cf8d6f3ecb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConfigurationRanker &gt;</type>
      <name>WeakConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a202b3473e1312d455044f54ada758e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>WeakConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ac21943fef915c71408f3685906de7539</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConfigurationRanker &gt;</type>
      <name>UniqueConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a021a9f39f24d870ace8bff23b2619058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConfigurationRanker &gt;</type>
      <name>UniqueConstConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ac5ead46347264caa8596fc0e72e52c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DistanceMetric &gt;</type>
      <name>DistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aaf63ec63b18e6e5e472c50bfd9531c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const DistanceMetric &gt;</type>
      <name>ConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a641469ad5d19138970617763e196c3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; DistanceMetric &gt;</type>
      <name>WeakDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a68af1916eae84a82cf5222dc04c3b46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const DistanceMetric &gt;</type>
      <name>WeakConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a2cee8bcb64505e74a51cbe850bd81336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>UniqueDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad45bd005a5a117fc225afc0ae480450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const DistanceMetric &gt;</type>
      <name>UniqueConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a7a03ac8528cfc5c774c6ccb1b28eb6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>NominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aa049bb73c9ab0a26e1248629c2cfda6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>ConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>abc080b658dd2d91a824ec6e9c7f56394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>WeakNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ab01eec371fb42a99c088e81c0a88bb60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>WeakConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aae2da694edbef7c3085487e839724a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; NominalConfigurationRanker &gt;</type>
      <name>UniqueNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a07420b42f7ad84921aae576626edf166</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const NominalConfigurationRanker &gt;</type>
      <name>UniqueConstNominalConfigurationRankerPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aa8f1d2b278a6d1437b52c937b6967f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 0 &gt;</type>
      <name>R0Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a50543f9d5f6a65d32a0b9d493a460acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 1 &gt;</type>
      <name>R1Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a667d3fadad12dfacbee30d36a3a88721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 2 &gt;</type>
      <name>R2Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6903891de6aaaac9b338421b21589f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 3 &gt;</type>
      <name>R3Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a0854bb5f71af46c24b5e5e7301cfc359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 6 &gt;</type>
      <name>R6Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae57f5e9a8e4a7abc73ca19821a51c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; Eigen::Dynamic &gt;</type>
      <name>RnEuclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a1fdca133d62fc1fd8e40918a96c52162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianProductWeighted</type>
      <name>Weighted</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a4fda8871126805b629f5427794860cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetricFor</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae3bec5c04d96f08fd3f054d861d55a58</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _sspace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetric</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a17c4e8e403190b7bdc484c6976ac6094</anchor>
      <arglist>(statespace::ConstStateSpacePtr _sspace)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::distance::detail</name>
    <filename>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</filename>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::CartesianProduct &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R0 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R1 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::R6 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SE2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; const statespace::SO3 &gt;</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>Ptr</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a3b8952d56389bb3863b188867e162583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const statespace::CartesianProduct, const statespace::R0, const statespace::R1, const statespace::R2, const statespace::R3, const statespace::R6, const statespace::SO2, const statespace::SO3, const statespace::SE2 &gt;</type>
      <name>SupportedStateSpaces</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a8d570846dd4a1285e3203e87feb58308</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::io</name>
    <filename>d2/db8/namespaceaikido_1_1io.html</filename>
    <namespace>aikido::io::detail</namespace>
    <class kind="class">aikido::io::CatkinResourceRetriever</class>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbodyString</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a0ab91fa623ddbba8b9bb4a2150380395</anchor>
      <arglist>(const std::string &amp;kinBodyString, const dart::common::Uri &amp;baseUri=&quot;&quot;, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbody</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a9c32779712b779d369942ebdee37cfc6</anchor>
      <arglist>(const dart::common::Uri &amp;kinBodyUri, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTrajectory</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a2a1cd91050198df8268f238163a6b3c1</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;trajectory, const std::string &amp;savePath)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueSplinePtr</type>
      <name>loadSplineTrajectory</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a2aa1e0788db609a2e35b26fa98cc6da1</anchor>
      <arglist>(const std::string &amp;trajPath, const aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;metaSkeletonStateSpace)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>loadSkeletonFromURDF</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>ab618ef0fa435ec15374a8999c8f6dd15</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;retriever, const dart::common::Uri &amp;uri, const Eigen::Isometry3d &amp;transform=Eigen::Isometry3d::Identity())</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>loadYAML</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a4da7c052f494bd2dfe1f903d87ca3ce5</anchor>
      <arglist>(const dart::common::Uri &amp;yamlUri, const dart::common::ResourceRetrieverPtr &amp;retriever)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::io::detail</name>
    <filename>da/d43/namespaceaikido_1_1io_1_1detail.html</filename>
    <class kind="struct">aikido::io::detail::encode_impl</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</class>
    <member kind="function">
      <type>YAML::Mark</type>
      <name>getMark</name>
      <anchorfile>da/d43/namespaceaikido_1_1io_1_1detail.html</anchorfile>
      <anchor>a01bc4ac464aec57ed9b598c6befcabae</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::perception</name>
    <filename>d1/da8/namespaceaikido_1_1perception.html</filename>
    <class kind="class">aikido::perception::AssetDatabase</class>
    <class kind="class">aikido::perception::DetectedObject</class>
    <class kind="class">aikido::perception::PerceptionModule</class>
    <class kind="class">aikido::perception::PoseEstimatorModule</class>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertROSPoseToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>a4abba5aae2ec071b71cec21a43f34a52</anchor>
      <arglist>(const geometry_msgs::Pose &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertStampedTransformToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ace20fe20942bdbce03c984efd7a49001</anchor>
      <arglist>(const tf::StampedTransform &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner</name>
    <filename>d5/dc7/namespaceaikido_1_1planner.html</filename>
    <namespace>aikido::planner::dart</namespace>
    <namespace>aikido::planner::kunzretimer</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <class kind="class">aikido::planner::CompositePlanner</class>
    <class kind="class">aikido::planner::ConfigurationToConfiguration</class>
    <class kind="class">aikido::planner::ConfigurationToConfigurationPlanner</class>
    <class kind="class">aikido::planner::ConfigurationToConfigurations</class>
    <class kind="class">aikido::planner::FirstSupportedMetaPlanner</class>
    <class kind="class">aikido::planner::Planner</class>
    <class kind="class">aikido::planner::PlanningResult</class>
    <class kind="class">aikido::planner::Problem</class>
    <class kind="class">aikido::planner::RankedMetaPlanner</class>
    <class kind="class">aikido::planner::SequenceMetaPlanner</class>
    <class kind="class">aikido::planner::SingleProblemPlanner</class>
    <class kind="class">aikido::planner::SnapConfigurationToConfigurationPlanner</class>
    <class kind="class">aikido::planner::TrajectoryPostProcessor</class>
    <class kind="class">aikido::planner::World</class>
    <class kind="class">aikido::planner::WorldStateSaver</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CompositePlanner &gt;</type>
      <name>CompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa5dfa4a276b9aaafbe9aeb39721f4e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CompositePlanner &gt;</type>
      <name>ConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a6f17b38ece03b32ce99b2df2f66e0bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CompositePlanner &gt;</type>
      <name>WeakCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aaae785f364559223c82fc0db988f4902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CompositePlanner &gt;</type>
      <name>WeakConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa7de44c064b7a690827242b350904094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CompositePlanner &gt;</type>
      <name>UniqueCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0b49672ca785330d1f38e363b433eaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CompositePlanner &gt;</type>
      <name>UniqueConstCompositePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>af271b892dbc9c27f7e30691e9ed9d5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Planner &gt;</type>
      <name>PlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aaf497ea5831e5940d4801a2f4df0a25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Planner &gt;</type>
      <name>ConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a44f6e3b07f4f3851e3d163a2badabd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Planner &gt;</type>
      <name>WeakPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>ac65d7ac9a658ca7b4da3840b531998dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Planner &gt;</type>
      <name>WeakConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a80374bf5a2679657442ceb0b48f67bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Planner &gt;</type>
      <name>UniquePlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a605b115a53cfafcce6e1a6dc50a9b2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Planner &gt;</type>
      <name>UniqueConstPlannerPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a42d7751bec51aedc199898715a64512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; World &gt;</type>
      <name>WorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa129f13cd8608a9a2c32ff3ed004b401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const World &gt;</type>
      <name>ConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>abab1048a8c2b02894784e4eed7440424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; World &gt;</type>
      <name>WeakWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0a80182a9415c37ff6606a8477818905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const World &gt;</type>
      <name>WeakConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a9025cfb1edb43461abf19a24783f5409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>UniqueWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>afbe4cc668596b5b0b035e59c716e8235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const World &gt;</type>
      <name>UniqueConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a06e4494bb40a6e49514302f48bbe4831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planSnap</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a16a8ae2f9bee860b7905912d480421a8</anchor>
      <arglist>(const statespace::ConstStateSpacePtr &amp;stateSpace, const statespace::StateSpace::State *startState, const statespace::StateSpace::State *goalState, const std::shared_ptr&lt; statespace::Interpolator &gt; &amp;interpolator, const std::shared_ptr&lt; constraint::Testable &gt; &amp;constraint, planner::PlanningResult &amp;planningResult)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::dart</name>
    <filename>dd/df3/namespaceaikido_1_1planner_1_1dart.html</filename>
    <namespace>aikido::planner::dart::util</namespace>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration</class>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToConfiguration</class>
    <class kind="class">aikido::planner::dart::ConfigurationToConfiguration_to_ConfigurationToTSR</class>
    <class kind="class">aikido::planner::dart::ConfigurationToConfigurationPlanner</class>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorOffset</class>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorOffsetPlanner</class>
    <class kind="class">aikido::planner::dart::ConfigurationToEndEffectorPose</class>
    <class kind="class">aikido::planner::dart::ConfigurationToTSR</class>
    <class kind="class">aikido::planner::dart::ConfigurationToTSRPlanner</class>
    <class kind="class">aikido::planner::dart::PlannerAdapter</class>
    <class kind="class">aikido::planner::dart::PlannerAdapter&lt; DelegatePlanner, TargetPlanner, typename std::enable_if&lt; std::is_base_of&lt; dart::SingleProblemPlanner&lt; DelegatePlanner, typename DelegatePlanner::SolvableProblem &gt;, DelegatePlanner &gt;::value &gt;::type &gt;</class>
    <class kind="class">aikido::planner::dart::SingleProblemPlanner</class>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::dart::util</name>
    <filename>de/d41/namespaceaikido_1_1planner_1_1dart_1_1util.html</filename>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getEndEffectorDirection</name>
      <anchorfile>de/d41/namespaceaikido_1_1planner_1_1dart_1_1util.html</anchorfile>
      <anchor>a90bed6b7e3daec63f21d6e2f99d85072</anchor>
      <arglist>(const ::dart::dynamics::ConstBodyNodePtr &amp;body)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::kunzretimer</name>
    <filename>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</filename>
    <class kind="class">aikido::planner::kunzretimer::KunzRetimer</class>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeKunzTiming</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>a4c0a05e5c2909148f46d421d2f47275b</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;inputTrajectory, const Eigen::VectorXd &amp;maxVelocity, const Eigen::VectorXd &amp;maxAcceleration, double maxDeviation=DEFAULT_MAX_DEVIATION, double timeStep=DEFAULT_TIME_STEP)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_MAX_DEVIATION</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>a514a7e398002dd25941fd5c0d4508d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIME_STEP</name>
      <anchorfile>d6/da7/namespaceaikido_1_1planner_1_1kunzretimer.html</anchorfile>
      <anchor>adf0c805bb85e74ab24ef3b63159790ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::ompl</name>
    <filename>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</filename>
    <class kind="class">aikido::planner::ompl::CRRT</class>
    <class kind="class">aikido::planner::ompl::CRRTConnect</class>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace</class>
    <class kind="class">aikido::planner::ompl::GoalRegion</class>
    <class kind="class">aikido::planner::ompl::MotionValidator</class>
    <class kind="class">aikido::planner::ompl::OMPLConfigurationToConfigurationPlanner</class>
    <class kind="class">aikido::planner::ompl::StateSampler</class>
    <class kind="class">aikido::planner::ompl::StateValidityChecker</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>ompl_shared_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a80d7422befdffd8a46238dbe81effa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; T &gt;</type>
      <name>ompl_weak_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ace5edcfd0ba1691a4c0eb33bef99c512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GeometricStateSpace &gt;</type>
      <name>GeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acd9aadee862348e8ebf557ef099b1082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>ConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a381d6b417e3b485ca76ad56ef336c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; GeometricStateSpace &gt;</type>
      <name>WeakGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae7dc686694607cc236a76df966d0ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>WeakConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a68d84a38da90cd4ff11a8b52bedd589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GeometricStateSpace &gt;</type>
      <name>UniqueGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a6ba25ac2323cbee6c6b00cda950721de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>UniqueConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba907832f0c1a8192ca7d32192e0ffa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_make_shared</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a0a076c582462e05aae0327b487f5e39f</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_dynamic_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a9f9741a3ded8d2b646a5fb855f4aa67e</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_static_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a26c7df73b3c990fad15d1083af920609</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ompl_bind</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af26a27be12628c979ad7066a7c0e3f0a</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(boost::bind(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>createSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ad7b398d71985813c60cc5744fde1fe54</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _stateSpace, constraint::TestablePtr _validityConstraint, double _maxDistanceBtwValidityChecks, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ac5db2c5a3731979213822f15a61b327b</anchor>
      <arglist>(const statespace::StateSpace::State *_start, const statespace::StateSpace::State *_goal, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a73212fbafd31af1b0a9f1b9abb7c4b56</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRT</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a04bb5924e357de4e603db6093c8c7a56</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRTConnect</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af76d0db9b551da145818c7ed1dc5e7d1</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize, double _minTreeConnectionDistance)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>getSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ab5eab46b1a95d54729d4a9135ed2aeab</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt;::ompl::base::GoalRegion &gt;</type>
      <name>getGoalRegion</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae450c07e0526ea3ae5dc17d877187adc</anchor>
      <arglist>(::ompl::base::SpaceInformationPtr _si, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a8b1f90e9cec2b9427f30cd0f274a537a</anchor>
      <arglist>(const ::ompl::base::PlannerPtr &amp;_planner, const ::ompl::base::ProblemDefinitionPtr &amp;_pdef, statespace::ConstStateSpacePtr _sspace, statespace::InterpolatorPtr _interpolator, double _maxPlanTime)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; trajectory::Interpolated &gt;, bool &gt;</type>
      <name>simplifyOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a60acd428122fb8cc67a569b41e2c49eb</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks, double _timeout, std::size_t _maxEmptySteps, trajectory::InterpolatedPtr _originalTraj)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::geometric::PathGeometric</type>
      <name>toOMPLTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ac525b88975159ff056399f2de81e9d3a</anchor>
      <arglist>(const trajectory::InterpolatedPtr &amp;_interpolatedTraj, ::ompl::base::SpaceInformationPtr _si)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Interpolated &gt;</type>
      <name>toInterpolatedTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a5e574bca79caca6fcfee48b968fe1477</anchor>
      <arglist>(const ::ompl::geometric::PathGeometric &amp;_path, statespace::InterpolatorPtr _interpolator)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>EQUALITY_EPSILON</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a202c6dab902b5ffd042c953463b27b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::parabolic</name>
    <filename>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</filename>
    <class kind="class">aikido::planner::parabolic::ParabolicSmoother</class>
    <class kind="class">aikido::planner::parabolic::ParabolicTimer</class>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcut</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a921998140b44ae76ed402d577cfced3c</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMIT, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a49dbe6e5f9ae926ed0e9f6a878f93037</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcutAndBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>ad73096e4a64b502f6a32b1c34703ed38</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMIT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abc87fc6c95d7d6a65c35a187af4971bd</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a71d41926976e9bc3b95199e7077ab345</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIMELIMIT</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a025c35dc00ca36a7ec286379e42bb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_BLEND_RADIUS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a5a6c51f8f280cc25caa4af68209d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>DEFAULT_BLEND_ITERATIONS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a91556625d7b966f32ebe6e9a513dd1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_CHECK_RESOLUTION</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a1846c0848aa85c637f2430cae9839d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TOLERANCE</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>acdc54d491b1fa68fb9f596449d7997af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::vectorfield</name>
    <filename>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</filename>
    <class kind="class">aikido::planner::vectorfield::BodyNodePoseVectorField</class>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</class>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</class>
    <class kind="class">aikido::planner::vectorfield::VectorField</class>
    <class kind="class">aikido::planner::vectorfield::VectorFieldConfigurationToEndEffectorOffsetPlanner</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>BodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a47ef9cf807108a60a46703a964ee7f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>ConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aa8fc53075a519c4368d7f6b42593768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>WeakBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aeca425dda1cee907f7134df654097c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>WeakConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a6c63b8b5fc083805cd8a2fc21ad0b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>UniqueBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a1c5fe0dafc119636c4ee7e91364922f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>UniqueConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a097ddd184607ff861057aaa5a3ade77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VectorField &gt;</type>
      <name>VectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a87ab043e8d644d8704b9e09d05a36510</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VectorFieldPlannerStatus</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a653bc87652ff77db6a831fa43cd74431</anchor>
      <arglist></arglist>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a1b52d4a7cbbcb87a81515c443453a2d5">TERMINATE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a92d766ccba721ca972a5627082925242">CACHE_AND_CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431adfffe9658cd2a5ecefa682370bf06d5a">CACHE_AND_TERMINATE</enumvalue>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>followVectorField</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a648da5feadc03477556d27f51c6781d9</anchor>
      <arglist>(const aikido::planner::vectorfield::VectorField &amp;vectorField, const aikido::statespace::StateSpace::State &amp;startState, const aikido::constraint::Testable &amp;constraint, std::chrono::duration&lt; double &gt; timelimit, double initialStepSize, double checkConstraintResolution, planner::Planner::Result *result)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a592ecc85152a5faf4348dd485bf8036d</anchor>
      <arglist>(const aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr &amp;stateSpace, const statespace::dart::MetaSkeletonStateSpace::State &amp;startState, ::dart::dynamics::MetaSkeletonPtr metaskeleton, const ::dart::dynamics::ConstBodyNodePtr &amp;bn, const aikido::constraint::ConstTestablePtr &amp;constraint, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::Planner::Result *result=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::UniqueInterpolatedPtr</type>
      <name>planToEndEffectorPose</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a97249161448ce59414ae0ad15f9685ad</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, ::dart::dynamics::MetaSkeletonPtr metaskeleton, const ::dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double conversionRatioInGeodesicDistance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::Planner::Result *result=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJointVelocityFromTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a8837645e1c3bf017d9b521a47fdb100a</anchor>
      <arglist>(Eigen::VectorXd &amp;jointVelocity, const Eigen::Vector6d &amp;desiredTwist, const ::dart::dynamics::MetaSkeletonPtr metaSkeleton, const ::dart::dynamics::ConstBodyNodePtr bodyNode, double jointLimitPadding, const Eigen::VectorXd &amp;jointVelocityLowerLimits, const Eigen::VectorXd &amp;jointVelocityUpperLimits, bool enforceJointVelocityLimits, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>computeGeodesicTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>afa027fae31a834222c2f4ab8824f6496</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>computeGeodesicError</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a564b72a8e78e5397bdad153c74622135</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeGeodesicDistance</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>ac413955aa734563de5b5cadc0255f15c</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans, double r)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::robot</name>
    <filename>dc/db7/namespaceaikido_1_1robot.html</filename>
    <namespace>aikido::robot::util</namespace>
    <class kind="class">aikido::robot::ConcreteManipulator</class>
    <class kind="class">aikido::robot::ConcreteRobot</class>
    <class kind="struct">aikido::robot::GrabMetadata</class>
    <class kind="class">aikido::robot::Hand</class>
    <class kind="class">aikido::robot::Manipulator</class>
    <class kind="class">aikido::robot::Robot</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteManipulator &gt;</type>
      <name>ConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a05b729cc4715c216c1d9089ba8738b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>ConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a901c435e1bc7867c4eeddd279f0e0639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteManipulator &gt;</type>
      <name>WeakConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a425bd1c98bd075d772913803c5324eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>WeakConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a4154eef0b01c18fc28875c9de826ed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteManipulator &gt;</type>
      <name>UniqueConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>aaacd06a986c474997b1ea9497839320c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>UniqueConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ab5c7b679f8fac1221a204bf6ce6c183d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteRobot &gt;</type>
      <name>ConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae3903bb64eec9aa908c4ba18624d8250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteRobot &gt;</type>
      <name>ConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>abbec688092f448056645d86297351cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteRobot &gt;</type>
      <name>WeakConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac4e28850035f3715892b83a67a01a4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteRobot &gt;</type>
      <name>WeakConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae65c3e8836869540252e90d89e101b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteRobot &gt;</type>
      <name>UniqueConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bdcca7f55d97b8aa8f2aab8d1db253c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteRobot &gt;</type>
      <name>UniqueConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a24366d9001c9726d6921355743c200e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Hand &gt;</type>
      <name>HandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad61197ab272f863ecd14d59437cadd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Hand &gt;</type>
      <name>ConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae56be858d4d3e5a4a19b8158edef0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Hand &gt;</type>
      <name>WeakHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bbaf97c024ea686f6cc846f8162bf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Hand &gt;</type>
      <name>WeakConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a41faab9c161dc405ca69bf442d4bd7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Hand &gt;</type>
      <name>UniqueHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6647bdbf5aedb76a1617077b98eae2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Hand &gt;</type>
      <name>UniqueConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a48d7d89f8adfd0a44dfa8f5dc161e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Manipulator &gt;</type>
      <name>ManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae9ff74efcf27c603b2a47bd2d48a081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Manipulator &gt;</type>
      <name>ConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a9c1f16e4f7af8f1ea85771041f7e24d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Manipulator &gt;</type>
      <name>WeakManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7244e08967f44ee9c7ad4d701b2cc72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Manipulator &gt;</type>
      <name>WeakConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a92c30cea0694f5da5a06c2227e25e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Manipulator &gt;</type>
      <name>UniqueManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7d581dde2230eb9c6dad42ff3cf26234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Manipulator &gt;</type>
      <name>UniqueConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a3b2f2cb16e67a92865da5011cdadb87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad935170cf3805e00e82c5661d840464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a5b34bc49be50b8fb406e8ac7ef3d5804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Robot &gt;</type>
      <name>WeakRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae7ea0c2414452c6e44e04727ff411aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Robot &gt;</type>
      <name>WeakConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a08a329dcb035c215cb55814024d81767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>UniqueRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac36de5e6cc70a361a59dd0892f629c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Robot &gt;</type>
      <name>UniqueConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a35cdb287258f9253e92ff8b9da6baccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::robot::util</name>
    <filename>d1/ded/namespaceaikido_1_1robot_1_1util.html</filename>
    <class kind="struct">aikido::robot::util::CRRTPlannerParameters</class>
    <class kind="struct">aikido::robot::util::VectorFieldPlannerParameters</class>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a8095a82f4daaaeaf97863445d6ea099c</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const statespace::StateSpace::State *goalState, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ae880ed4503f2d0b16e5326fa0f016b04</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; statespace::StateSpace::State * &gt; &amp;goalStates, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToTSR</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a2d55fc94b44f771817bbd2b521b6871f</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;tsr, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit, std::size_t maxNumTrials, const distance::ConstConfigurationRankerPtr &amp;ranker=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a7748aabfa71d6f1ec11da53acb5bfde2</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;goalTsr, const constraint::dart::TSRPtr &amp;constraintTsr, const constraint::TestablePtr &amp;collisionTestable, double timelimit, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a58ca33cdc0383f6062887d79d796c267</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const Eigen::Vector3d &amp;direction, const constraint::TestablePtr &amp;collisionTestable, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const VectorFieldPlannerParameters &amp;vfParameters=VectorFieldPlannerParameters(), const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToEndEffectorOffsetByCRRT</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a78b24f5bd36e678d1c22942dae4b9cc7</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::TestablePtr &amp;collisionTestable, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>parseYAMLToNamedConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aa2e3f025f76403db20b6c29b3078340e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGoalAndConstraintTSRForEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a1e095c9730f6bda4109732401ce57674</anchor>
      <arglist>(const dart::dynamics::BodyNodePtr &amp;bodyNode, const Eigen::Vector3d &amp;direction, double distance, const constraint::dart::TSRPtr &amp;goal, const constraint::dart::TSRPtr &amp;constraint, double positionTolerance=1e-3, double angularTolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getLookAtIsometry</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aaa61f9f714f3bc0ad001568ca7e41f9e</anchor>
      <arglist>(const Eigen::Vector3d &amp;positionFrom, const Eigen::Vector3d &amp;positionTo)</arglist>
    </member>
    <member kind="function">
      <type>const dart::dynamics::BodyNode *</type>
      <name>getBodyNodeOrThrow</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a6cbde6bb054438f0501e4cf9c3e167d6</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;skeleton, const std::string &amp;bodyNodeName)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNode *</type>
      <name>getBodyNodeOrThrow</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a4417ad7b9f044c1cd61c4e5fb7eaa40e</anchor>
      <arglist>(dart::dynamics::MetaSkeleton &amp;skeleton, const std::string &amp;bodyNodeName)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::rviz</name>
    <filename>df/db5/namespaceaikido_1_1rviz.html</filename>
    <class kind="struct">aikido::rviz::BinaryResource</class>
    <class kind="class">aikido::rviz::BodyNodeMarker</class>
    <class kind="class">aikido::rviz::FrameMarker</class>
    <class kind="class">aikido::rviz::InteractiveMarkerViewer</class>
    <class kind="struct">aikido::rviz::MeshResource</class>
    <class kind="struct">aikido::rviz::ResourceRequest</class>
    <class kind="class">aikido::rviz::ResourceServer</class>
    <class kind="class">aikido::rviz::ShapeFrameMarker</class>
    <class kind="class">aikido::rviz::SkeletonMarker</class>
    <class kind="struct">aikido::rviz::TextureResource</class>
    <class kind="class">aikido::rviz::TrajectoryMarker</class>
    <class kind="class">aikido::rviz::TSRMarker</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodeMarker &gt;</type>
      <name>BodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2caae3ca963e1d82a48e384680eeb9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>ConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6f3390775e93a2d0e218b13487d11b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodeMarker &gt;</type>
      <name>WeakBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a80c346eb0668f6ec82bd9094bb766eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>WeakConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a186798f195df3096da5979a48b57194d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodeMarker &gt;</type>
      <name>UniqueBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac9e830eb01365f1f7dc33e5aa197ffd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>UniqueConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a01cf381a90c2eb030b3fe2a84e9fc95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameMarker &gt;</type>
      <name>FrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a71c26a83d75818ef01efaac71eeed5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const FrameMarker &gt;</type>
      <name>ConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a259b8e0e923cdd675d4f2795babe5b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; FrameMarker &gt;</type>
      <name>WeakFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a35bccf6e1f37a585ea67274e890ac8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const FrameMarker &gt;</type>
      <name>WeakConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2b8c9dfa9a51530e18a5fd13d99b7095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; FrameMarker &gt;</type>
      <name>UniqueFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a4b2f19a3a62965fc12fc8ff2cfc675fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const FrameMarker &gt;</type>
      <name>UniqueConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a100ccced3dd6c20edf64533b566eb400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>InteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aac91d4365e1ab047ad7d8db7676a4bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>ConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a289c308fceb16012c144f43b6c3d5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>WeakInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7f68b334063581103501e894ce311569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>WeakConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a28a06069c73873da3736f6d9a64213e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>UniqueInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac28e45377726d43cb1f266a1b94ff2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>UniqueConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac2e3bdd3914efe42b60aa34fe3b6ddaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SkeletonMarker &gt;</type>
      <name>SkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a34c18ceffcdaf5069bd9e4dd1fff6138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const SkeletonMarker &gt;</type>
      <name>ConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac0608bfce88f8d98aae072fc3417f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; SkeletonMarker &gt;</type>
      <name>WeakSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a93b63da472cb064ee34784703eb54b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const SkeletonMarker &gt;</type>
      <name>WeakConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeb4d34775b5b1b118169e8a592c9e3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SkeletonMarker &gt;</type>
      <name>UniqueSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a86f3d2693acc64aec0cccb4333cdb04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const SkeletonMarker &gt;</type>
      <name>UniqueConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a75aa225502b51f99e37c3a477e1f1f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryMarker &gt;</type>
      <name>TrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7af26876878ce12697125131d1c5506c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>ConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a185736f10f213b7055511921a016e6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryMarker &gt;</type>
      <name>WeakTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afb1c1eb2215ba1fa4d9bf1d9b25c0c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>WeakConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1273cc977c76332e21b2fc10b95b920c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryMarker &gt;</type>
      <name>UniqueTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a97920acb9abdf2a704fbc054834d2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>UniqueConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a894bb565b23b21b3add62f6b97f62cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSRMarker &gt;</type>
      <name>TSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a590951cdd9bce6890edd775ed8ef2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSRMarker &gt;</type>
      <name>ConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aef0d1b452a6ba7e6dfe95fbe552105d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSRMarker &gt;</type>
      <name>WeakTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab40eb785f9450167704216f3ab15cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSRMarker &gt;</type>
      <name>WeakConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae1925d8939631694db9a676f236d1d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSRMarker &gt;</type>
      <name>UniqueTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeba7efd72953d7cb0e919d0e4b3b889c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSRMarker &gt;</type>
      <name>UniqueConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aba793434f7d1a453e19df5f2c139a6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextureResource &gt;</type>
      <name>TextureResourcePtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0844c3a1c44227f91e00540aeec98e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>ShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aae58ff66e95bc1d2dcb81cface7f44fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>ConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab349244402ace54b805b3d025f9e07ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>WeakShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2bbf49828f7d08d2fe9544e93b3fc180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>WeakConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a687a16a76c2b7713e94f0d71f7c9ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>UniqueShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1a6038295bfe54351ac5d172d9d89b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>UniqueConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afdda6d93e2b5a744245d74ebbd8892a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>convertEigenToROSPoint</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a68d60ee0ed5b2ff23a267682703a22bf</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>convertEigenToROSVector3</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a8a0437e24546ebf8dce5a6fb7ff5551a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>convertEigenToROSQuaternion</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a804574a4b82443989184e879d563d48c</anchor>
      <arglist>(const Eigen::Quaterniond &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>convertEigenToROSPose</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afa63ee8d6fb65d4fea1c4f667e8de533</anchor>
      <arglist>(const Eigen::Isometry3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std_msgs::ColorRGBA</type>
      <name>convertEigenToROSColorRGBA</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6108bf053834b682698956b03d98943b</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>convertROSColorRGBAToEigen</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a974f133392c086992f9cc90bde90d273</anchor>
      <arglist>(const std_msgs::ColorRGBA &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertAssimpMeshToROSTriangleList</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>acaca6e3485a0418b4a18001c5197ae30</anchor>
      <arglist>(const aiMesh &amp;mesh, std::vector&lt; geometry_msgs::Point &gt; *triangle_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3d9fc2131aba5a272fd7846802906695</anchor>
      <arglist>(const dart::dynamics::Shape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3270c5fb93d7d80d2ac4d67e010f1baa</anchor>
      <arglist>(const dart::dynamics::BoxShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a84ab12d490fdb1bd1780569f71ac6eb9</anchor>
      <arglist>(const dart::dynamics::CylinderShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae2f3076e02e73fc14fa795f072c79da1</anchor>
      <arglist>(const dart::dynamics::EllipsoidShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a03f4480210c9fad6a22086df6f0fe8ba</anchor>
      <arglist>(const dart::dynamics::LineSegmentShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aad67b7fedb6ac6987931138c0457e7b1</anchor>
      <arglist>(const dart::dynamics::MeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a9678121bbcd9c4211ac3bd3717479cce</anchor>
      <arglist>(const dart::dynamics::PlaneShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager, double width=100.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1b99f62c6870b0b7a2f3f70bc133c18f</anchor>
      <arglist>(const dart::dynamics::SoftMeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace</name>
    <filename>d9/d25/namespaceaikido_1_1statespace.html</filename>
    <namespace>aikido::statespace::dart</namespace>
    <class kind="class">aikido::statespace::CartesianProduct</class>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <class kind="class">aikido::statespace::GeodesicInterpolator</class>
    <class kind="class">aikido::statespace::Interpolator</class>
    <class kind="class">aikido::statespace::R</class>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <class kind="class">aikido::statespace::ScopedState</class>
    <class kind="class">aikido::statespace::SE2</class>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <class kind="class">aikido::statespace::SE3</class>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <class kind="class">aikido::statespace::SO2</class>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <class kind="class">aikido::statespace::SO3</class>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <class kind="class">aikido::statespace::StateHandle</class>
    <class kind="class">aikido::statespace::StateSpace</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CartesianProduct &gt;</type>
      <name>CartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c137e8a750ce450cf339fc28c80c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CartesianProduct &gt;</type>
      <name>ConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a72ba92e8230cda73d6e1cf84d93c2767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CartesianProduct &gt;</type>
      <name>WeakCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ac6393e65e1a7ba399ebc383985c4e9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CartesianProduct &gt;</type>
      <name>WeakConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acbad8f5bf6605df27a9b226e2d248dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CartesianProduct &gt;</type>
      <name>UniqueCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a044da3c79383b2077b5d8d0251fae058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CartesianProduct &gt;</type>
      <name>UniqueConstCartesianProductPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a3bbdcd688832d252df499751f5423ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolator &gt;</type>
      <name>InterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae78c8cb0f9e8b59f0c6f8415bc6c8c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolator &gt;</type>
      <name>ConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acd1df13520395c55b7cd026e051bc574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolator &gt;</type>
      <name>WeakInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6da018faa8a88dd6ec0ccf323251f12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolator &gt;</type>
      <name>WeakConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acefac2fbc8f04f77a08803a49950952d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolator &gt;</type>
      <name>UniqueInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af245b6690dc8d271d14f4efb78635d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolator &gt;</type>
      <name>UniqueConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a0a843c02e921c290916adf5a551dfe93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 0 &gt;</type>
      <name>R0</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a112711b214334a56f6211267f3a7ea48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 1 &gt;</type>
      <name>R1</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c3a2d2580f90ca0da9fee65de8f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 2 &gt;</type>
      <name>R2</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a236d98378f3a4c871d7df5d339a598a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 3 &gt;</type>
      <name>R3</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae0ff830e4bc4cbbf927ebcb04af2346c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 6 &gt;</type>
      <name>R6</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6bdc50148bffb18120bd4b4803960ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; Eigen::Dynamic &gt;</type>
      <name>Rn</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a7d6e5d692a6d4f52a878ad0d030055ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a55de554810a89a068e51133660087b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a04f07b5eb15f2c5f5b72221278854eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; StateSpace &gt;</type>
      <name>WeakStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a43ca940fe24d5036ce19540cb3e7cf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const StateSpace &gt;</type>
      <name>WeakConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aac239e63abbc94c92bc02cab1b887e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StateSpace &gt;</type>
      <name>UniqueStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af85badb5902b06f3da6e845321512738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const StateSpace &gt;</type>
      <name>UniqueConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a85f9f4e81b79ee5b7194550faad26046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace::dart</name>
    <filename>db/db1/namespaceaikido_1_1statespace_1_1dart.html</filename>
    <namespace>aikido::statespace::dart::detail</namespace>
    <class kind="class">aikido::statespace::dart::JointStateSpace</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSaver</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace</class>
    <class kind="class">aikido::statespace::dart::RJoint</class>
    <class kind="class">aikido::statespace::dart::SE2Joint</class>
    <class kind="class">aikido::statespace::dart::SE3Joint</class>
    <class kind="class">aikido::statespace::dart::SO2Joint</class>
    <class kind="class">aikido::statespace::dart::SO3Joint</class>
    <class kind="class">aikido::statespace::dart::WeldJoint</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>MetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8ed2b6f9ff6bc957ee5f55343ea579b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>ConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8d493e13286a781f5983bda8232b14d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>WeakMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a518c11ce2a31145e7eda1fe386b62d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>WeakConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a29e67649edf945287f33e51334c33a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>UniqueMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a0a7a00afa4a30bac93eadb58fc74d5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>UniqueConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a640cd5d21ceb88b577d0cb6bf21e0dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 0 &gt;</type>
      <name>R0Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae72e38e578b41763d97f47d32bd1c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 1 &gt;</type>
      <name>R1Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>abaa5729da665c95333267de6bf10fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 2 &gt;</type>
      <name>R2Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ad1287648351a3a6f0cad1598d93c033c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 3 &gt;</type>
      <name>R3Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>adfaec81dec6569c2dea0cb06cc45794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 6 &gt;</type>
      <name>R6Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a840584b947a4d859602ef3498e72adfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpaceFor</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a3ef022436d4a8a4063c0661ec7605791</anchor>
      <arglist>(JointType *joint)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpace</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae89411503a43fe87a58f17a8b2780c24</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace::dart::detail</name>
    <filename>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</filename>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>Ptr</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ac5edd7cd9796d7a92e83134427897b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const ::dart::dynamics::BallJoint, const ::dart::dynamics::FreeJoint, const ::dart::dynamics::PlanarJoint, const ::dart::dynamics::PrismaticJoint, const ::dart::dynamics::RevoluteJoint, const ::dart::dynamics::TranslationalJoint, const ::dart::dynamics::WeldJoint &gt;</type>
      <name>ConstSupportedJoints</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ad0c36e19319b3799e605a8e187f2667f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::trajectory</name>
    <filename>d5/da2/namespaceaikido_1_1trajectory.html</filename>
    <class kind="class">aikido::trajectory::BSpline</class>
    <class kind="class">aikido::trajectory::Interpolated</class>
    <class kind="class">aikido::trajectory::Spline</class>
    <class kind="class">aikido::trajectory::Trajectory</class>
    <class kind="struct">aikido::trajectory::TrajectoryMetadata</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BSpline &gt;</type>
      <name>BSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ac89b04f346f87ecaf46e70ac24beff11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BSpline &gt;</type>
      <name>ConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a22d453735779a8169267516856ddb3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BSpline &gt;</type>
      <name>WeakBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a343d8e3d48df006922ca6d5800108c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BSpline &gt;</type>
      <name>WeakConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>abc082c3a700523a67f8919262c212212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BSpline &gt;</type>
      <name>UniqueBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afa10b662c09d5ac4c8776451d9db236f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BSpline &gt;</type>
      <name>UniqueConstBSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8eeaf2a312ce9917381b8ce9acaf5b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a2fa8e779f3587c13083faa74d6f72737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolated &gt;</type>
      <name>ConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a6ac0c2c899cf0a43fe9a86fca8b2e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolated &gt;</type>
      <name>WeakInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a37caeb8a3bfbca4cd15ef0d48d488572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolated &gt;</type>
      <name>WeakConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>acc72dc9ff0a7c62ada97262dd342331d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolated &gt;</type>
      <name>UniqueInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a3958f463715266c2e7bd73ade7883ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolated &gt;</type>
      <name>UniqueConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aac066660116f2c739043326d79c476f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Spline &gt;</type>
      <name>SplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af715b917d92eede8c24a30790d273e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Spline &gt;</type>
      <name>ConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa8b189d07ea49d83c818baee644ebb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Spline &gt;</type>
      <name>WeakSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a896ee681516fff77ef6c14e209b5f00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Spline &gt;</type>
      <name>WeakConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afd2d0c8515b91196680d24f8b8cef069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Spline &gt;</type>
      <name>UniqueSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a20652ba77dffc09d6854f0a67236fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Spline &gt;</type>
      <name>UniqueConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae070eefd5debfb165f8dd0399516271c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Trajectory &gt;</type>
      <name>TrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a4653e7dbb840b47d280798374eda6ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Trajectory &gt;</type>
      <name>ConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae287f9bd79aff29551b41b2e815e4c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Trajectory &gt;</type>
      <name>WeakTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a52a5ed13cddf456c3955d965617d3131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Trajectory &gt;</type>
      <name>WeakConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a89384b5934145651e614b905bca5c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Trajectory &gt;</type>
      <name>UniqueTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8af519255979af6d9041bbeade5dec34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Trajectory &gt;</type>
      <name>UniqueConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ad8b57775f2914cd7d23bf3339803c9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UniqueSplinePtr</type>
      <name>convertToSpline</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af299005792c264b9ff35b1cd8bf0539d</anchor>
      <arglist>(const Interpolated &amp;inputTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>UniqueInterpolatedPtr</type>
      <name>concatenate</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a21b989a57c98b2dfb3caabf0b101fc1d</anchor>
      <arglist>(const Interpolated &amp;traj1, const Interpolated &amp;traj2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>findTimeOfClosestStateOnTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a9086267fe55b7de8ffd1241d37e543b7</anchor>
      <arglist>(const Trajectory &amp;traj, const statespace::StateSpace::State *referenceState, double &amp;distance, double timeStep=0.01)</arglist>
    </member>
    <member kind="function">
      <type>UniqueSplinePtr</type>
      <name>createPartialTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afc674b3f17ecb06db7877b740414c822</anchor>
      <arglist>(const Spline &amp;traj, double partialStartTime)</arglist>
    </member>
    <member kind="function">
      <type>UniqueInterpolatedPtr</type>
      <name>toR1JointTrajectory</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa7257e76b31a126a7436f1c9ba84cd62</anchor>
      <arglist>(const Interpolated &amp;trajectory)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>dart</name>
    <filename>d1/d83/namespacedart.html</filename>
    <namespace>dart::dynamics</namespace>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics</name>
    <filename>d7/d5a/namespacedart_1_1dynamics.html</filename>
  </compound>
  <compound kind="namespace">
    <name>YAML</name>
    <filename>d5/d2f/namespaceYAML.html</filename>
    <class kind="struct">YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</class>
  </compound>
  <compound kind="page">
    <name>md_include_aikido_statespace_README</name>
    <title>State Space Concept</title>
    <filename>d0/d16/md_include_aikido_statespace_README</filename>
  </compound>
</tagfile>
