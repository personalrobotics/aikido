#ifndef AIKIDO_CONSTRAINT_RNCONSTANTSAMPLER_HPP_
#define AIKIDO_CONSTRAINT_RNCONSTANTSAMPLER_HPP_
#include "../../statespace/Rn.hpp"
#include "../Sampleable.hpp"

namespace aikido {
namespace constraint {

/// ConstantSampler for RealVectorStates.
/// Stub sampler for WeldJoint or any fixed constant state space.
template <int N>
class RnConstantSampler : public constraint::Sampleable
{
public:
  using VectorNd = Eigen::Matrix<double, N, 1>;

  /// Constructor.
  /// \param _space Space in which this constraint operates.
  /// \param _value Value to return when sampled.
  RnConstantSampler(
    std::shared_ptr<statespace::Rn<N>> _space, const VectorNd& _value);

  // Documentation inherited.
  statespace::StateSpacePtr getStateSpace() const override;

  // Documentation inherited.
  std::unique_ptr<constraint::SampleGenerator>
    createSampleGenerator() const override;

  /// Returns constant value to be generated by this sampler.
  const VectorNd& getConstantValue() const;

private:
  std::shared_ptr<statespace::Rn<N>> mSpace;
  VectorNd mValue;
};

using R0ConstantSampler = RnConstantSampler<0>;
using R1ConstantSampler = RnConstantSampler<1>;
using R2ConstantSampler = RnConstantSampler<2>;
using R3ConstantSampler = RnConstantSampler<3>;
using R6ConstantSampler = RnConstantSampler<6>;

} // namespace constraint
} // namespace aikido

#include "aikido/constraint/uniform/detail/RnConstantSampler-impl.hpp"

#endif // AIKIDO_CONSTRAINT_RNCONSTANTSAMPLER_HPP_
